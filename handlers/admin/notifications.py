# handlers/admin/notifications.py
from datetime import time
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters

from .utils import admin_only_handler # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
from logger import get_logger
from utils.send_tracking import create_excel_multisheet, get_vladivostok_filename
from utils.email_sender import send_email
from queries.admin_queries import get_data_for_test_notification, get_admin_user_for_email
from config import ADMIN_CHAT_ID
from services.notification_service import NotificationService

logger = get_logger(__name__)
AWAIT_FORCE_NOTIFY_TIME = range(1)

async def test_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    
    try:
        await chat.send_message("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞...")
        data_per_user = await get_data_for_test_notification()
        columns = ['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)', '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏']
        file_path = create_excel_multisheet(data_per_user, columns)
        filename = get_vladivostok_filename("–¢–µ—Å—Ç–æ–≤–∞—è_–¥–∏—Å–ª–æ–∫–∞—Ü–∏—è")
        with open(file_path, "rb") as f:
            await chat.send_document(document=f, filename=filename)
        
        admin_user = await get_admin_user_for_email(ADMIN_CHAT_ID)
        if admin_user and admin_user.emails:
            email = admin_user.emails[0].email
            await send_email(to=email, attachments=[file_path])
            await chat.send_message(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ `{email}`.", parse_mode='Markdown')
        else:
            await chat.send_message("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω email –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    except Exception as e:
        logger.error(f"[test_notify] –û—à–∏–±–∫–∞: {e}", exc_info=True)
        if chat: await chat.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def force_notify_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏."""
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context):
        return ConversationHandler.END
    
    if context.args:
        return await _process_force_notify(update, context, context.args[0])
    
    await chat.send_message("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00) –∏–ª–∏ /cancel.")
    return AWAIT_FORCE_NOTIFY_TIME

async def force_notify_receive_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return ConversationHandler.END
    return await _process_force_notify(update, context, update.message.text.strip())

async def _process_force_notify(update: Update, context: ContextTypes.DEFAULT_TYPE, time_str: str):
    chat = update.effective_chat
    if not chat: return ConversationHandler.END
        
    try:
        hour, minute = map(int, time_str.split(':'))
        target_time = time(hour=hour, minute=minute)
    except ValueError:
        await chat.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ß–ß:–ú–ú). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.")
        return AWAIT_FORCE_NOTIFY_TIME

    await chat.send_message(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {time_str}...")
    
    service = NotificationService(context.bot)
    try:
        await service.send_scheduled_notifications(target_time)
        await chat.send_message(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {time_str} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}", exc_info=True)
        await chat.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return ConversationHandler.END

async def force_notify_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

force_notify_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("force_notify", force_notify_start)],
    states={
        AWAIT_FORCE_NOTIFY_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, force_notify_receive_time)],
    },
    fallbacks=[CommandHandler("cancel", force_notify_cancel)],
)