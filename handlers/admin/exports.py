# handlers/admin/exports.py
from telegram import Update
from telegram.ext import ContextTypes
import asyncio
import os
from datetime import datetime

from config import ADMIN_CHAT_ID
from logger import get_logger
from queries.admin_queries import (
    get_daily_stats, 
    get_all_stats_for_export, 
    get_all_tracking_subscriptions, 
    get_data_for_test_notification, 
    get_admin_user_for_email
)
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–æ–≤
from utils.send_tracking import create_excel_file 
from utils.notify import notify_admin

logger = get_logger(__name__)

async def _send_stats_report(update: Update, context: ContextTypes.DEFAULT_TYPE, rows):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Å—É—Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ."""
    if not rows:
        await update.callback_query.edit_message_text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫—Ä–æ–º–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).")
        return
        
    lines = ["üìä **–°–≤–æ–¥–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 24 —á–∞—Å–∞:**\n", 
             "| ‚Ññ | –Æ–∑–µ—Ä | –ó–∞–ø—Ä. | –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã |", 
             "|---|---|---|---|"]
    
    for i, row in enumerate(rows):
        # row: (user_telegram_id, username, request_count, containers_str)
        user_id, username, count, containers = row
        # –û–±—Ä–µ–∑–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(containers) > 50:
             containers = containers[:47] + "..."
        
        lines.append(f"| {i+1} | {username} | {count} | {containers} |")
        
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º
    response = "\n".join(lines)
    if len(response) > 4000:
         response = response[:4000] + "\n..."
         
    await update.callback_query.edit_message_text(response, parse_mode='Markdown')

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞)."""
    if update.effective_user.id != ADMIN_CHAT_ID:
        return

    logger.info("[stats] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—É—Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    
    if update.callback_query:
        await update.callback_query.answer("–§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
    
    try:
        rows = await get_daily_stats() 
        if update.callback_query:
            await _send_stats_report(update, context, rows)
        else:
             # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
             response = "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)."
             if rows:
                 response = "üìä –°–≤–æ–¥–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 24 —á–∞—Å–∞:\n"
                 for row in rows:
                     response += f"User {row[1]} ({row[0]}): {row[2]} –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
             await update.message.reply_text(response)
             
    except Exception as e:
        logger.error(f"[stats] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        if update.callback_query:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. {e}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

# --- –§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ ---

async def _send_excel_export(update: Update, context: ContextTypes.DEFAULT_TYPE, rows, headers, filename_prefix: str):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel."""
    file_path = None
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º create_excel_file
        file_path = await asyncio.to_thread(
            create_excel_file,
            rows,
            headers
        )
        
        await update.callback_query.edit_message_text(f"‚è≥ –≠–∫—Å–ø–æ—Ä—Ç {filename_prefix}...")

        with open(file_path, 'rb') as f:
            await update.callback_query.bot.send_document(
                chat_id=ADMIN_CHAT_ID,
                document=f,
                filename=f"{filename_prefix}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                caption=f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç: {filename_prefix}"
            )
        await update.callback_query.edit_message_text(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç {filename_prefix} –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        
    except Exception as e:
        logger.error(f"[Export] –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ {filename_prefix}: {e}", exc_info=True)
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ {filename_prefix}: {e}")
    finally:
        if file_path and os.path.exists(file_path):
            os.remove(file_path)

async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–ª–ª–±—ç–∫: –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (user_requests)."""
    if update.effective_user.id != ADMIN_CHAT_ID or not update.callback_query:
        return
    
    await update.callback_query.answer("–ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    try:
        rows, headers = await get_all_stats_for_export()
        if rows:
            await _send_excel_export(update, context, rows, headers, "user_requests_all")
        else:
             await update.callback_query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
             
    except Exception as e:
        logger.error(f"[Export] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await update.callback_query.edit_message_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–ª–ª–±—ç–∫: –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (subscriptions)."""
    if update.effective_user.id != ADMIN_CHAT_ID or not update.callback_query:
        return
    
    await update.callback_query.answer("–ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫...")
    
    try:
        rows, headers = await get_all_tracking_subscriptions()
        if rows:
            await _send_excel_export(update, context, rows, headers, "subscriptions_all")
        else:
             await update.callback_query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫.")
             
    except Exception as e:
        logger.error(f"[Export] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫: {e}", exc_info=True)
        await update.callback_query.edit_message_text(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫.")