# handlers/admin/exports.py
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown

from .utils import admin_only_handler # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
from logger import get_logger
from utils.send_tracking import create_excel_file
from utils.send_tracking import get_vladivostok_filename
from queries.admin_queries import (
    get_all_stats_for_export, get_all_tracking_subscriptions, get_daily_stats
)

logger = get_logger(__name__)

async def export_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    query = update.callback_query
    if not query: return
    keyboard = [
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_exportstats")],
        [InlineKeyboardButton("üìÇ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="admin_tracking")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel_main")]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Excel."""
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    
    try:
        subs, columns = await get_all_tracking_subscriptions()
        if not subs or not columns:
            await chat.send_message("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return
        df = pd.DataFrame([list(row) for row in subs], columns=columns)
        file_path = create_excel_file(df.values.tolist(), df.columns.tolist())
        filename = get_vladivostok_filename("–ü–æ–¥–ø–∏—Å–∫–∏_–Ω–∞_—Ç—Ä–µ–∫–∏–Ω–≥")
        with open(file_path, "rb") as f:
            await chat.send_document(document=f, filename=filename)
    except Exception as e:
        logger.error(f"[tracking] –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}", exc_info=True)
        if chat: await chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞."""
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    
    try:
        rows = await get_daily_stats()
        if not rows:
            await chat.send_message("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.")
            return
        header = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*\n\n"
        message = header
        for row in rows:
            safe_username = escape_markdown(str(row.username), version=2)
            safe_containers = escape_markdown(str(row.containers), version=2)
            entry = (f"üë§ *{safe_username}* \\(ID: `{row.user_id}`\\)\n"
                     f"–ó–∞–ø—Ä–æ—Å–æ–≤: *{row.request_count}*\n"
                     f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: `{safe_containers}`\n\n")
            if len(message) + len(entry) > 4000:
                await chat.send_message(message, parse_mode='MarkdownV2')
                message = entry
            else:
                message += entry
        if message != header:
            await chat.send_message(message, parse_mode='MarkdownV2')
    except Exception as e:
        logger.error(f"[stats] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        if chat: await chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Excel."""
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    
    try:
        rows, columns = await get_all_stats_for_export()
        if not rows or not columns:
            await chat.send_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return
        df = pd.DataFrame([list(row) for row in rows], columns=columns)
        file_path = create_excel_file(df.values.tolist(), df.columns.tolist())
        filename = get_vladivostok_filename("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∑–∞–ø—Ä–æ—Å–æ–≤")
        with open(file_path, "rb") as f:
            await chat.send_document(document=f, filename=filename)
    except Exception as e:
        logger.error(f"[exportstats] –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        if chat: await chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ.")