# handlers/subscription_management_handler.py
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, 
    CallbackQueryHandler, MessageHandler, filters
)
from queries.user_queries import get_user_emails, add_user_email, delete_user_email
from logger import get_logger
# from handlers.menu_handlers import reply_keyboard_handler <--- –£–î–ê–õ–ï–ù–ê –°–¢–†–û–ö–ê, –í–´–ó–´–í–ê–í–®–ê–Ø –¶–ò–ö–õ–ò–ß–ï–°–ö–ò–ô –ò–ú–ü–û–†–¢

logger = get_logger(__name__)
ADD_EMAIL = range(1)
EMAIL_REGEX = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

async def build_email_management_menu(telegram_id: int, intro_text: str) -> dict:
    user_emails = await get_user_emails(telegram_id)
    keyboard = []
    text = f"{intro_text}\n\n"
    if user_emails:
        text += "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:\n"
        for email in user_emails:
            text += f"‚Ä¢ `{email.email}`\n"
            keyboard.append([InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {email.email}", callback_data=f"delete_email_{email.id}")])
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö email-–∞–¥—Ä–µ—Å–æ–≤.\n"
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π Email", callback_data="add_email_start")])
    return {"text": text, "reply_markup": InlineKeyboardMarkup(keyboard)}

async def my_emails_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not update.message: return
    menu_data = await build_email_management_menu(update.effective_user.id, "üìß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Email-–∞–¥—Ä–µ—Å–∞–º–∏*")
    await update.message.reply_text(menu_data["text"], reply_markup=menu_data["reply_markup"], parse_mode='Markdown')

async def delete_email_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or not query.from_user: return
    await query.answer()
    email_id = int(query.data.split("_")[-1])
    deleted = await delete_user_email(email_id, query.from_user.id)
    intro_text = "‚úÖ Email —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω." if deleted else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å email."
    menu_data = await build_email_management_menu(query.from_user.id, intro_text)
    await query.edit_message_text(menu_data["text"], reply_markup=menu_data["reply_markup"], parse_mode='Markdown')

async def add_email_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query: return ConversationHandler.END
    await query.answer()
    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ email-–∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    return ADD_EMAIL

async def add_email_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or not update.effective_user: return ConversationHandler.END
    email = update.message.text.strip()
    if not re.fullmatch(EMAIL_REGEX, email):
        await update.message.reply_text("‚õîÔ∏è –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return ADD_EMAIL
    added_email = await add_user_email(update.effective_user.id, email)
    intro_text = f"‚úÖ –ù–æ–≤—ã–π email `{added_email.email}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω." if added_email else f"‚ö†Ô∏è Email `{email}` —É–∂–µ –±—ã–ª –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ."
    menu_data = await build_email_management_menu(update.effective_user.id, intro_text)
    await update.message.reply_text(menu_data["text"], reply_markup=menu_data["reply_markup"], parse_mode='Markdown')
    return ConversationHandler.END

# –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –≤ fallbacks, –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ `reply_keyboard_handler` –≤–Ω—É—Ç—Ä—å —Ñ—É–Ω–∫—Ü–∏–∏
# –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ä–æ—É—Ç–∏–Ω–≥, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω. –û—Å—Ç–∞–≤–∏–º –ª–æ–≥–∏–∫—É, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ
# reply_keyboard_handler –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞.
async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return ConversationHandler.END
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def cancel_and_reroute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return ConversationHandler.END
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é...")
    # NOTE: –ü–æ—Å–∫–æ–ª—å–∫—É reply_keyboard_handler –≤—ã–∑–≤–∞–ª —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç, 
    # –º—ã –¥–æ–ª–∂–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –≤—ã–∑–æ–≤:
    # await reply_keyboard_handler(update, context) 
    
    # –í–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º /start
    from handlers.menu_handlers import start
    await start(update, context)
    return ConversationHandler.END

def get_email_conversation_handler() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(add_email_start, pattern="^add_email_start$")],
        states={
            ADD_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_email_receive)]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation),
            # filters.Regex("^(üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è|üìÇ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏)$") –≤—ã–∑—ã–≤–∞–µ—Ç MessageHandler,
            # –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ cancel_and_reroute.
            # –û—Å—Ç–∞–≤–∏–º —ç—Ç–æ, —Ç–∞–∫ –∫–∞–∫ cancel_and_reroute —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç start
            MessageHandler(filters.Regex("^(üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è|üìÇ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏|üöÜ –ú–æ–∏ –ø–æ–µ–∑–¥–∞)$"), cancel_and_reroute)
        ],
    )

def get_email_command_handlers():
    return [
        CommandHandler("my_emails", my_emails_command),
        CallbackQueryHandler(delete_email_callback, pattern="^delete_email_"),
    ]