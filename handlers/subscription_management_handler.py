# handlers/subscription_management_handler.py
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from queries.subscription_queries import get_user_subscriptions, delete_subscription, get_subscription_details
from queries.user_queries import register_user_if_not_exists 
from logger import get_logger

# NOTE: –ò–º–ø–æ—Ä—Ç—ã –∏–∑ handlers.menu_handlers —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è Circular Import

logger = get_logger(__name__)

async def my_subscriptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message and not update.callback_query or not update.effective_user: # –£—á–∏—Ç—ã–≤–∞–µ–º CallbackQuery
        return
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫ ---
    await register_user_if_not_exists(update.effective_user) 
    # --------------------------------------------------------------------------
    
    subs = await get_user_subscriptions(update.effective_user.id)
    keyboard = []
    text = "üìÇ *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
    if not subs:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
    else:
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        for sub in subs:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º sub.id –≤–º–µ—Å—Ç–æ sub.display_id
            keyboard.append([InlineKeyboardButton(f"{sub.subscription_name} ({sub.id})", callback_data=f"sub_menu_{sub.id}")]) 
    keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data="create_sub_start")])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –≤—ã–∑–æ–≤ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–±—ç–∫)
    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    elif update.callback_query:
         # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –∫–æ–ª–±—ç–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(update.effective_chat.id, text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def subscription_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    await query.answer()
    subscription_id = int(query.data.split("_")[-1])
    sub = await get_subscription_details(subscription_id, query.from_user.id)
    if not sub:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        return
        
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É email –∏–∑ –æ–±—ä–µ–∫—Ç–∞ UserEmail
    # sub.target_emails —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç—ã SubscriptionEmail, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç .email (–æ–±—ä–µ–∫—Ç UserEmail)
    email_list = [sub_email.email.email for sub_email in sub.target_emails]
    
    emails_text = '`' + '`, `'.join(email_list) + '`' if email_list else '–¢–æ–ª—å–∫–æ –≤ Telegram'
    status_text = '–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if sub.is_active is True else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚è∏Ô∏è'
    containers_count = len(sub.containers) if sub.containers is not None else 0
    text = (
        f"‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π:*\n"
        f"*{sub.subscription_name}* `({sub.id})`\n\n" # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º sub.id
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {sub.notification_time.strftime('%H:%M')}\n" 
        f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {containers_count} —à—Ç.\n"
        f"Email –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤: {emails_text}"
    )
    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", callback_data=f"sub_show_{sub.id}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"sub_delete_{sub.id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="sub_back_to_list")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def show_containers_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    await query.answer()
    subscription_id = int(query.data.split("_")[-1])
    sub = await get_subscription_details(subscription_id, query.from_user.id)
    if not sub:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    if not sub.containers or len(sub.containers) == 0:
        text = "–í —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."
    else:
        container_list = "\n".join(f"`{c}`" for c in sub.containers)
        text = f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ –ø–æ–¥–ø–∏—Å–∫–µ *{sub.subscription_name}*:\n{container_list}"
    if update.effective_chat:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode='Markdown')

async def delete_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    await query.answer()
    subscription_id = int(query.data.split("_")[-1])
    deleted = await delete_subscription(subscription_id, query.from_user.id)
    if deleted:
        await query.edit_message_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")

async def back_to_subscriptions_list_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.from_user:
        return
    await query.answer()
    subs = await get_user_subscriptions(query.from_user.id)
    keyboard = []
    text = "üìÇ *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
    if not subs:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
    else:
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        for sub in subs:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º sub.id
            keyboard.append([InlineKeyboardButton(f"{sub.subscription_name} ({sub.id})", callback_data=f"sub_menu_{sub.id}")])
    keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É", callback_data="create_sub_start")])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

def get_subscription_management_handlers():
    return [
        CommandHandler("my_subscriptions", my_subscriptions_command),
        CallbackQueryHandler(subscription_menu_callback, pattern="^sub_menu_"),
        CallbackQueryHandler(show_containers_callback, pattern="^sub_show_"),
        CallbackQueryHandler(delete_subscription_callback, pattern="^sub_delete_"),
        CallbackQueryHandler(back_to_subscriptions_list_callback, pattern="^sub_back_to_list$"),
    ]
