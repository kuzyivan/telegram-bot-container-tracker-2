# handlers/tracking_handlers.py
import re
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters,
    CommandHandler
)
from logger import get_logger
from queries.user_queries import get_user_emails
from queries.subscription_queries import create_subscription
from handlers.menu_handlers import reply_keyboard_handler

logger = get_logger(__name__)
GET_CONTAINERS, GET_TIME, GET_EMAILS, GET_NAME, CONFIRM = range(5)
EMAIL_SELECT_PREFIX = "email_select_"

async def create_subscription_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.from_user: return ConversationHandler.END
    await query.answer()
    if context.user_data is None: context.user_data = {}
    else: context.user_data.clear()
    logger.info(f"–®–∞–≥ 1 (–ù–∞—á–∞–ª–æ): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")
    await query.edit_message_text("–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    return GET_CONTAINERS

async def get_containers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or context.user_data is None or not update.effective_user: return ConversationHandler.END
    containers = [c.strip().upper() for c in re.split(r'[\s,]+', update.message.text) if c.strip()]
    if not containers:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel.")
        return GET_CONTAINERS
    context.user_data['containers'] = containers
    logger.info(f"–®–∞–≥ 2 (–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {containers}")
    keyboard = [[InlineKeyboardButton("üïò 09:00", callback_data="time_09:00")], [InlineKeyboardButton("üïì 16:00", callback_data="time_16:00")]]
    await update.message.reply_text("–®–∞–≥ 2/4: –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return GET_TIME

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or context.user_data is None or not query.from_user: return ConversationHandler.END
    await query.answer()
    time_str = query.data.split("_")[1]
    hour, minute = map(int, time_str.split(':'))
    context.user_data['notify_time'] = datetime.time(hour=hour, minute=minute)
    logger.info(f"–®–∞–≥ 3 (–í—Ä–µ–º—è): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è {time_str}.")
    user_emails = await get_user_emails(query.from_user.id)
    context.user_data['selected_emails'] = set()
    text = "–®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ email-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ."
    keyboard = []
    if user_emails:
        for email in user_emails:
            keyboard.append([InlineKeyboardButton(f"üî≤ {email.email}", callback_data=f"{EMAIL_SELECT_PREFIX}{email.id}")])
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ (—Ç–æ–ª—å–∫–æ –≤ Telegram)", callback_data="emails_done")])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return GET_EMAILS

async def get_emails(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or context.user_data is None or not query.from_user: return ConversationHandler.END
    await query.answer()
    if query.data == "emails_done":
        logger.info(f"–®–∞–≥ 4 (Email –ì–æ—Ç–æ–≤–æ): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–±–æ—Ä email. –í—ã–±—Ä–∞–Ω–Ω—ã–µ ID: {context.user_data.get('selected_emails')}")
        await query.edit_message_text("–®–∞–≥ 4/4: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ê').")
        return GET_NAME
    email_id = int(query.data.replace(EMAIL_SELECT_PREFIX, ""))
    selected_emails = context.user_data.get('selected_emails', set())
    if email_id in selected_emails: selected_emails.remove(email_id)
    else: selected_emails.add(email_id)
    context.user_data['selected_emails'] = selected_emails
    logger.info(f"–®–∞–≥ 3.1 (–í—ã–±–æ—Ä Email): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –∏–∑–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä. –¢–µ–∫—É—â–∏–µ ID: {selected_emails}")
    user_emails = await get_user_emails(query.from_user.id)
    keyboard = []
    if user_emails:
        for email in user_emails:
            is_selected = email.id in selected_emails
            button_text = f"{'‚úÖ' if is_selected else 'üî≤'} {email.email}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"{EMAIL_SELECT_PREFIX}{email.id}")])
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="emails_done")])
    await query.edit_message_text("–®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ email-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.", reply_markup=InlineKeyboardMarkup(keyboard))
    return GET_EMAILS

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or context.user_data is None or not update.effective_user: return ConversationHandler.END
    subscription_name = update.message.text.strip()
    context.user_data['name'] = subscription_name
    logger.info(f"–®–∞–≥ 5 (–ò–º—è): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤–≤–µ–ª –∏–º—è –ø–æ–¥–ø–∏—Å–∫–∏: '{subscription_name}'")
    ud = context.user_data
    containers_str = ", ".join([str(c) for c in ud.get('containers', [])])
    text = (f"üîç *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ*\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: *{ud.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: `{containers_str}`\n–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {ud.get('notify_time', datetime.time(9,0)).strftime('%H:%M')}\n")
    email_ids = list(ud.get('selected_emails', []))
    if email_ids:
        user_emails = await get_user_emails(update.effective_user.id)
        selected_email_texts = [e.email for e in user_emails if e.id in email_ids]
        text += f"Email: `{', '.join(selected_email_texts)}`"
    else: text += "Email: _–¢–æ–ª—å–∫–æ –≤ Telegram_"
    keyboard = [[InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_create"), InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")]]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return CONFIRM

async def confirm_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or context.user_data is None or not query.from_user: return ConversationHandler.END
    if query.data == "cancel_create":
        logger.info(f"–®–∞–≥ 6 (–û—Ç–º–µ–Ω–∞): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —à–∞–≥–µ.")
        await query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END
    ud = context.user_data
    logger.info(f"–®–∞–≥ 6 (–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ '{ud.get('name')}'.")
    await create_subscription(user_id=query.from_user.id, name=ud.get('name', '–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'), containers=ud.get('containers', []), notify_time=ud.get('notify_time', datetime.time(9,0)), email_ids=list(ud.get('selected_emails', [])))
    await query.edit_message_text(f"‚úÖ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ '{ud.get('name', '')}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return ConversationHandler.END
    user_id = update.effective_user.id if update.effective_user else "N/A"
    logger.info(f"–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /cancel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    if context.user_data: context.user_data.clear()
    return ConversationHandler.END

async def cancel_and_reroute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return ConversationHandler.END
    user_id = update.effective_user.id if update.effective_user else "N/A"
    logger.info(f"–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é...")
    if context.user_data: context.user_data.clear()
    await reply_keyboard_handler(update, context)
    return ConversationHandler.END

def tracking_conversation_handler():
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(create_subscription_start, pattern="^create_sub_start$")],
        states={
            GET_CONTAINERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_containers)],
            GET_TIME: [CallbackQueryHandler(get_time, pattern="^time_")],
            GET_EMAILS: [CallbackQueryHandler(get_emails, pattern=f"^(emails_done|{EMAIL_SELECT_PREFIX})")],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            CONFIRM: [CallbackQueryHandler(confirm_creation, pattern="^confirm_create|cancel_create$")]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation),
            MessageHandler(filters.Regex("^(üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è|üìÇ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏)$"), cancel_and_reroute)
        ],
    )