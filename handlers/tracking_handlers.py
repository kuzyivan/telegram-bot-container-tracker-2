# handlers/tracking_handlers.py
import re
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters,
    CommandHandler
)
from logger import get_logger
from queries.user_queries import get_user_emails
from queries.subscription_queries import create_subscription

logger = get_logger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
GET_CONTAINERS, GET_TIME, GET_EMAILS, GET_NAME, CONFIRM = range(5)
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è callback_data
EMAIL_SELECT_PREFIX = "email_select_"

# --- –®–∞–≥ 1: –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ ---
async def create_subscription_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return ConversationHandler.END
    
    await query.answer()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ user_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—É—Å—Ç
    if context.user_data is None:
        context.user_data = {}
    else:
        context.user_data.clear()

    await query.edit_message_text(
        "–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel."
    )
    return GET_CONTAINERS

# --- –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ---
async def get_containers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_data –Ω–µ None, –∞ –Ω–µ —Ç–æ, —á—Ç–æ –æ–Ω –Ω–µ –ø—É—Å—Ç
    if not update.message or not update.message.text or context.user_data is None:
        return ConversationHandler.END

    containers = [c.strip().upper() for c in re.split(r'[\s,]+', update.message.text) if c.strip()]
    if not containers:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel.")
        return GET_CONTAINERS

    context.user_data['containers'] = containers
    
    keyboard = [
        [InlineKeyboardButton("üïò 09:00", callback_data="time_09:00")],
        [InlineKeyboardButton("üïì 16:00", callback_data="time_16:00")]
    ]
    await update.message.reply_text(
        "–®–∞–≥ 2/4: –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return GET_TIME

# --- –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å email ---
async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or context.user_data is None or not query.from_user:
        return ConversationHandler.END

    await query.answer()
    
    time_str = query.data.split("_")[1]
    hour, minute = map(int, time_str.split(':'))
    context.user_data['notify_time'] = datetime.time(hour=hour, minute=minute)

    user_emails = await get_user_emails(query.from_user.id)
    context.user_data['selected_emails'] = set()

    text = "–®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ email-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ."
    keyboard = []
    if user_emails:
        for email in user_emails:
            keyboard.append([InlineKeyboardButton(f"üî≤ {email.email}", callback_data=f"{EMAIL_SELECT_PREFIX}{email.id}")])
    
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ (—Ç–æ–ª—å–∫–æ –≤ Telegram)", callback_data="emails_done")])

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return GET_EMAILS

# --- –®–∞–≥ 4: –í—ã–±–æ—Ä email-–∞–¥—Ä–µ—Å–æ–≤ ---
async def get_emails(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or context.user_data is None or not query.from_user:
        return ConversationHandler.END

    await query.answer()

    if query.data == "emails_done":
        await query.edit_message_text("–®–∞–≥ 4/4: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ê').")
        return GET_NAME

    email_id = int(query.data.replace(EMAIL_SELECT_PREFIX, ""))
    selected_emails = context.user_data.get('selected_emails', set())

    if email_id in selected_emails:
        selected_emails.remove(email_id)
    else:
        selected_emails.add(email_id)
    context.user_data['selected_emails'] = selected_emails

    user_emails = await get_user_emails(query.from_user.id)
    keyboard = []
    if user_emails:
        for email in user_emails:
            is_selected = email.id in selected_emails
            button_text = f"{'‚úÖ' if is_selected else 'üî≤'} {email.email}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"{EMAIL_SELECT_PREFIX}{email.id}")])

    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="emails_done")])
    await query.edit_message_text(
        "–®–∞–≥ 3/4: –í—ã–±–µ—Ä–∏—Ç–µ email-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞. –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return GET_EMAILS

# --- –®–∞–≥ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ---
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or context.user_data is None or not update.effective_user:
        return ConversationHandler.END
        
    context.user_data['name'] = update.message.text.strip()
    
    ud = context.user_data
    containers_str = ", ".join([str(c) for c in ud.get('containers', [])])
    
    text = (
        f"üîç *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ*\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: *{ud.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n"
        f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: `{containers_str}`\n"
        f"–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {ud.get('notify_time', datetime.time(9,0)).strftime('%H:%M')}\n"
    )
    
    email_ids = list(ud.get('selected_emails', []))
    if email_ids:
        user_emails = await get_user_emails(update.effective_user.id)
        selected_email_texts = [e.email for e in user_emails if e.id in email_ids]
        text += f"Email: `{', '.join(selected_email_texts)}`"
    else:
        text += "Email: _–¢–æ–ª—å–∫–æ –≤ Telegram_"

    keyboard = [[
        InlineKeyboardButton("üöÄ –°–æ–∑–¥–∞—Ç—å", callback_data="confirm_create"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_create")
    ]]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
    return CONFIRM

# --- –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ ---
async def confirm_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or context.user_data is None or not query.from_user:
        return ConversationHandler.END

    if query.data == "cancel_create":
        await query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        context.user_data.clear()
        return ConversationHandler.END

    ud = context.user_data
    await create_subscription(
        user_id=query.from_user.id,
        name=ud.get('name', '–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'),
        containers=ud.get('containers', []),
        notify_time=ud.get('notify_time', datetime.time(9,0)),
        email_ids=list(ud.get('selected_emails', []))
    )
    
    await query.edit_message_text(f"‚úÖ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ '{ud.get('name', '')}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    context.user_data.clear()
    return ConversationHandler.END

# --- –û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞ ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_to_send = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    if update.message:
        await update.message.reply_text(message_to_send)
    elif update.callback_query:
        await update.callback_query.edit_message_text(message_to_send)

    if context.user_data:
        context.user_data.clear()
    return ConversationHandler.END

# --- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤ –æ–¥–∏–Ω ConversationHandler ---
def tracking_conversation_handler():
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(create_subscription_start, pattern="^create_sub_start$")],
        states={
            GET_CONTAINERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_containers)],
            GET_TIME: [CallbackQueryHandler(get_time, pattern="^time_")],
            GET_EMAILS: [CallbackQueryHandler(get_emails, pattern=f"^(emails_done|{EMAIL_SELECT_PREFIX})")],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            CONFIRM: [CallbackQueryHandler(confirm_creation, pattern="^confirm_create|cancel_create$")]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )