# handlers/email_management_handler.py
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, 
    CallbackQueryHandler, MessageHandler, filters
)
from queries.user_queries import get_user_emails, add_unverified_email, delete_user_email, register_user_if_not_exists, generate_and_save_verification_code, verify_code_and_activate_email, delete_unverified_email
from logger import get_logger
from handlers.menu_handlers import reply_keyboard_handler
import asyncio
from utils.email_sender import send_email, generate_verification_email

logger = get_logger(__name__)
# –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
(ADD_EMAIL, AWAIT_VERIFICATION_CODE) = range(2)
EMAIL_REGEX = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
CODE_REGEX = r'^\d{6}$' # –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - 6 —Ü–∏—Ñ—Ä

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é ---

async def build_email_management_menu(telegram_id: int, intro_text: str) -> dict:
    # –ó–∞–ø—Ä–æ—Å —Ç–µ–ø–µ—Ä—å —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ù–´–ï –∞–¥—Ä–µ—Å–∞
    user_emails = await get_user_emails(telegram_id) 
    keyboard = []
    text = f"{intro_text}\n\n"
    if user_emails:
        text += "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:\n"
        for email in user_emails:
            # ‚úÖ –í—Å–µ –∞–¥—Ä–µ—Å–∞ –≤ —ç—Ç–æ–º –º–µ–Ω—é —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã
            text += f"‚Ä¢ `{email.email}`\n"
            keyboard.append([InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {email.email}", callback_data=f"delete_email_{email.id}")])
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö email-–∞–¥—Ä–µ—Å–æ–≤.\n"
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π Email", callback_data="add_email_start")])
    return {"text": text, "reply_markup": InlineKeyboardMarkup(keyboard)}

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ (–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞) ---

async def my_emails_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not update.message: return
    
    await register_user_if_not_exists(update.effective_user) 

    menu_data = await build_email_management_menu(update.effective_user.id, "üìß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Email-–∞–¥—Ä–µ—Å–∞–º–∏*")
    await update.message.reply_text(menu_data["text"], reply_markup=menu_data["reply_markup"], parse_mode='Markdown')

async def delete_email_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or not query.from_user: return
    await query.answer()
    email_id = int(query.data.split("_")[-1])
    deleted = await delete_user_email(email_id, query.from_user.id)
    intro_text = "‚úÖ Email —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω." if deleted else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å email."
    menu_data = await build_email_management_menu(query.from_user.id, intro_text)
    await query.edit_message_text(menu_data["text"], reply_markup=menu_data["reply_markup"], parse_mode='Markdown')

# --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (Conversation Handler) ---

async def add_email_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query: return ConversationHandler.END
    await query.answer()
    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ email-–∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    return ADD_EMAIL

async def add_email_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ—Ç email, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∫–∞–∫ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥."""
    if not update.message or not update.message.text or not update.effective_user: return ConversationHandler.END
    
    email = update.message.text.strip()
    user_id = update.effective_user.id

    if not re.fullmatch(EMAIL_REGEX, email):
        await update.message.reply_text("‚õîÔ∏è –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return ADD_EMAIL
        
    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –∫–∞–∫ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π
    unverified_email_obj = await add_unverified_email(user_id, email)
    if unverified_email_obj is None:
        # –ï—Å–ª–∏ None, –∑–Ω–∞—á–∏—Ç, –∞–¥—Ä–µ—Å —É–∂–µ –µ—Å—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(f"‚ö†Ô∏è Email `{email}` —É–∂–µ –±—ã–ª –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ /cancel.", parse_mode='Markdown')
        return ADD_EMAIL

    # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
    code = await generate_and_save_verification_code(user_id, email)
    
    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ –ø–æ—á—Ç–µ (—Ñ–æ–Ω–æ–≤–æ)
    subject, body = generate_verification_email(code, user_id)
    # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é send_email –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–∑–æ–≤ –æ—Å—Ç–∞—ë—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ send_email —Ç–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞
    await asyncio.to_thread(send_email, to=email, subject=subject, body=body, attachments=None)

    # 4. –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
    context.user_data['email_to_verify'] = email
    await update.message.reply_text(
        f"‚úÖ –ù–∞ –∞–¥—Ä–µ—Å `{email}` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —á–∞—Ç. –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        parse_mode='Markdown'
    )
    return AWAIT_VERIFICATION_CODE

async def receive_verification_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç email."""
    if not update.message or not update.message.text or not update.effective_user: return ConversationHandler.END
    
    code = update.message.text.strip()
    user_id = update.effective_user.id
    email_to_verify = context.user_data.get('email_to_verify')

    if not re.fullmatch(CODE_REGEX, code):
        await update.message.reply_text("‚õîÔ∏è –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return AWAIT_VERIFICATION_CODE
        
    if not email_to_verify:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞ —Å /my_emails.")
        return ConversationHandler.END

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
    verified_email = await verify_code_and_activate_email(user_id, code)

    if verified_email:
        intro_text = f"‚úÖ Email `{verified_email}` —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫!"
    else:
        # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É (–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è)
        intro_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å /my_emails."
        await update.message.reply_text(intro_text)
        return AWAIT_VERIFICATION_CODE
    
    # 2. –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    context.user_data.clear()
    menu_data = await build_email_management_menu(user_id, intro_text)
    await update.message.reply_text(menu_data["text"], reply_markup=menu_data["reply_markup"], parse_mode='Markdown')
    return ConversationHandler.END


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_user: return ConversationHandler.END
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ email –∏ –∫–æ–¥–æ–≤
    email_to_clear = context.user_data.get('email_to_verify')
    await delete_unverified_email(update.effective_user.id, email_to_clear)

    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_and_reroute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_user: return ConversationHandler.END
    
    # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ email –∏ –∫–æ–¥–æ–≤
    email_to_clear = context.user_data.get('email_to_verify')
    await delete_unverified_email(update.effective_user.id, email_to_clear)

    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é...")
    await reply_keyboard_handler(update, context)
    context.user_data.clear()
    return ConversationHandler.END

def get_email_conversation_handler() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(add_email_start, pattern="^add_email_start$")],
        states={
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º Email
            ADD_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_email_receive)],
            # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            AWAIT_VERIFICATION_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_verification_code)]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_conversation),
            MessageHandler(filters.Regex("^(üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è|üìÇ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏)$"), cancel_and_reroute)
        ],
    )

def get_email_command_handlers():
    return [
        CommandHandler("my_emails", my_emails_command),
        CallbackQueryHandler(delete_email_callback, pattern="^delete_email_"),
    ]
