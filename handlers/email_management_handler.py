# handlers/email_management_handler.py
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, 
    CallbackQueryHandler, MessageHandler, filters
)
from queries.user_queries import get_user_emails, add_user_email, delete_user_email
from logger import get_logger

logger = get_logger(__name__)

ADD_EMAIL = range(1)
EMAIL_REGEX = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'

async def build_email_management_menu(telegram_id: int, intro_text: str) -> dict:
    user_emails = await get_user_emails(telegram_id)
    keyboard = []
    text = f"{intro_text}\n\n"
    if user_emails:
        text += "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:\n"
        for email in user_emails:
            text += f"‚Ä¢ `{email.email}`\n"
            keyboard.append([InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {email.email}", callback_data=f"delete_email_{email.id}")])
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö email-–∞–¥—Ä–µ—Å–æ–≤.\n"
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π Email", callback_data="add_email_start")])
    return {"text": text, "reply_markup": InlineKeyboardMarkup(keyboard)}

async def my_emails_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not update.message:
        return
    menu_data = await build_email_management_menu(
        update.effective_user.id,
        "üìß *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Email-–∞–¥—Ä–µ—Å–∞–º–∏*"
    )
    await update.message.reply_text(menu_data["text"], reply_markup=menu_data["reply_markup"], parse_mode='Markdown')

async def delete_email_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data or not query.from_user: return
    await query.answer()
    email_id = int(query.data.split("_")[-1])
    deleted = await delete_user_email(email_id, query.from_user.id)
    intro_text = "‚úÖ Email —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω." if deleted else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å email."
    menu_data = await build_email_management_menu(query.from_user.id, intro_text)
    await query.edit_message_text(menu_data["text"], reply_markup=menu_data["reply_markup"], parse_mode='Markdown')

async def add_email_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query: return ConversationHandler.END
    await query.answer()
    await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ email-–∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
    return ADD_EMAIL

async def add_email_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or not update.effective_user: return ConversationHandler.END
    email = update.message.text.strip()
    if not re.fullmatch(EMAIL_REGEX, email):
        await update.message.reply_text("‚õîÔ∏è –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return ADD_EMAIL
    added_email = await add_user_email(update.effective_user.id, email)
    intro_text = f"‚úÖ –ù–æ–≤—ã–π email `{added_email.email}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω." if added_email else f"‚ö†Ô∏è Email `{email}` —É–∂–µ –±—ã–ª –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ."
    menu_data = await build_email_management_menu(update.effective_user.id, intro_text)
    await update.message.reply_text(menu_data["text"], reply_markup=menu_data["reply_markup"], parse_mode='Markdown')
    return ConversationHandler.END

async def add_email_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_user: return ConversationHandler.END
    intro_text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    menu_data = await build_email_management_menu(update.effective_user.id, intro_text)
    await update.message.reply_text(menu_data["text"], reply_markup=menu_data["reply_markup"], parse_mode='Markdown')
    return ConversationHandler.END

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
def get_email_conversation_handler() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(add_email_start, pattern="^add_email_start$")],
        states={
            ADD_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_email_receive)]
        },
        fallbacks=[CommandHandler("cancel", add_email_cancel)],
    )

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
def get_email_command_handlers():
    return [
        CommandHandler("my_emails", my_emails_command),
        CallbackQueryHandler(delete_email_callback, pattern="^delete_email_"),
    ]