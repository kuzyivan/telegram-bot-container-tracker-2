# handlers/admin_handlers.py
import pandas as pd
from telegram import Update
from telegram.ext import ContextTypes

from config import ADMIN_CHAT_ID
from logger import get_logger
from utils.send_tracking import create_excel_file, create_excel_multisheet, get_vladivostok_filename
from utils.email_sender import send_email

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from queries.admin_queries import (
    get_all_stats_for_export,
    get_all_tracking_subscriptions,
    get_daily_stats,
    get_data_for_test_notification,
    get_admin_user_for_email,
)

logger = get_logger(__name__)


async def admin_only_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –¥–∞."""
    if not update.message or not update.effective_user:
        logger.warning(f"–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç message –∏–ª–∏ user.")
        return False
    
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.warning(f"–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
        return False
    return True


async def tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only_handler(update, context) or not update.message:
        return

    logger.info("[tracking] –ó–∞–ø—Ä–æ—Å –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    try:
        subs, columns = await get_all_tracking_subscriptions()
        if not subs or not columns:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–µ–∂–µ–Ω–∏–π.")
            return

        df = pd.DataFrame([list(row) for row in subs], columns=columns)
        file_path = create_excel_file(df.values.tolist(), df.columns.tolist())
        filename = get_vladivostok_filename("–ü–æ–¥–ø–∏—Å–∫–∏_–Ω–∞_—Ç—Ä–µ–∫–∏–Ω–≥")
        
        with open(file_path, "rb") as f:
            await update.message.reply_document(document=f, filename=filename)
        logger.info("[tracking] –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"[tracking] –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}", exc_info=True)
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–¥–ø–∏—Å–æ–∫.")


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only_handler(update, context) or not update.message:
        return
    
    logger.info("[stats] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å—É—Ç–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    try:
        rows = await get_daily_stats()
        if not rows:
            await update.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.")
            return

        text_msg = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:**\n\n"
        for row in rows:
            entry = (
                f"üë§ **{row.username}** (ID: `{row.user_id}`)\n"
                f"–ó–∞–ø—Ä–æ—Å–æ–≤: **{row.request_count}**\n"
                f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: `{row.containers}`\n\n"
            )
            text_msg += entry
        
        await update.message.reply_text(text_msg, parse_mode='Markdown')
        logger.info("[stats] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"[stats] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only_handler(update, context) or not update.message:
        return

    logger.info("[exportstats] –ó–∞–ø—Ä–æ—Å Excel-–≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    try:
        rows, columns = await get_all_stats_for_export()
        if not rows or not columns:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return

        df = pd.DataFrame([list(row) for row in rows], columns=columns)
        file_path = create_excel_file(df.values.tolist(), df.columns.tolist())
        filename = get_vladivostok_filename("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∑–∞–ø—Ä–æ—Å–æ–≤")
        
        with open(file_path, "rb") as f:
            await update.message.reply_document(document=f, filename=filename)

    except Exception as e:
        logger.error(f"[exportstats] –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def test_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only_handler(update, context) or not update.message:
        return

    logger.info("[test_notify] –ó–∞–ø—Ä–æ—Å —Ç–µ—Å—Ç–æ–≤–æ–π –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    try:
        data_per_user = await get_data_for_test_notification()
        columns = [
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
            '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        ]
        
        file_path = create_excel_multisheet(data_per_user, columns)
        filename = get_vladivostok_filename("–¢–µ—Å—Ç–æ–≤–∞—è_–¥–∏—Å–ª–æ–∫–∞—Ü–∏—è")

        with open(file_path, "rb") as f:
            await update.message.reply_document(document=f, filename=filename)
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞.")

        admin_user = await get_admin_user_for_email(ADMIN_CHAT_ID)
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É 'is not None'
        if admin_user and admin_user.email is not None:
            await send_email(to=admin_user.email, attachments=[file_path])
            logger.info(f"üìß –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {admin_user.email}")

    except Exception as e:
        logger.error(f"[test_notify] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ.")