import pandas as pd
from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_CHAT_ID
from datetime import datetime, timedelta, time
from sqlalchemy import text
from sqlalchemy.future import select
from db import SessionLocal
from models import TrackingSubscription, Tracking
from logger import get_logger

from utils.send_tracking import create_excel_file, create_excel_multisheet, get_vladivostok_filename

logger = get_logger(__name__)

# /tracking ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–ª–µ–∂–µ–Ω–∏–µ –≤ Excel
async def tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id if user is not None else None
    logger.info(f"[tracking] –ó–∞–ø—Ä–æ—Å –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id != ADMIN_CHAT_ID:
        logger.warning(f"[tracking] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        if update.message:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        elif update.effective_chat:
            await update.effective_chat.send_message("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        with SessionLocal() as session:
            result = session.execute(text("SELECT * FROM tracking_subscriptions"))
            subs = result.fetchall()
            if not subs:
                logger.info("[tracking] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–µ–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.")
                if update.message:
                    await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–µ–∂–µ–Ω–∏–π.")
                elif update.effective_chat:
                    await update.effective_chat.send_message("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–µ–∂–µ–Ω–∏–π.")
                return

            columns = result.keys()
            data = [dict(zip(columns, row)) for row in subs]
            df = pd.DataFrame(data)
            file_path = create_excel_file(df.values.tolist(), list(df.columns))
            filename = get_vladivostok_filename().replace("–î–∏—Å–ª–æ–∫–∞—Ü–∏—è", "tracking_subs")
            with open(file_path, "rb") as f:
                if update.message:
                    await update.message.reply_document(document=f, filename=filename)
                elif update.effective_chat:
                    await update.effective_chat.send_document(document=f, filename=filename)
            logger.info(f"[tracking] –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logger.error(f"[tracking] –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}", exc_info=True)
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–¥–ø–∏—Å–æ–∫.")
        elif update.effective_chat:
            await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–¥–ø–∏—Å–æ–∫.")

# /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id if user is not None else None
    logger.info(f"[stats] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å—É—Ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id != ADMIN_CHAT_ID:
        logger.warning(f"[stats] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        if update.message:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        elif update.effective_chat:
            await update.effective_chat.send_message("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        with SessionLocal() as session:
            query = text("""
                SELECT user_id, COALESCE(username, '‚Äî') AS username, COUNT(*) AS –∑–∞–ø—Ä–æ—Å–æ–≤,
                    STRING_AGG(DISTINCT container_number, ', ') AS –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                FROM stats
                WHERE timestamp >= NOW() - INTERVAL '1 day'
                    AND user_id != :admin_id
                GROUP BY user_id, username
                ORDER BY –∑–∞–ø—Ä–æ—Å–æ–≤ DESC
            """)
            result = session.execute(query, {'admin_id': ADMIN_CHAT_ID})
            rows = result.fetchall()

        if not rows:
            logger.info("[stats] –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.")
            if update.message:
                await update.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.")
            elif update.effective_chat:
                await update.effective_chat.send_message("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.")
            return

        text_msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n\n"
        messages = []
        for row in rows:
            entry = (
                f"üë§ {row.username} (ID: {row.user_id})\n"
                f"–ó–∞–ø—Ä–æ—Å–æ–≤: {row.–∑–∞–ø—Ä–æ—Å–æ–≤}\n"
                f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {row.–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã}\n\n"
            )
            if len(text_msg) + len(entry) > 4000:
                messages.append(text_msg)
                text_msg = ""
            text_msg += entry
        messages.append(text_msg)
        for msg in messages:
            if update.message:
                await update.message.reply_text(msg)
            elif update.effective_chat:
                await update.effective_chat.send_message(msg)
        logger.info("[stats] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logger.error(f"[stats] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        elif update.effective_chat:
            await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# /exportstats ‚Äî Excel –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id if user is not None else None
    logger.info(f"[exportstats] –ó–∞–ø—Ä–æ—Å Excel-–≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id != ADMIN_CHAT_ID:
        logger.warning(f"[exportstats] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        if update.message:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        elif update.effective_chat:
            await update.effective_chat.send_message("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        with SessionLocal() as session:
            query = text("SELECT * FROM stats WHERE user_id != :admin_id")
            result = session.execute(query, {'admin_id': ADMIN_CHAT_ID})
            rows = result.fetchall()

        if not rows:
            logger.info("[exportstats] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            if update.message:
                await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            elif update.effective_chat:
                await update.effective_chat.send_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return

        columns = list(result.keys())
        df = pd.DataFrame(rows, columns=columns)
        file_path = create_excel_file(df.values.tolist(), list(df.columns))
        filename = get_vladivostok_filename().replace("–î–∏—Å–ª–æ–∫–∞—Ü–∏—è", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        with open(file_path, "rb") as f:
            if update.message:
                await update.message.reply_document(document=f, filename=filename)
            elif update.effective_chat:
                await update.effective_chat.send_document(document=f, filename=filename)
        logger.info(f"[exportstats] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ Excel —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logger.error(f"[exportstats] –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        elif update.effective_chat:
            await update.effective_chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# /testnotify ‚Äî –æ–¥–∏–Ω Excel, –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–¥–µ–ª—å–Ω—ã–º –ª–∏—Å—Ç–æ–º
async def test_notify(update, context):
    user = update.effective_user
    user_id = user.id if user is not None else None
    logger.info(f"[test_notify] –ó–∞–ø—Ä–æ—Å —Ç–µ—Å—Ç–æ–≤–æ–π –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id != ADMIN_CHAT_ID:
        logger.warning(f"[test_notify] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        with SessionLocal() as session:
            result = session.execute(select(TrackingSubscription))
            subscriptions = result.scalars().all()

            columns = [
                '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
                '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
                '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
                '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
            ]
            data_per_user = {}

            for sub in subscriptions:
                user_label = f"{sub.username or sub.user_id} (id:{sub.user_id})"
                rows = []
                for container in sub.containers:
                    res = session.execute(
                        select(Tracking).filter(Tracking.container_number == container).order_by(Tracking.operation_date.desc())
                    )
                    track = res.scalars().first()
                    if track:
                        rows.append([
                            track.container_number,
                            track.from_station,
                            track.to_station,
                            track.current_station,
                            track.operation,
                            track.operation_date,
                            track.waybill,
                            track.km_left,
                            track.forecast_days,
                            track.wagon_number,
                            track.operation_road
                        ])
                data_per_user[user_label] = rows if rows else [["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"] + [""] * (len(columns)-1)]

            file_path = create_excel_multisheet(data_per_user, columns)
            filename = get_vladivostok_filename("–¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏—è")
            with open(file_path, "rb") as f:
                await update.message.reply_document(
                    document=f,
                    filename=filename,
                    caption="–¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (—Ä–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ –ª–∏—Å—Ç–∞–º)"
                )
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º.")
            logger.info("[test_notify] –¢–µ—Å—Ç–æ–≤–∞—è –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"[test_notify] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ.")