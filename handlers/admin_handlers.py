# handlers/admin_handlers.py
import pandas as pd
from datetime import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown
import os
from pathlib import Path

from config import ADMIN_CHAT_ID
from logger import get_logger
from utils.send_tracking import create_excel_file, create_excel_multisheet, get_vladivostok_filename
from utils.email_sender import send_email
from queries.admin_queries import (
    get_all_stats_for_export, get_all_tracking_subscriptions, get_daily_stats,
    get_data_for_test_notification, get_admin_user_for_email
)
from services.notification_service import NotificationService
# ‚úÖ –ù–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
from services.train_importer import import_train_from_excel, extract_train_code_from_filename
from services.dislocation_importer import process_dislocation_file, DOWNLOAD_FOLDER as DISLOCATION_DOWNLOAD_FOLDER

logger = get_logger(__name__)

# --- –ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: –†–£–ß–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í ---

async def upload_file_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤."""
    if not await admin_only_handler(update, context):
        return
    
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:\n\n"
        "üìÑ **–§–∞–π–ª –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏**: –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –±–æ—Ç –æ–±–Ω–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –≤ –Ω–µ–º.\n\n"
        "üöÜ **–§–∞–π–ª –ø–æ–µ–∑–¥–∞**: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ö25-073` (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–ü –ö25-073 –°–µ–ª—è—Ç–∏–Ω–æ.xlsx'). –ë–æ—Ç –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ –≤—Å–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –∏–∑ —Ñ–∞–π–ª–∞.",
        parse_mode="Markdown"
    )

async def handle_admin_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Excel-—Ñ–∞–π–ª–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not await admin_only_handler(update, context) or not update.message or not update.message.document:
        return

    doc = update.message.document
    filename = (doc.file_name or "unknown.xlsx").strip()
    
    if not filename.lower().endswith(".xlsx"):
        await update.message.reply_text("‚õî –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, Excel-—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(DISLOCATION_DOWNLOAD_FOLDER, exist_ok=True)
    dest_path = Path(DISLOCATION_DOWNLOAD_FOLDER) / filename
    
    file = await context.bot.get_file(doc.file_id)
    await file.download_to_drive(custom_path=str(dest_path))
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç –∞–¥–º–∏–Ω–∞: {dest_path}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    try:
        if extract_train_code_from_filename(filename):
            # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –ø–æ–µ–∑–¥–∞ ---
            logger.info(f"–§–∞–π–ª '{filename}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Ñ–∞–π–ª –ø–æ–µ–∑–¥–∞. –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–µ–∑–¥–∞...")
            updated, total, train_code = await import_train_from_excel(str(dest_path))
            text = (
                f"‚úÖ –ü–æ–µ–∑–¥ <b>{train_code}</b> –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: <b>{updated}</b> –∏–∑ <b>{total}</b> –≤ —Ñ–∞–π–ª–µ."
            )
            await update.message.reply_html(text)
        else:
            # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ ---
            logger.info(f"–§–∞–π–ª '{filename}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Ñ–∞–π–ª –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏. –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã...")
            processed_count = await process_dislocation_file(str(dest_path))
            text = (
                f"‚úÖ –ë–∞–∑–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞.\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: <b>{processed_count}</b>."
            )
            await update.message.reply_html(text)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{filename}'")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")


# --- –°–¢–ê–†–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not await admin_only_handler(update, context): return
    keyboard = [[InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏", callback_data="admin_stats")], [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_exportstats")], [InlineKeyboardButton("üìÇ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="admin_tracking")], [InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")], [InlineKeyboardButton("‚ö°Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="admin_testnotify")],]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message: await update.message.reply_text("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)
    elif update.callback_query: await update.callback_query.edit_message_text("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)

async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    query = update.callback_query
    if not query: return
    await query.answer()
    action = query.data
    if action == "admin_stats": await stats(update, context)
    elif action == "admin_exportstats": await exportstats(update, context)
    elif action == "admin_tracking": await tracking(update, context)
    elif action == "admin_testnotify": await test_notify(update, context)

async def admin_only_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    user = update.effective_user
    if not user: logger.warning("–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user."); return False
    if user.id != ADMIN_CHAT_ID:
        if update.effective_chat: await context.bot.send_message(update.effective_chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.warning(f"–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}"); return False
    return True

async def tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    logger.info("[tracking] –ó–∞–ø—Ä–æ—Å –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    try:
        subs, columns = await get_all_tracking_subscriptions()
        if not subs or not columns: await chat.send_message("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–µ–∂–µ–Ω–∏–π."); return
        df = pd.DataFrame([list(row) for row in subs], columns=columns)
        file_path = create_excel_file(df.values.tolist(), df.columns.tolist())
        filename = get_vladivostok_filename("–ü–æ–¥–ø–∏—Å–∫–∏_–Ω–∞_—Ç—Ä–µ–∫–∏–Ω–≥")
        with open(file_path, "rb") as f: await chat.send_document(document=f, filename=filename)
        logger.info("[tracking] –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"[tracking] –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}", exc_info=True)
        if chat: await chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–¥–ø–∏—Å–æ–∫.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    logger.info("[stats] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å—É—Ç–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    try:
        rows = await get_daily_stats()
        if not rows: await chat.send_message("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏."); return
        TELEGRAM_MAX_LENGTH = 4000
        header = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:*\n"
        current_message = header
        for row in rows:
            safe_username = escape_markdown(str(row.username), version=2)
            safe_containers = escape_markdown(str(row.containers), version=2)
            entry = (f"üë§ *{safe_username}* \\(ID: `{row.user_id}`\\)\n–ó–∞–ø—Ä–æ—Å–æ–≤: *{row.request_count}*\n–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: `{safe_containers}`\n\n")
            if len(current_message) + len(entry) > TELEGRAM_MAX_LENGTH:
                await chat.send_message(current_message, parse_mode='MarkdownV2'); current_message = header + entry
            else: current_message += entry
        if current_message != header: await chat.send_message(current_message, parse_mode='MarkdownV2')
        logger.info("[stats] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"[stats] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        if chat: await chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    logger.info("[exportstats] –ó–∞–ø—Ä–æ—Å Excel-–≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    try:
        rows, columns = await get_all_stats_for_export()
        if not rows or not columns: await chat.send_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."); return
        df = pd.DataFrame([list(row) for row in rows], columns=columns)
        file_path = create_excel_file(df.values.tolist(), df.columns.tolist())
        filename = get_vladivostok_filename("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∑–∞–ø—Ä–æ—Å–æ–≤")
        with open(file_path, "rb") as f: await chat.send_document(document=f, filename=filename)
    except Exception as e:
        logger.error(f"[exportstats] –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        if chat: await chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def test_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    logger.info("[test_notify] –ó–∞–ø—Ä–æ—Å —Ç–µ—Å—Ç–æ–≤–æ–π –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    try:
        data_per_user = await get_data_for_test_notification()
        columns = ['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)', '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏']
        file_path = create_excel_multisheet(data_per_user, columns)
        filename = get_vladivostok_filename("–¢–µ—Å—Ç–æ–≤–∞—è_–¥–∏—Å–ª–æ–∫–∞—Ü–∏—è")
        with open(file_path, "rb") as f: await chat.send_document(document=f, filename=filename)
        await chat.send_message("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π Excel-–æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤.")
        admin_user = await get_admin_user_for_email(ADMIN_CHAT_ID)
        if admin_user and admin_user.emails:
            first_email = admin_user.emails[0].email
            await send_email(to=first_email, attachments=[file_path])
            logger.info(f"üìß –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {first_email}")
            await chat.send_message(f"üìß –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ `{first_email}`", parse_mode='Markdown')
        else:
            logger.warning(f"–£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {ADMIN_CHAT_ID} –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö email –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            await chat.send_message("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö email –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    except Exception as e:
        logger.error(f"[test_notify] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        if chat: await chat.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ.")

async def force_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    if not context.args: await chat.send_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: /force_notify 09:00"); return
    time_str = context.args[0]
    try: hour, minute = map(int, time_str.split(':')); target_time = time(hour=hour, minute=minute)
    except ValueError: await chat.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä: /force_notify 09:00"); return
    await chat.send_message(f"üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {time_str}...")
    service = NotificationService(context.bot)
    try:
        await service.send_scheduled_notifications(target_time)
        await chat.send_message(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {time_str} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        logger.info(f"[force_notify] –ê–¥–º–∏–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª –∏ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {time_str}")
    except Exception as e:
        logger.error(f"[force_notify] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}", exc_info=True)
        await chat.send_message(f"‚ùå –í–æ –≤—Ä–µ–º—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–º. –ª–æ–≥–∏.")