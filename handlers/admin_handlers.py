import pandas as pd
from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_CHAT_ID
from datetime import datetime, timedelta, time
from sqlalchemy import text
from sqlalchemy.future import select
from db import SessionLocal
from models import TrackingSubscription, Tracking, User
from logger import get_logger

from utils.send_tracking import create_excel_file, create_excel_multisheet, get_vladivostok_filename
from utils.email_sender import send_email

import asyncio
from telegram.error import TimedOut, NetworkError

logger = get_logger(__name__)


async def tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id if user is not None else None
    logger.info(f"[tracking] –ó–∞–ø—Ä–æ—Å –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id != ADMIN_CHAT_ID:
        logger.warning(f"[tracking] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        async with SessionLocal() as session:
            result = await session.execute(text("SELECT * FROM tracking_subscriptions"))
            subs = result.fetchall()
            if not subs:
                await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–µ–∂–µ–Ω–∏–π.")
                return

            columns = result.keys()
            data = [dict(zip(columns, row)) for row in subs]
            df = pd.DataFrame(data)
            file_path = create_excel_file(df.values.tolist(), list(df.columns))
            filename = get_vladivostok_filename().replace("–î–∏—Å–ª–æ–∫–∞—Ü–∏—è", "tracking_subs")
            attempts = 3
            for i in range(attempts):
                try:
                    with open(file_path, "rb") as f:
                        await update.message.reply_document(
                            document=f,
                            filename=filename,
                            read_timeout=90.0,
                            write_timeout=90.0,
                        )
                    logger.info(f"[tracking] –í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    break
                except (TimedOut, NetworkError) as e:
                    logger.warning(f"[tracking] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω—É (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{attempts}): {e}")
                    if i == attempts - 1:
                        raise
                    await asyncio.sleep(2 ** i)
    except Exception as e:
        logger.error(f"[tracking] –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–¥–ø–∏—Å–æ–∫.")


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id if user is not None else None
    logger.info(f"[stats] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å—É—Ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id != ADMIN_CHAT_ID:
        logger.warning(f"[stats] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        async with SessionLocal() as session:
            query = text("""
                SELECT user_id, COALESCE(username, '‚Äî') AS username, COUNT(*) AS –∑–∞–ø—Ä–æ—Å–æ–≤,
                    STRING_AGG(DISTINCT container_number, ', ') AS –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                FROM stats
                WHERE timestamp >= NOW() - INTERVAL '1 day'
                    AND user_id != :admin_id
                GROUP BY user_id, username
                ORDER BY –∑–∞–ø—Ä–æ—Å–æ–≤ DESC
            """)
            result = await session.execute(query, {'admin_id': ADMIN_CHAT_ID})
            rows = result.fetchall()

        if not rows:
            await update.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.")
            return

        text_msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n\n"
        messages = []
        for row in rows:
            entry = (
                f"üë§ {row.username} (ID: {row.user_id})\n"
                f"–ó–∞–ø—Ä–æ—Å–æ–≤: {row.–∑–∞–ø—Ä–æ—Å–æ–≤}\n"
                f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {row.–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã}\n\n"
            )
            if len(text_msg) + len(entry) > 4000:
                messages.append(text_msg)
                text_msg = ""
            text_msg += entry
        messages.append(text_msg)
        for msg in messages:
            await update.message.reply_text(msg)
        logger.info("[stats] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception as e:
        logger.error(f"[stats] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id if user is not None else None
    logger.info(f"[exportstats] –ó–∞–ø—Ä–æ—Å Excel-–≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id != ADMIN_CHAT_ID:
        logger.warning(f"[exportstats] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        async with SessionLocal() as session:
            query = text("SELECT * FROM stats WHERE user_id != :admin_id")
            result = await session.execute(query, {'admin_id': ADMIN_CHAT_ID})
            rows = result.fetchall()

        if not rows:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return

        columns = list(result.keys())
        df = pd.DataFrame(rows, columns=columns)
        file_path = create_excel_file(df.values.tolist(), list(df.columns))
        filename = get_vladivostok_filename().replace("–î–∏—Å–ª–æ–∫–∞—Ü–∏—è", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        attempts = 3
        for i in range(attempts):
            try:
                with open(file_path, "rb") as f:
                    await update.message.reply_document(
                        document=f,
                        filename=filename,
                        read_timeout=90.0,
                        write_timeout=90.0,
                    )
                logger.info(f"[exportstats] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ Excel —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                break
            except (TimedOut, NetworkError) as e:
                logger.warning(f"[exportstats] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω—É (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{attempts}): {e}")
                if i == attempts - 1:
                    raise
                await asyncio.sleep(2 ** i)
    except Exception as e:
        logger.error(f"[exportstats] –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def test_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id if user is not None else None
    logger.info(f"[test_notify] –ó–∞–ø—Ä–æ—Å —Ç–µ—Å—Ç–æ–≤–æ–π –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id != ADMIN_CHAT_ID:
        logger.warning(f"[test_notify] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        async with SessionLocal() as session:
            result = await session.execute(select(TrackingSubscription))
            subscriptions = result.scalars().all()

            columns = [
                '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
                '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
                '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
                '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
            ]
            data_per_user = {}

            for sub in subscriptions:
                user_label = f"{sub.username or sub.user_id} (id:{sub.user_id})"
                rows = []
                for container in sub.containers:
                    res = await session.execute(
                        select(Tracking).filter(Tracking.container_number == container).order_by(Tracking.operation_date.desc())
                    )
                    track = res.scalars().first()
                    if track:
                        rows.append([
                            track.container_number,
                            track.from_station,
                            track.to_station,
                            track.current_station,
                            track.operation,
                            track.operation_date,
                            track.waybill,
                            track.km_left,
                            track.forecast_days,
                            track.wagon_number,
                            track.operation_road
                        ])
                data_per_user[user_label] = rows if rows else [["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"] + [""] * (len(columns)-1)]

            file_path = create_excel_multisheet(data_per_user, columns)
            filename = get_vladivostok_filename("–¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏—è")

            attempts = 3
            for i in range(attempts):
                try:
                    with open(file_path, "rb") as f:
                        await update.message.reply_document(
                            document=f,
                            filename=filename,
                            caption="–¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (—Ä–∞–∑–¥–µ–ª–µ–Ω–æ –ø–æ –ª–∏—Å—Ç–∞–º)",
                            read_timeout=90.0,
                            write_timeout=90.0,
                        )
                    break
                except (TimedOut, NetworkError) as e:
                    logger.warning(f"[test_notify] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{attempts}): {e}")
                    if i == attempts - 1:
                        raise
                    await asyncio.sleep(2 ** i)

            await update.message.reply_text(
                "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º.",
                read_timeout=30.0,
                write_timeout=30.0,
            )
            logger.info("[test_notify] –¢–µ—Å—Ç–æ–≤–∞—è –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

            # --- Email —Ä–∞—Å—Å—ã–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ---
            user_result = await session.execute(
                select(User).where(User.telegram_id == user_id, User.email_enabled == True)
            )
            admin_user = user_result.scalar_one_or_none()

            if admin_user and admin_user.email:
                try:
                    await send_email(
                        to=admin_user.email,
                        subject="–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ‚Äî Excel-—Ñ–∞–π–ª —Å –¥–∏—Å–ª–æ–∫–∞—Ü–∏–µ–π",
                        body="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è email-—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç Telegram-–±–æ—Ç–∞. –í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ ‚Äî —Ñ–∞–π–ª —Å –º—É–ª—å—Ç–∏–ª–∏—Å—Ç–æ–º –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.",
                        attachments=[file_path]
                    )
                    logger.info(f"üìß –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {admin_user.email}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email: {e}", exc_info=True)
            else:
                logger.warning(f"üì≠ Email –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.")

    except Exception as e:
        logger.error(f"[test_notify] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –º—É–ª—å—Ç–∏-—Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ.",
            read_timeout=30.0,
            write_timeout=30.0,
        )