import pandas as pd
from telegram import Update
from telegram.ext import ContextTypes
from config import ADMIN_CHAT_ID
from datetime import datetime, timedelta, time
from sqlalchemy import text
from db import SessionLocal
from models import TrackingSubscription
from scheduler import send_notifications

# –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel
from utils.send_tracking import create_excel_file, get_vladivostok_filename

# /tracking ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–ª–µ–∂–µ–Ω–∏–µ –≤ Excel
async def tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    async with SessionLocal() as session:
        result = await session.execute(text("SELECT * FROM tracking_subscriptions"))
        subs = result.fetchall()
        if not subs:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–µ–∂–µ–Ω–∏–π.")
            return

        columns = result.keys()
        data = [dict(zip(columns, row)) for row in subs]
        df = pd.DataFrame(data)
        file_path = create_excel_file(df.values.tolist())  # —Ç—É—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å create_excel_file –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        filename = get_vladivostok_filename().replace("–î–∏—Å–ª–æ–∫–∞—Ü–∏—è", "tracking_subs")
        await update.message.reply_document(document=open(file_path, "rb"), filename=filename)

# /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    async with SessionLocal() as session:
        query = text("""
            SELECT user_id, COALESCE(username, '‚Äî') AS username, COUNT(*) AS –∑–∞–ø—Ä–æ—Å–æ–≤,
                   STRING_AGG(DISTINCT container_number, ', ') AS –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            FROM stats
            WHERE timestamp >= NOW() - INTERVAL '1 day'
              AND user_id != :admin_id
            GROUP BY user_id, username
            ORDER BY –∑–∞–ø—Ä–æ—Å–æ–≤ DESC
        """)
        result = await session.execute(query, {'admin_id': ADMIN_CHAT_ID})
        rows = result.fetchall()

    if not rows:
        await update.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.")
        return

    text_msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n\n"
    messages = []
    for row in rows:
        entry = (
            f"üë§ {row.username} (ID: {row.user_id})\n"
            f"–ó–∞–ø—Ä–æ—Å–æ–≤: {row.–∑–∞–ø—Ä–æ—Å–æ–≤}\n"
            f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {row.–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã}\n\n"
        )
        if len(text_msg) + len(entry) > 4000:
            messages.append(text_msg)
            text_msg = ""
        text_msg += entry
    messages.append(text_msg)
    for msg in messages:
        await update.message.reply_text(msg)

# /exportstats ‚Äî Excel –≤—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞)
async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    async with SessionLocal() as session:
        query = text("SELECT * FROM stats WHERE user_id != :admin_id")
        result = await session.execute(query, {'admin_id': ADMIN_CHAT_ID})
        rows = result.fetchall()

    if not rows:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    columns = result.keys()
    df = pd.DataFrame(rows, columns=columns)
    file_path = create_excel_file(df.values.tolist(), columns=list(df.columns))  # —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    filename = get_vladivostok_filename().replace("–î–∏—Å–ª–æ–∫–∞—Ü–∏—è", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    await update.message.reply_document(document=open(file_path, "rb"), filename=filename)

# /testnotify ‚Äî —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω—É
async def test_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await send_notifications(context.bot, time(9, 0))
    await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
