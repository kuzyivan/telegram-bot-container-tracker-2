# handlers/admin_handlers.py
import pandas as pd
from datetime import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
from telegram.helpers import escape_markdown
import os
from pathlib import Path

from config import ADMIN_CHAT_ID
from logger import get_logger
from utils.send_tracking import create_excel_file, create_excel_multisheet, get_vladivostok_filename
from utils.email_sender import send_email
from queries.admin_queries import (
    get_all_stats_for_export, get_all_tracking_subscriptions, get_daily_stats,
    get_data_for_test_notification, get_admin_user_for_email
)
from services.notification_service import NotificationService
from services.train_importer import import_train_from_excel, extract_train_code_from_filename
from services.dislocation_importer import process_dislocation_file, DOWNLOAD_FOLDER as DISLOCATION_DOWNLOAD_FOLDER

logger = get_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ /force_notify
AWAIT_FORCE_NOTIFY_TIME = range(1)

# --- –§—É–Ω–∫—Ü–∏–∏-–ø—Ä–æ–≤–µ—Ä–∫–∏ ---

def is_dislocation_file(filename: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞ '103_'."""
    return os.path.basename(filename).strip().startswith("103_")

async def admin_only_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."""
    user = update.effective_user
    if not user:
        logger.warning("–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user.")
        return False
    if user.id != ADMIN_CHAT_ID:
        if update.effective_chat:
            await context.bot.send_message(update.effective_chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        logger.warning(f"–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        return False
    return True

# --- –†—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ---

async def upload_file_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤."""
    if not await admin_only_handler(update, context):
        return
    
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:\n\n"
        "üìÑ **–§–∞–π–ª –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏**: –ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `103_`.\n\n"
        "üöÜ **–§–∞–π–ª –ø–æ–µ–∑–¥–∞**: –ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–º–µ—Ä –≤–∏–¥–∞ `–ö25-073`.",
        parse_mode="Markdown"
    )

async def handle_admin_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Excel-—Ñ–∞–π–ª–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ —Å—Ç—Ä–æ–≥–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    if not await admin_only_handler(update, context) or not update.message or not update.message.document:
        return

    doc = update.message.document
    filename = (doc.file_name or "unknown.xlsx").strip()
    
    if not filename.lower().endswith(".xlsx"):
        await update.message.reply_text("‚õî –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, Excel-—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return

    os.makedirs(DISLOCATION_DOWNLOAD_FOLDER, exist_ok=True)
    dest_path = Path(DISLOCATION_DOWNLOAD_FOLDER) / filename
    
    file = await context.bot.get_file(doc.file_id)
    await file.download_to_drive(custom_path=str(dest_path))
    logger.info(f"üì• [Admin Upload] –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç –∞–¥–º–∏–Ω–∞: {filename}. –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {dest_path}")

    try:
        # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ø–æ–µ–∑–¥"
        logger.info(f"[Admin Upload] –ü—Ä–æ–≤–µ—Ä—è—é '{filename}' –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª—É –ø–æ–µ–∑–¥–∞...")
        if extract_train_code_from_filename(filename):
            logger.info(f"[Admin Upload] ‚úÖ –£—Å–ø–µ—Ö. –§–∞–π–ª '{filename}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Ñ–∞–π–ª –ø–æ–µ–∑–¥–∞.")
            updated, total, train_code = await import_train_from_excel(str(dest_path))
            text = (f"‚úÖ –ü–æ–µ–∑–¥ <b>{train_code}</b> –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n"
                    f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: <b>{updated}</b> –∏–∑ <b>{total}</b> –≤ —Ñ–∞–π–ª–µ.")
            await update.message.reply_html(text)

        # –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–¥–∏—Å–ª–æ–∫–∞—Ü–∏—é"
        elif is_dislocation_file(filename):
            logger.info(f"[Admin Upload] ‚úÖ –£—Å–ø–µ—Ö. –§–∞–π–ª '{filename}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Ñ–∞–π–ª –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏.")
            processed_count = await process_dislocation_file(str(dest_path))
            text = (f"‚úÖ –ë–∞–∑–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞.\n"
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: <b>{processed_count}</b>.")
            await update.message.reply_html(text)

        # –≠—Ç–∞–ø 3: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        else:
            logger.warning(f"[Admin Upload] ‚ùóÔ∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–æ. –§–∞–π–ª '{filename}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É –ø—Ä–∞–≤–∏–ª—É.")
            await update.message.reply_markdown_v2(
                "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞*\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞:\n"
                "‚Ä¢ –î–ª—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å `103_`\n"
                "‚Ä¢ –î–ª—è –ø–æ–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–æ–º–µ—Ä `–ö25\\-073`"
            )
            
    except Exception as e:
        logger.exception(f"[Admin Upload] üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{filename}'")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only_handler(update, context): return
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏", callback_data="admin_stats")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export_menu")],
        [InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚ö°Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="admin_testnotify")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message: await update.message.reply_text("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)
    elif update.callback_query: await update.callback_query.edit_message_text("‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)

async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data: return
    await query.answer()
    action = query.data
    if action == "admin_stats": await stats(update, context)
    elif action == "admin_export_menu": await export_menu(update, context) # –î–æ–±–∞–≤–∏–º –ø–æ–¥–º–µ–Ω—é
    elif action == "admin_testnotify": await test_notify(update, context)
    elif action == "admin_exportstats": await exportstats(update, context)
    elif action == "admin_tracking": await tracking(update, context)

# --- –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ---

async def export_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    query = update.callback_query
    if not query: return
    keyboard = [
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_exportstats")],
        [InlineKeyboardButton("üìÇ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="admin_tracking")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel_main")]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))


async def tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        subs, columns = await get_all_tracking_subscriptions()
        # ...
    except Exception as e:
        # ...
        pass


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        rows = await get_daily_stats()
        # ...
    except Exception as e:
        # ...
        pass


async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        rows, columns = await get_all_stats_for_export()
        # ...
    except Exception as e:
        # ...
        pass

# --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---

async def test_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        data_per_user = await get_data_for_test_notification()
        # ...
    except Exception as e:
        # ...
        pass


async def force_notify_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat = update.effective_chat
    if not chat or not await admin_only_handler(update, context): return ConversationHandler.END
    if context.args:
        return await _process_force_notify(update, context, context.args[0])
    await chat.send_message("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00) –∏–ª–∏ /cancel.")
    return AWAIT_FORCE_NOTIFY_TIME


async def force_notify_receive_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not update.message or not update.message.text: return ConversationHandler.END
    return await _process_force_notify(update, context, update.message.text.strip())


async def _process_force_notify(update: Update, context: ContextTypes.DEFAULT_TYPE, time_str: str):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    chat = update.effective_chat
    if not chat: return ConversationHandler.END
    try:
        # ...
        await service.send_scheduled_notifications(target_time)
        # ...
    except Exception as e:
        # ...
        pass
    return ConversationHandler.END


async def force_notify_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if update.message: await update.message.reply_text("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

force_notify_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("force_notify", force_notify_start)],
    states={
        AWAIT_FORCE_NOTIFY_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, force_notify_receive_time)],
    },
    fallbacks=[CommandHandler("cancel", force_notify_cancel)],
)