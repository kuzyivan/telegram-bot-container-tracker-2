import tempfile
import pandas as pd
from openpyxl.styles import PatternFill
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import re
from models import Tracking, Stats
from db import SessionLocal
from sqlalchemy.future import select
from utils.keyboards import main_menu_keyboard  # –¥–æ–±–∞–≤–ª–µ–Ω–æ

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard
        )
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker_id = "CAACAgIAAxkBAAIC6mgUWmOtztmC0dnqI3C2l4wcikA-AAJvbAACa_OZSGYOhHaiIb7mNgQ"
    await update.message.reply_sticker(sticker_id)
    await show_menu(update, context)

async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if data == 'start':
        await query.answer()
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard
        )
    elif data == 'dislocation':
        await query.answer()
        await query.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏."
        )
        # –î–∞–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç handle_message
    elif data == 'track_request':
        from handlers.tracking_handlers import ask_containers
        return await ask_containers(update, context)

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker = update.message.sticker
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker.file_id}`", parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        await update.message.reply_text("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
        return

    user_input = update.message.text
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,\n.]+' , user_input.strip()) if c]
    found_rows = []
    not_found = []

    async with SessionLocal() as session:
        for container_number in container_numbers:
            result = await session.execute(
                select(
                    Tracking.container_number,
                    Tracking.from_station,
                    Tracking.to_station,
                    Tracking.current_station,
                    Tracking.operation,
                    Tracking.operation_date,
                    Tracking.waybill,
                    Tracking.km_left,
                    Tracking.forecast_days,
                    Tracking.wagon_number,
                    Tracking.operation_road
                ).where(
                    Tracking.container_number == container_number
                ).order_by(
                    Tracking.operation_date.desc()
                )
            )
            results = result.fetchall()

            stats_record = Stats(
                container_number=container_number,
                user_id=update.message.from_user.id,
                username=update.message.from_user.username
            )
            session.add(stats_record)
            await session.commit()

            if not results:
                not_found.append(container_number)
                continue

            row = results[0]
            found_rows.append(list(row))

    # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ‚Äî Excel —Ñ–∞–π–ª
    if len(container_numbers) > 1 and found_rows:
        from utils.send_tracking import create_excel_file, get_vladivostok_filename

        if len(container_numbers) > 1 and found_rows:
            file_path = create_excel_file(found_rows)
            filename = get_vladivostok_filename()
            await update.message.reply_document(document=open(file_path, "rb"), filename=filename)

        if not_found:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
        return

    # –û–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Äî –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
    elif found_rows:
        row = found_rows[0]
        wagon_number = str(row[9]) if row[9] else "‚Äî"
        wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if wagon_number.startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"

        try:
            km_left = float(row[7])
            forecast_days_calc = round(km_left / 600 + 1, 1)
        except Exception:
            km_left = "‚Äî"
            forecast_days_calc = "‚Äî"

        operation_station = f"{row[3]} üõ§Ô∏è ({row[10]})" if row[10] else row[3]

        msg = (
            f"üì¶ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</b>: <code>{row[0]}</code>\n\n"
            f"üõ§ <b>–ú–∞—Ä—à—Ä—É—Ç</b>:\n"
            f"<b>{row[1]}</b> üöÇ ‚Üí <b>{row[2]}</b>\n\n"
            f"üìç <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è</b>: {operation_station}\n"
            f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è</b>:\n"
            f"{row[5]} ‚Äî <i>{row[4]}</i>\n\n"
            f"üöÜ <b>–í–∞–≥–æ–Ω</b>: <code>{wagon_number}</code> ({wagon_type})\n"
            f"üìè <b>–û—Å—Ç–∞–ª–æ—Å—å –µ—Ö–∞—Ç—å</b>: <b>{km_left}</b> –∫–º\n\n"
            f"‚è≥ <b>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏</b>:\n"
            f"~<b>{forecast_days_calc}</b> —Å—É—Ç–æ–∫ "
            f"(—Ä–∞—Å—á–µ—Ç: {km_left} –∫–º / 600 –∫–º/—Å—É—Ç–∫–∏ + 1 –¥–µ–Ω—å)"
        )

        await update.message.reply_text(msg, parse_mode="HTML")
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.")
