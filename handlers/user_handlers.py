from telegram import Update
from telegram.ext import ContextTypes
import re
from db.models import Tracking, Stats, SessionLocal

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        await update.message.reply_text("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
        return

    user_input = update.message.text
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,\n.]+' , user_input.strip()) if c]

    with SessionLocal() as session:
        for container_number in container_numbers:
            results = session.query(
                Tracking.container_number,
                Tracking.current_station,
                Tracking.operation_date,
                Tracking.operation,
                Tracking.wagon_number,
                Tracking.from_station,
                Tracking.to_station,
                Tracking.km_left,
                Tracking.forecast_days
            ).filter(
                Tracking.container_number == container_number
            ).order_by(
                Tracking.operation_date.desc()
            ).all()

            # –ó–∞–ø–∏—Å—å –≤ stats
            stats_record = Stats(
                container_number=container_number,
                user_id=update.message.from_user.id,
                username=update.message.from_user.username
            )
            session.add(stats_record)
            session.commit()

            if not results:
                await update.message.reply_text(f"ü§∑ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue

            # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é
            row = results[0]

            # –¢–∏–ø –≤–∞–≥–æ–Ω–∞
            wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if row.wagon_number and str(row.wagon_number).startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"

            # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Å—Ç–∞–ª–æ—Å—å –∫–º / 600 + 1)
            try:
                km_left = float(row.km_left)
                forecast_days_calc = round(km_left / 600 + 1, 1)
            except Exception:
                km_left = "‚Äî"
                forecast_days_calc = "‚Äî"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
            msg = (
                f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row.container_number}\n\n"
                f"–ú–∞—Ä—à—Ä—É—Ç:\n{row.from_station} ‚Üí {row.to_station}\n\n"
                f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è: {row.current_station}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è:\n"
                f"{row.operation_date} ‚Äî {row.operation}\n\n"
                f"–í–∞–≥–æ–Ω: {row.wagon_number} ({wagon_type})\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –µ—Ö–∞—Ç—å: {row.km_left} –∫–º\n\n"
                f"–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏:\n~{forecast_days_calc} —Å—É—Ç–æ–∫ "
                f"(—Ä–∞—Å—á–µ—Ç: {row.km_left} –∫–º / 600 –∫–º/—Å—É—Ç–∫–∏ + 1 –¥–µ–Ω—å)"
            )

            await update.message.reply_text(msg)

