from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler

from db import (
    remove_user_tracking,
    get_tracked_containers_by_user,
    set_user_email,
)

import logging

logger = logging.getLogger(__name__)

# --- EMAIL ConversationHandler ---
SET_EMAIL = range(1)

async def set_email_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: user@example.com\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    return SET_EMAIL

async def process_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = update.message.text.strip()
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (—Ä–∞—Å—à–∏—Ä—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    if "@" not in email or "." not in email:
        await update.message.reply_text("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç e-mail. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")
        return SET_EMAIL
    await set_user_email(
        telegram_id=update.message.from_user.id,
        username=update.message.from_user.username,
        email=email
    )
    await update.message.reply_text(f"–í–∞—à e-mail {email} —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á—ë—Ç—ã –Ω–∞ –ø–æ—á—Ç—É.")
    logger.info(f"User {update.message.from_user.id} —É–∫–∞–∑–∞–ª e-mail: {email}")
    return ConversationHandler.END

async def cancel_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–æ–¥ e-mail –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- –û–°–¢–ê–õ–¨–ù–´–ï –•–ï–ù–î–õ–ï–†–´ –ò–ó –¢–í–û–ï–ì–û –ö–û–î–ê ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(
        [["üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è", "üîî –ó–∞–¥–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è"]],
        resize_keyboard=True
    )
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(
        [["üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è", "üîî –ó–∞–¥–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è"]],
        resize_keyboard=True
    )
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=reply_markup)

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëç")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    elif text == "üîî –ó–∞–¥–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ":
        containers = await get_tracked_containers_by_user(update.message.from_user.id)
        if containers:
            await update.message.reply_text(f"–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–ª–µ–∂–µ–Ω–∏—è: {', '.join(containers)}")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–µ–∂–µ–Ω–∏–π. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è":
        await remove_user_tracking(update.message.from_user.id)
        await update.message.reply_text("–í—Å–µ —Å–ª–µ–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–≥–ª—É—à–∫–∞: —Å—é–¥–∞ –≤—Å—Ç–∞–≤–ª—è–π —Å–≤–æ—é –æ–±—Ä–∞–±–æ—Ç–∫—É callback'–æ–≤ –∫–Ω–æ–ø–æ–∫
    await update.callback_query.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é...")

async def reply_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
    await handle_message(update, context)

async def dislocation_inline_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ "–î–∏—Å–ª–æ–∫–∞—Ü–∏—è"
    await update.callback_query.answer("–ò–Ω–ª–∞–π–Ω-–¥–∏—Å–ª–æ–∫–∞—Ü–∏—è")

# --- –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ ---