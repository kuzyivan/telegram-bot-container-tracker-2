import re
import tempfile
import pandas as pd
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session
from db import engine
from models import Tracking, Stats
from openpyxl.styles import PatternFill

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_sticker("CAACAgIAAxkBAAIC6mgUWmOtztmC0dnqI3C2l4wcikA-AAJvbAACa_OZSGYOhHaiIb7mNgQ")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker = update.message.sticker
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker.file_id}`", parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,\n.]+' , user_input.strip()) if c]
    found_rows, not_found = [], []

    with Session(engine) as session:
        for number in container_numbers:
            result = session.query(Tracking).filter(Tracking.container_number == number).first()
            if result:
                found_rows.append(result)

                session.add(Stats(
                    container_number=number,
                    user_id=update.message.from_user.id,
                    username=update.message.from_user.username
                ))
                session.commit()
            else:
                not_found.append(number)

    if len(container_numbers) > 1 and found_rows:
        df = pd.DataFrame([{
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞': row.container_number,
            '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è': row.from_station,
            '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è': row.to_station,
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏': row.current_station,
            '–û–ø–µ—Ä–∞—Ü–∏—è': row.operation,
            '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏': row.operation_date,
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π': row.waybill,
            '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è': row.km_left,
            '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)': row.forecast_days,
            '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞': row.wagon_number,
            '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏': row.operation_road
        } for row in found_rows])

        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            with pd.ExcelWriter(tmp.name, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name='–î–∏—Å–ª–æ–∫–∞—Ü–∏—è')
                worksheet = writer.sheets['–î–∏—Å–ª–æ–∫–∞—Ü–∏—è']
                for cell in worksheet[1]: cell.fill = PatternFill(start_color='87CEEB', end_color='87CEEB', fill_type='solid')
                for col in worksheet.columns:
                    max_length = max(len(str(cell.value)) if cell.value else 0 for cell in col)
                    worksheet.column_dimensions[col[0].column_letter].width = max_length + 2

            filename = f"–î–∏—Å–ª–æ–∫–∞—Ü–∏—è {datetime.utcnow() + timedelta(hours=10):%H-%M}.xlsx"
            await update.message.reply_document(document=open(tmp.name, "rb"), filename=filename)

        if not_found:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
        return

    if found_rows:
        replies = []
        for row in found_rows:
            wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if row.wagon_number and row.wagon_number.startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
            replies.append(
                f"üöõ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row.container_number}\n"
                f"üöá –í–∞–≥–æ–Ω: {row.wagon_number or '‚Äî'} {wagon_type}\n"
                f"üìç–î–∏—Å–ª–æ–∫–∞—Ü–∏—è: {row.current_station} {row.operation_road}\n"
                f"üèó –û–ø–µ—Ä–∞—Ü–∏—è: {row.operation}\nüìÖ {row.operation_date}\n\n"
                f"–û—Ç–∫—É–¥–∞: {row.from_station}\n–ö—É–¥–∞: {row.to_station}\n\n"
                f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row.waybill}\n–û—Å—Ç–∞–ª–æ—Å—å –∫–º: {row.km_left}\n"
                f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è: {row.forecast_days} –¥–Ω."
            )
        await update.message.reply_text("\n" + "‚ïê" * 30 + "\n".join(replies))
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.")
