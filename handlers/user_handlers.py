import re
import tempfile
import pandas as pd
from telegram import Update
from telegram.ext import ContextTypes
from db import get_pg_connection

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker_id = "CAACAgIAAxkBAAIC6mgUWmOtztmC0dnqI3C2l4wcikA-AAJvbAACa_OZSGYOhHaiIb7mNgQ"
    await update.message.reply_sticker(sticker_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker = update.message.sticker
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker.file_id}`", parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,\n.]+' , user_input.strip()) if c]

    conn = get_pg_connection()
    cursor = conn.cursor()

    found_rows = []
    not_found = []

    for number in container_numbers:
        cursor.execute("""
            SELECT container_number, from_station, to_station, current_station,
                   operation, operation_date, waybill, km_left, forecast_days,
                   wagon_number, operation_road
            FROM tracking WHERE container_number = %s
        """, (number,))
        row = cursor.fetchone()
        if row:
            found_rows.append(row)

            cursor.execute("""
                CREATE TABLE IF NOT EXISTS stats (
                    id SERIAL PRIMARY KEY,
                    container_number TEXT,
                    user_id BIGINT,
                    username TEXT,
                    timestamp TIMESTAMP DEFAULT NOW()
                )
            """)
            cursor.execute("""
                INSERT INTO stats (container_number, user_id, username)
                VALUES (%s, %s, %s)
            """, (number, update.message.from_user.id, update.message.from_user.username))
            conn.commit()
        else:
            not_found.append(number)

    conn.close()

    if len(container_numbers) > 1 and found_rows:
        df = pd.DataFrame(found_rows, columns=[
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
            '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        ])

        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            with pd.ExcelWriter(tmp.name, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name='–î–∏—Å–ª–æ–∫–∞—Ü–∏—è')
                from openpyxl.styles import PatternFill
                fill = PatternFill(start_color='87CEEB', end_color='87CEEB', fill_type='solid')
                worksheet = writer.sheets['–î–∏—Å–ª–æ–∫–∞—Ü–∏—è']
                for cell in worksheet[1]:
                    cell.fill = fill
                for col in worksheet.columns:
                    max_length = max(len(str(cell.value)) if cell.value is not None else 0 for cell in col)
                    worksheet.column_dimensions[col[0].column_letter].width = max_length + 2

            from datetime import datetime, timedelta
            vladivostok_time = datetime.utcnow() + timedelta(hours=10)
            filename = f"–î–∏—Å–ª–æ–∫–∞—Ü–∏—è {vladivostok_time.strftime('%H-%M')}.xlsx"
            await update.message.reply_document(document=open(tmp.name, "rb"), filename=filename)

        if not_found:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
        return

    if found_rows:
        reply_lines = []
        for row in found_rows:
            wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if row[9].startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
            reply_lines.append(
                f"üöõ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row[0]}\n"
                f"üöá –í–∞–≥–æ–Ω: {row[9]} {wagon_type}\n"
                f"üìç–î–∏—Å–ª–æ–∫–∞—Ü–∏—è: {row[3]} {row[10]}\n"
                f"üèó –û–ø–µ—Ä–∞—Ü–∏—è: {row[4]}\nüìÖ {row[5]}\n\n"
                f"–û—Ç–∫—É–¥–∞: {row[1]}\n–ö—É–¥–∞: {row[2]}\n\n"
                f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row[6]}\n–û—Å—Ç–∞–ª–æ—Å—å –∫–º: {row[7]}\n"
                f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è: {row[8]} –¥–Ω."
            )
        await update.message.reply_text("\n" + "‚ïê" * 30 + "\n".join(reply_lines))
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.")
