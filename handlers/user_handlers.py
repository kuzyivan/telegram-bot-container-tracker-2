from telegram import Update
from telegram.ext import ContextTypes
from utils.keyboards import (
    reply_keyboard,
    dislocation_inline_keyboard,
    tracking_inline_keyboard,
    main_menu_keyboard
)
from telegram.error import BadRequest

import re
from models import Tracking, Stats
from db import SessionLocal
from sqlalchemy.future import select
from logger import get_logger

logger = get_logger(__name__)

COLUMNS = [
    '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
    '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
    '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
    '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
]

# /start ‚Äî –≤—Å–µ–≥–¥–∞ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    await update.message.reply_sticker("CAACAgIAAxkBAAIC6mgUWmOtztmC0dnqI3C2l4wcikA-AAJvbAACa_OZSGYOhHaiIb7mNgQ")
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_keyboard
    )

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    if update.message:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_keyboard
        )
    elif update.callback_query:
        await update.callback_query.answer()
        try:
            await update.callback_query.edit_message_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=None
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                await update.callback_query.answer("–ú–µ–Ω—é —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ", show_alert=False)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é: {e}", exc_info=True)
                raise

# ReplyKeyboard –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É)
async def reply_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info(f"reply_keyboard_handler: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞–∂–∞–ª '{text}'")
    if text == "üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è":
        await update.message.reply_text(
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=dislocation_inline_keyboard
        )
    elif text == "üîî –ó–∞–¥–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ":
        await update.message.reply_text(
            "–î–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —Å–ª–µ–∂–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=tracking_inline_keyboard
        )
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è":
        from handlers.tracking_handlers import cancel_tracking_start
        return await cancel_tracking_start(update, context)
    else:
        logger.info(f"–ù–µ –∫–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é ‚Äî –∏—â–µ–º '{text}' –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
        await handle_message(update, context)
    
# Inline-–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (start/dislocation/track_request)
async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    logger.info(f"menu_button_handler: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –≤—ã–±—Ä–∞–ª {data}")
    try:
        if data == 'start':
            await query.answer()
            await query.edit_message_text(
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu_keyboard
            )
        elif data == 'dislocation':
            await query.answer()
            await query.edit_message_text(
                text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏."
            )
        elif data == 'track_request':
            from handlers.tracking_handlers import ask_containers
            return await ask_containers(update, context)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            await query.answer("–ú–µ–Ω—é —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ", show_alert=False)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline-–∫–Ω–æ–ø–∫–∏: {e}", exc_info=True)
            raise

# Inline-–∫–Ω–æ–ø–∫–∞ "–í–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä" –¥–ª—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏
async def dislocation_inline_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"dislocation_inline_callback_handler: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id}")
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    # –î–∞–ª—å—à–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç handle_message

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker = update.message.sticker
    logger.info(f"handle_sticker: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø—Ä–∏—Å–ª–∞–ª —Å—Ç–∏–∫–µ—Ä {sticker.file_id}")
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker.file_id}`", parse_mode='Markdown')
    await show_menu(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id if user else "‚Äî"
    user_name = user.username if user else "‚Äî"
    logger.info(f"handle_message: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")
    if not update.message or not update.message.text:
        logger.warning(f"handle_message: –ø—É—Å—Ç–æ–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
        await show_menu(update, context)
        return

    user_input = update.message.text
    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥: {user_input}")
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,\n.]+' , user_input.strip()) if c]
    found_rows = []
    not_found = []

    async with SessionLocal() as session:
        for container_number in container_numbers:
            result = await session.execute(
                select(
                    Tracking.container_number,
                    Tracking.from_station,
                    Tracking.to_station,
                    Tracking.current_station,
                    Tracking.operation,
                    Tracking.operation_date,
                    Tracking.waybill,
                    Tracking.km_left,
                    Tracking.forecast_days,
                    Tracking.wagon_number,
                    Tracking.operation_road
                ).where(
                    Tracking.container_number == container_number
                ).order_by(
                    Tracking.operation_date.desc()
                )
            )
            results = result.fetchall()

            stats_record = Stats(
                container_number=container_number,
                user_id=update.message.from_user.id,
                username=update.message.from_user.username
            )
            session.add(stats_record)
            await session.commit()

            if not results:
                not_found.append(container_number)
                logger.info(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {container_number}")
                continue

            row = results[0]
            found_rows.append(list(row))
            logger.info(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω: {container_number}")

    # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ‚Äî Excel —Ñ–∞–π–ª
    if len(container_numbers) > 1 and found_rows:
        from utils.send_tracking import create_excel_file, get_vladivostok_filename

        file_path = create_excel_file(found_rows, COLUMNS)
        filename = get_vladivostok_filename()
        try:
            with open(file_path, "rb") as f:
                await update.message.reply_document(document=f, filename=filename)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω Excel —Å –¥–∏—Å–ª–æ–∫–∞—Ü–∏–µ–π –ø–æ {len(found_rows)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)

        if not_found:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
        await show_menu(update, context)
        return

    # –û–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Äî –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
    elif found_rows:
        row = found_rows[0]
        wagon_number = str(row[9]) if row[9] else "‚Äî"
        wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if wagon_number.startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"

        try:
            km_left = float(row[7])
            forecast_days_calc = round(km_left / 600 + 1, 1)
        except Exception:
            km_left = "‚Äî"
            forecast_days_calc = "‚Äî"

        operation_station = f"{row[3]} üõ§Ô∏è ({row[10]})" if row[10] else row[3]

        msg = (
            f"üì¶ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</b>: <code>{row[0]}</code>\n\n"
            f"üõ§ <b>–ú–∞—Ä—à—Ä—É—Ç</b>:\n"
            f"<b>{row[1]}</b> üöÇ ‚Üí <b>{row[2]}</b>\n\n"
            f"üìç <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è</b>: {operation_station}\n"
            f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è</b>:\n"
            f"{row[5]} ‚Äî <i>{row[4]}</i>\n\n"
            f"üöÜ <b>–í–∞–≥–æ–Ω</b>: <code>{wagon_number}</code> ({wagon_type})\n"
            f"üìè <b>–û—Å—Ç–∞–ª–æ—Å—å –µ—Ö–∞—Ç—å</b>: <b>{km_left}</b> –∫–º\n\n"
            f"‚è≥ <b>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏</b>:\n"
            f"~<b>{forecast_days_calc}</b> —Å—É—Ç–æ–∫ "
            f"(—Ä–∞—Å—á–µ—Ç: {km_left} –∫–º / 600 –∫–º/—Å—É—Ç–∫–∏ + 1 –¥–µ–Ω—å)"
        )

        await update.message.reply_text(msg, parse_mode="HTML")
        logger.info(f"–î–∏—Å–ª–æ–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {row[0]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await show_menu(update, context)
    else:
        logger.info(f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.")
        await show_menu(update, context)