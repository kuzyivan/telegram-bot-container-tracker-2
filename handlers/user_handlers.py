import pandas as pd
import re
from models import Tracking, Stats
from db import SessionLocal
from telegram import Update
from telegram.ext import ContextTypes

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker_id = "CAACAgIAAxkBAAIC6mgUWmOtztmC0dnqI3C2l4wcikA-AAJvbAACa_OZSGYOhHaiIb7mNgQ"
    await update.message.reply_sticker(sticker_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker = update.message.sticker
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker.file_id}`", parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        await update.message.reply_text("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
        return

    user_input = update.message.text
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,\n.]+' , user_input.strip()) if c]

    reply_messages = []

    with SessionLocal() as session:
        for container_number in container_numbers:
            results = session.query(
                Tracking.container_number,
                Tracking.current_station,
                Tracking.operation_date,
                Tracking.operation,
                Tracking.wagon_number,
                Tracking.from_station,
                Tracking.to_station,
                Tracking.km_left,
                Tracking.forecast_days
            ).filter(
                Tracking.container_number == container_number
            ).all()

            # –ó–∞–ø–∏—Å—å –≤ stats
            stats_record = Stats(
                container_number=container_number,
                user_id=update.message.from_user.id,
                username=update.message.from_user.username
            )
            session.add(stats_record)
            session.commit()

            if not results:
                reply_messages.append(f"ü§∑ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_number} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue

            df = pd.DataFrame([{
                '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞': row.container_number,
                '–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è': row.current_station,
                '–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏': row.operation_date,
                '–û–ø–µ—Ä–∞—Ü–∏—è': row.operation,
                '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞': row.wagon_number,
                '–¢–∏–ø –≤–∞–≥–æ–Ω–∞': "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if row.wagon_number and str(row.wagon_number).startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞",
                '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è': row.from_station,
                '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è': row.to_station,
                '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∫–º': row.km_left,
                '–ü—Ä–æ–≥–Ω–æ–∑ –¥–Ω–µ–π': row.forecast_days
            } for row in results])

            message = df.to_string(index=False)
            reply_messages.append(
                f"üîç –î–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É {container_number}:\n\n```\n{message}\n```"
            )

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è Telegram ‚Äî 4096 —Å–∏–º–≤–æ–ª–æ–≤!
    for reply in reply_messages:
        for part in [reply[i:i+4000] for i in range(0, len(reply), 4000)]:
            await update.message.reply_text(part, parse_mode='Markdown')
