from telegram import Update
from telegram.ext import ContextTypes
from utils.keyboards import (
    reply_keyboard,
    dislocation_inline_keyboard,
    tracking_inline_keyboard,
    main_menu_keyboard
)
from telegram.error import BadRequest
import re
from models import Tracking, Stats
from db import SessionLocal
from sqlalchemy.future import select

# ... (–∫–æ–¥ –¥–æ handle_message –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_sticker("CAACAgIAAxkBAAIC6mgUWmOtztmC0dnqI3C2l4wcikA-AAJvbAACa_OZSGYOhHaiIb7mNgQ")
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_keyboard
    )

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_keyboard
        )
    elif update.callback_query:
        await update.callback_query.answer()
        try:
            await update.callback_query.edit_message_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu_keyboard
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                await update.callback_query.answer("–ú–µ–Ω—é —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ", show_alert=False)
            else:
                raise

# ReplyKeyboard –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É)
async def reply_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏."
        )
    elif text == "üîî –ó–∞–¥–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ":
        from handlers.tracking_handlers import ask_containers
        # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é, —Ç.–∫. ConversationHandler –∂–¥–µ—Ç CallbackQuery
        # –õ—É—á—à–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É
        await update.message.reply_text(
            "–î–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —Å–ª–µ–∂–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=tracking_inline_keyboard
        )
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è":
        from handlers.tracking_handlers import cancel_tracking_start
        return await cancel_tracking_start(update, context)
    else:
        await handle_message(update, context)
    
# Inline-–∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (start/dislocation/track_request)
async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()
    try:
        if data == 'start':
            await query.edit_message_text(
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu_keyboard
            )
        elif data == 'dislocation':
            await query.edit_message_text(
                text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏."
            )
        elif data == 'track_request':
            from handlers.tracking_handlers import ask_containers
            return await ask_containers(update, context) # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è ConversationHandler
    except BadRequest as e:
        if "Message is not modified" not in str(e):
             raise

# Inline-–∫–Ω–æ–ø–∫–∞ "–í–≤–µ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä" –¥–ª—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏
async def dislocation_inline_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker = update.message.sticker
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker.file_id}`", parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user_input = update.message.text
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,;\n]+', user_input.strip()) if c.strip()]
    
    if not container_numbers:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
        return

    found_rows = []
    not_found = list(container_numbers)

    async with SessionLocal() as session:
        # –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        results = await session.execute(
            select(Tracking).where(Tracking.container_number.in_(container_numbers))
        )
        
        # –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        user = update.message.from_user
        stats_records = [Stats(container_number=cn, user_id=user.id, username=user.username) for cn in container_numbers]
        session.add_all(stats_records)
        await session.commit()

        for row in results.scalars().all():
            found_rows.append(list(row.tuple())) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ—Ä—Ç–µ–∂ –∏ –∑–∞—Ç–µ–º –≤ —Å–ø–∏—Å–æ–∫
            if row.container_number in not_found:
                not_found.remove(row.container_number)
    
    COLUMNS = [
        '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
        '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
        '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
        '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
    ]

    # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–ª–∏ –æ–¥–∏–Ω, –Ω–æ –≤ –≤–∏–¥–µ Excel
    if len(container_numbers) > 1 and found_rows:
        from utils.send_tracking import create_excel_file, get_vladivostok_filename
        file_path = create_excel_file(found_rows, COLUMNS)
        filename = get_vladivostok_filename()
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è with
        with open(file_path, "rb") as f:
            await update.message.reply_document(document=f, filename=filename)

        if not_found:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
        return

    # –û–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Äî –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
    elif found_rows:
        row = found_rows[0]
        # ... (–∫–æ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        wagon_number = str(row[9]) if row[9] else "‚Äî"
        wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if wagon_number.startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"

        try:
            km_left = float(row[7])
            forecast_days_calc = round(km_left / 600 + 1, 1)
        except (ValueError, TypeError):
            km_left = "‚Äî"
            forecast_days_calc = "‚Äî"

        operation_station = f"{row[3]} ({row[10]})" if row[10] else row[3]

        msg = (
            f"üì¶ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</b>: <code>{row[0]}</code>\n\n"
            f"üõ§ <b>–ú–∞—Ä—à—Ä—É—Ç</b>: <b>{row[1]}</b> ‚Üí <b>{row[2]}</b>\n\n"
            f"üìç <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è</b>: {operation_station}\n"
            f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è</b>: {row[5]} ‚Äî <i>{row[4]}</i>\n\n"
            f"üöÜ <b>–í–∞–≥–æ–Ω</b>: <code>{wagon_number}</code> ({wagon_type})\n"
            f"üìè <b>–û—Å—Ç–∞–ª–æ—Å—å –µ—Ö–∞—Ç—å</b>: <b>{km_left}</b> –∫–º\n"
            f"‚è≥ <b>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏</b>: ~<b>{forecast_days_calc}</b> —Å—É—Ç–æ–∫"
        )
        await update.message.reply_text(msg, parse_mode="HTML")

    if not_found:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))

