from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from db import (
    get_all_user_ids,
    get_tracked_containers_by_user,
    remove_user_tracking,
    set_user_email,
)
from logger import get_logger

logger = get_logger(__name__)

# –°—Ç–µ–π—Ç—ã –¥–ª—è ConversationHandler
SET_EMAIL = range(1)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [
        ["üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è", "üîî –ó–∞–¥–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ"],
        ["‚ùå –û—Ç–º–µ–Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è"]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ üö¢\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
    )

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# --- Email Conversation ---
async def set_email_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=ReplyKeyboardRemove()
    )
    return SET_EMAIL

async def process_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email = update.message.text
    telegram_id = update.message.from_user.id
    username = update.message.from_user.username or ""

    await set_user_email(telegram_id, username, email)
    await update.message.reply_text(
        f"Email {email} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def cancel_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–æ–¥ email –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
async def reply_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    elif text == "üîî –ó–∞–¥–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è:")
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è":
        await cancel_my_tracking(update, context)
    else:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

# --- Inline –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏) ---
async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "start":
        await start(query, context)
    elif query.data == "dislocation":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    elif query.data == "track_request":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è:")

# --- –î–ª—è inline-–∫–Ω–æ–ø–∫–∏ "–¥–∏—Å–ª–æ–∫–∞—Ü–∏—è" ---
async def dislocation_inline_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

# --- –°—Ç–∏–∫–µ—Ä—ã ---
async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëç")

# --- –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –∫–æ–º–∞–Ω–¥–∞–º ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
    )

# --- –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def show_my_tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    containers = await get_tracked_containers_by_user(user_id)
    if containers:
        msg = "–í—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:\n" + "\n".join(containers)
    else:
        msg = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã."
    await update.message.reply_text(msg)

# --- –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def cancel_my_tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    await remove_user_tracking(user_id)
    await update.message.reply_text("–í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    