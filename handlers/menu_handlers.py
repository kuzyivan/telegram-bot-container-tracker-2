# handlers/menu_handlers.py
from telegram import Update, ReplyKeyboardRemove, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from logger import get_logger
import re

logger = get_logger(__name__)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        [KeyboardButton("üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è"), KeyboardButton("üöÜ –ú–æ–∏ –ø–æ–µ–∑–¥–∞")],
        [KeyboardButton("üìÇ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")],
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ],
    resize_keyboard=True
)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –≤—ã–≤–æ–¥—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if not update.message:
        return
    
    # –í–≤–µ–¥–∏—Ç–µ –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≤ register_user_if_not_exists
    
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=MAIN_KEYBOARD
    )

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã."""
    if update.message:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å—Ç–∏–∫–µ—Ä!")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ReplyKeyboard ---

async def reply_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ ReplyKeyboard."""
    text = update.message.text.strip()
    user = update.effective_user
    
    logger.info(f"[Menu] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {text}")

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è"
    if "–î–∏—Å–ª–æ–∫–∞—Ü–∏—è" in text:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–ª–∏ –≤–∞–≥–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìÇ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    elif "–ø–æ–¥–ø–∏—Å–∫–∏" in text:
        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /my_subscriptions (–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ bot.py)
        await context.application.update_queue.put(
             Update(
                 update_id=update.update_id,
                 message=update.message.effective_message,
                 callback_query=None,
                 my_chat_member=None,
                 edited_message=None,
                 channel_post=None,
                 edited_channel_post=None,
                 inline_query=None,
                 chosen_inline_result=None,
                 shipping_query=None,
                 pre_checkout_query=None,
                 poll=None,
                 poll_answer=None,
                 chat_member=None,
                 chat_join_request=None
             )
        )
        await update.message.reply_text("–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /my_subscriptions...")
    
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üöÜ –ú–æ–∏ –ø–æ–µ–∑–¥–∞"
    elif "–ø–æ–µ–∑–¥–∞" in text:
        await update.message.reply_text("–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /train. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞:")
        
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    elif "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" in text:
         await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: email, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç.–¥.")

    return