# handlers/menu_handlers.py
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from logger import get_logger

logger = get_logger(__name__)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–ø—Ä–æ—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_keyboard = [
        ["üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è"],
        ["üìÇ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"],
    ]

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ üöÜ\n\n"
        "–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_subscriptions.",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
    )

    try:
        if update.effective_chat:
            await context.bot.send_sticker(
                chat_id=update.effective_chat.id,
                sticker="CAACAgIAAxkBAAJBOGiisUho8mpdezoAATaKIfwKypCNVgACb2wAAmvzmUhmDoR2oiG-5jYE"
            )
    except Exception:
        pass

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.callback_query:
        return
    query = update.callback_query
    await query.answer()
    if query.data == "start":
        await show_menu(update, context)
    elif query.data == "dislocation":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    elif query.data == "track_request":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Å–ª–µ–∂–µ–Ω–∏—è:")

async def dislocation_inline_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.callback_query:
        return
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.effective_user or not update.message.sticker:
        return
    sticker = update.message.sticker
    logger.info(f"handle_sticker: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –ø—Ä–∏—Å–ª–∞–ª —Å—Ç–∏–∫–µ—Ä {sticker.file_id}")
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker.file_id}`", parse_mode=ParseMode.MARKDOWN)
    await show_menu(update, context)