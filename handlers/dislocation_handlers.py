from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from sqlalchemy import select
import re

from logger import get_logger
from db import SessionLocal
from models import Tracking, Stats

# train lookup (queries layer preferred, fallback to db)
try:
    from queries.containers import get_latest_train_by_container  # preferred
except Exception:
    from db import get_latest_train_by_container  # fallback

logger = get_logger(__name__)


def _fmt_num(x):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª: —É–±–∏—Ä–∞–µ—Ç .0 –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Ö–æ–¥ ‚Äî —Å—Ç—Ä–æ–∫–∞."""
    try:
        f = float(x)
        if f.is_integer():
            return str(int(f))
        return str(f)
    except Exception:
        return str(x)


def detect_wagon_type(wagon_number: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–∞–≥–æ–Ω–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É: 60‚Äì69 ‚Üí –ø–æ–ª—É–≤–∞–≥–æ–Ω, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Üí –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞."""
    try:
        num = int(wagon_number[:2])
    except Exception:
        return "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
    if 60 <= num <= 69:
        return "–ø–æ–ª—É–≤–∞–≥–æ–Ω"
    return "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"


# –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Excel (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö)
COLUMNS = [
    '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–ü–æ–µ–∑–¥',
    '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
    '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
    '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
    '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
]

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:
    - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç (–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤),
    - –∏—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Tracking,
    - –µ—Å–ª–∏ >1 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç Excel –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç,
    - –µ—Å–ª–∏ 1 ‚Äî –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏,
    - –ø–∏—à–µ—Ç –≤ Stats –∫–∞–∂–¥–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.
    """
    user = update.effective_user
    user_id = user.id if user else "‚Äî"
    user_name = user.username if user else "‚Äî"
    logger.info(f"[dislocation] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")

    if not update.message or not update.message.text:
        logger.warning(f"[dislocation] –ø—É—Å—Ç–æ–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
        return

    user_input = update.message.text
    logger.info(f"[dislocation] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥: {user_input}")

    # –†–∞–∑–±–æ—Ä —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤: –ø—Ä–æ–±–µ–ª—ã/–∑–∞–ø—è—Ç—ã–µ/—Ç–æ—á–∫–∏/–ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,\n.]+' , user_input.strip()) if c]
    found_rows = []
    not_found = []

    async with SessionLocal() as session:
        for container_number in container_numbers:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
            result = await session.execute(
                select(
                    Tracking.container_number,
                    Tracking.from_station,
                    Tracking.to_station,
                    Tracking.current_station,
                    Tracking.operation,
                    Tracking.operation_date,
                    Tracking.waybill,
                    Tracking.km_left,
                    Tracking.forecast_days,
                    Tracking.wagon_number,
                    Tracking.operation_road
                ).where(
                    Tracking.container_number == container_number
                ).order_by(
                    Tracking.operation_date.desc()
                )
            )
            rows = result.fetchall()

            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
            stats_record = Stats(
                container_number=container_number,
                user_id=update.message.from_user.id,
                username=update.message.from_user.username
            )
            session.add(stats_record)
            await session.commit()

            if not rows:
                not_found.append(container_number)
                logger.info(f"[dislocation] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ù–ï –Ω–∞–π–¥–µ–Ω: {container_number}")
                continue

            row = rows[0]
            found_rows.append(list(row))
            logger.info(f"[dislocation] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω: {container_number}")

    # === –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ===
    if len(container_numbers) > 1 and found_rows:
        try:
            # –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è Excel —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π "–ü–æ–µ–∑–¥"
            rows_for_excel = []
            for row in found_rows:
                container = row[0]
                # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ–µ–∑–¥ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
                try:
                    train = await get_latest_train_by_container(container)
                except Exception as e:
                    logger.error(f"[dislocation][excel] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è train –¥–ª—è {container}: {e}", exc_info=True)
                    train = None

                # —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ row (–∫–∞–∫ –≤—ã–±–∏—Ä–∞–ª–∏ –∏–∑ Tracking)
                from_station      = row[1]
                to_station        = row[2]
                current_station   = row[3]
                operation         = row[4]
                operation_date    = row[5]
                waybill           = row[6]
                km_left           = row[7]
                forecast_days     = row[8]
                wagon_number      = row[9]
                operation_road    = row[10]

                rows_for_excel.append([
                    container,
                    train or "",               # –ü–æ–µ–∑–¥
                    from_station,
                    to_station,
                    current_station,
                    operation,
                    operation_date,
                    km_left,
                    forecast_days,
                    wagon_number,
                    operation_road,
                ])

            from utils.send_tracking import create_excel_file, get_vladivostok_filename  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
            file_path = create_excel_file(rows_for_excel, COLUMNS)
            filename = get_vladivostok_filename()
            with open(file_path, "rb") as f:
                await update.message.reply_document(document=f, filename=filename)
            logger.info(f"[dislocation] Excel —Å –¥–∏—Å–ª–æ–∫–∞—Ü–∏–µ–π –ø–æ {len(found_rows)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"[dislocation] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)

        if not_found:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
        return

    # === –û–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω ===
    if found_rows:
        row = found_rows[0]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ –∏–∑ terminal_containers –ø–æ —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π –∑–∞–ø–∏—Å–∏
        try:
            train = await get_latest_train_by_container(row[0])
        except Exception as e:
            logger.error(f"[dislocation] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è train –¥–ª—è {row[0]}: {e}", exc_info=True)
            train = None

        wagon_number = str(row[9]) if row[9] else "‚Äî"
        wagon_type = detect_wagon_type(wagon_number)

        try:
            km_left_val = float(row[7])
            forecast_days_calc = round(km_left_val / 600 + 1, 1)
            km_left_display = km_left_val
        except Exception:
            km_left_display = "‚Äî"
            forecast_days_calc = "‚Äî"

        operation_station = f"{row[3]} üõ§Ô∏è ({row[10]})" if row[10] else row[3]

        # –®–∞–ø–∫–∞ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –∏ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω) –Ω–æ–º–µ—Ä–æ–º –ø–æ–µ–∑–¥–∞
        header = f"üì¶ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</b>: <code>{row[0]}</code>\n"
        if train:
            header += f"üöÇ <b>–ü–æ–µ–∑–¥</b>: <code>{train}</code>\n"
        header += "\n"

        msg = (
            f"{header}"
            f"üõ§ <b>–ú–∞—Ä—à—Ä—É—Ç</b>:\n"
            f"<b>{row[1]}</b> üöÇ ‚Üí <b>{row[2]}</b>\n\n"
            f"üìç <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è</b>: {operation_station}\n"
            f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è</b>:\n"
            f"{row[5]} ‚Äî <i>{row[4]}</i>\n\n"
            f"üöÜ <b>–í–∞–≥–æ–Ω</b>: <code>{_fmt_num(wagon_number)}</code> ({wagon_type})\n"
            f"üìè <b>–û—Å—Ç–∞–ª–æ—Å—å –µ—Ö–∞—Ç—å</b>: <b>{_fmt_num(km_left_display)}</b> –∫–º\n\n"
            f"‚è≥ <b>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏</b>:\n"
            f"~<b>{_fmt_num(forecast_days_calc)}</b> —Å—É—Ç–æ–∫ "
            f"(—Ä–∞—Å—á—ë—Ç: {_fmt_num(km_left_display)} –∫–º / 600 –∫–º/—Å—É—Ç–∫–∏ + 1 –¥–µ–Ω—å)"
        )

        await update.message.reply_text(msg, parse_mode=ParseMode.HTML)
        logger.info(f"[dislocation] –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É {row[0]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return

    # === –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ===
    logger.info(f"[dislocation] –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.")