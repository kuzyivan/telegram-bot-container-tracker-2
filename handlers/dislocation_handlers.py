# handlers/dislocation_handlers.py
import asyncio
import os
from telegram import Update
from telegram.ext import ContextTypes
import re
from typing import Optional

from logger import get_logger
from db import SessionLocal
from models import UserRequest, Tracking
from queries.user_queries import add_user_request, register_user_if_not_exists
from queries.notification_queries import get_tracking_data_for_containers
from services.railway_router import get_remaining_distance_on_route
from utils.send_tracking import create_excel_file, get_vladivostok_filename
from utils.railway_utils import get_railway_abbreviation
import config

logger = get_logger(__name__)

# --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –í–ê–ì–û–ù–ê ---

def get_wagon_type_by_number(wagon_number: Optional[str | int]) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –≤–∞–≥–æ–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä–µ –Ω–æ–º–µ—Ä–∞, —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ.
    """
    if wagon_number is None:
        return '–Ω/–¥'
    
    wagon_str = str(wagon_number).removesuffix('.0').strip()
    
    if not wagon_str or not wagon_str[0].isdigit():
        return '–ü—Ä–æ—á–∏–π' 
    
    first_digit = wagon_str[0]
    
    if first_digit == '6':
        return '–ü–æ–ª—É–≤–∞–≥–æ–Ω'
    elif first_digit == '9' or first_digit == '5':
        return '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞'
    else:
        return '–ü—Ä–æ—á–∏–π'

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---

def normalize_text_input(text: str) -> list[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    text = text.upper().strip()
    items = re.split(r'[,\s;\n]+', text)
    normalized_items = sorted(list(set(filter(None, items))))
    return normalized_items

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –∏—â–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    message = update.message
    user = update.effective_user

    if not message or not message.text or not user:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    await register_user_if_not_exists(user)

    search_terms = normalize_text_input(message.text)
    if not search_terms:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    query_text_log = ", ".join(search_terms)
    logger.info(f"[dislocation] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: {query_text_log}")

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        await add_user_request(telegram_id=user.id, query_text=query_text_log)
    except Exception as log_err:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {log_err}", exc_info=True)

    tracking_results = await get_tracking_data_for_containers(search_terms)

    if not tracking_results:
        await message.reply_text(f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –Ω–æ–º–µ—Ä–∞–º: {query_text_log}")
        return

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–û–î–ò–ù–û–ß–ù–´–ô –ö–û–ù–¢–ï–ô–ù–ï–†) ---
    if len(tracking_results) == 1:
        result = tracking_results[0]
        
        # --- –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ò–°–¢–û–ß–ù–ò–ö–ê –î–ê–ù–ù–´–• (–ü–†–ò–û–†–ò–¢–ï–¢: –†–ê–°–ß–ï–¢) ---
        remaining_distance = await get_remaining_distance_on_route(
            start_station=result.from_station,
            end_station=result.to_station,
            current_station=result.current_station
        )
        
        km_left_display = None
        forecast_days_display = 0.0
        source_log_tag = "–ù/–î"
        distance_label = "–û—Å—Ç–∞–ª–æ—Å—å –∫–º (–ë–î):" 

        if remaining_distance is not None:
            source_log_tag = "–†–ê–°–ß–ï–¢"
            km_left_display = remaining_distance
            forecast_days_display = round(remaining_distance / 600 + 1, 1) if remaining_distance > 0 else 0.0
            distance_label = "–¢–∞—Ä–∏—Ñ–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:"
        else:
            source_log_tag = "–ë–î (Fallback)"
            km_left_display = result.km_left
            forecast_days_display = result.forecast_days or 0.0
            distance_label = "–û—Å—Ç–∞–ª–æ—Å—å –∫–º (–ë–î):"
            
        logger.info(f"[dislocation] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {result.container_number}: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ ({km_left_display} –∫–º) –≤–∑—è—Ç–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_log_tag}")
        # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ò–°–¢–û–ß–ù–ò–ö–ê –î–ê–ù–ù–´–• ---
        
        wagon_number_raw = result.wagon_number
        wagon_number_cleaned = str(wagon_number_raw).removesuffix('.0') if wagon_number_raw else '–Ω/–¥'
        
        wagon_type_display = get_wagon_type_by_number(wagon_number_raw)
        
        railway_abbreviation = get_railway_abbreviation(result.operation_road)

        # –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –° –≠–ú–û–î–ó–ò
        response_text = (
            f"üì¶ **–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {result.container_number}**\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üìç *–ú–∞—Ä—à—Ä—É—Ç:*\n"
            f"–û—Ç–ø—Ä: `{result.from_station}`\n"
            f"–ù–∞–∑–Ω: `{result.to_station}`\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üöÇ *–¢–µ–∫—É—â–∞—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏—è:*\n"
            f"**–°—Ç–∞–Ω—Ü–∏—è:** {result.current_station} (–î–æ—Ä–æ–≥–∞: `{railway_abbreviation}`)\n"
            f"**–û–ø–µ—Ä–∞—Ü–∏—è:** `{result.operation}`\n"
            f"**–î–∞—Ç–∞/–í—Ä–µ–º—è:** `{result.operation_date}`\n"
            f"**–í–∞–≥–æ–Ω:** `{wagon_number_cleaned}` (–¢–∏–ø: `{wagon_type_display}`)\n"
            f"**–ù–∞–∫–ª–∞–¥–Ω–∞—è:** `{result.waybill}`\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üõ£Ô∏è *–ü—Ä–æ–≥–Ω–æ–∑:*\n"
            f"**{distance_label}** **{km_left_display or '–Ω/–¥'} –∫–º**\n" 
            f"**–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏):** `{forecast_days_display:.1f} –¥–Ω.`"
        )
        await message.reply_markdown(response_text)

    else:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (Excel)
        final_report_data = []
        
        excel_columns = list(config.TRACKING_REPORT_COLUMNS)
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï EXCEL: –ò–∑–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, —á—Ç–æ–±—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å 13 —ç–ª–µ–º–µ–Ω—Ç–∞–º –¥–∞–Ω–Ω—ã—Ö.
        try:
             km_left_index = excel_columns.index('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è')
             wagon_index = excel_columns.index('–í–∞–≥–æ–Ω')
             
             # 1. –í—Å—Ç–∞–≤–ª—è–µ–º "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö"
             excel_columns.insert(km_left_index + 1, '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö')

             # 2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–í–∞–≥–æ–Ω"
             excel_columns.pop(wagon_index)
             
             # 3. –í—Å—Ç–∞–≤–ª—è–µ–º "–í–∞–≥–æ–Ω" –∏ "–¢–∏–ø –≤–∞–≥–æ–Ω–∞"
             excel_columns.insert(wagon_index, '–í–∞–≥–æ–Ω')
             excel_columns.insert(wagon_index + 1, '–¢–∏–ø –≤–∞–≥–æ–Ω–∞')
             
             # 4. –£–¥–∞–ª—è–µ–º "–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–∏)"
             excel_columns.pop(excel_columns.index('–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–∏)'))
             
             # 5. –î–æ–±–∞–≤–ª—è–µ–º "–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–∏)" –≤ –∫–æ–Ω–µ—Ü (—á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å 13 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
             excel_columns.append('–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–∏)')


        except ValueError:
             # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
             excel_columns.append('–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö') 
             excel_columns.append('–¢–∏–ø –≤–∞–≥–æ–Ω–∞') 


        for db_row in tracking_results:
            
            recalculated_distance = await get_remaining_distance_on_route(
                start_station=db_row.from_station,
                end_station=db_row.to_station,
                current_station=db_row.current_station
            )
            
            km_left = None
            forecast_days = 0.0
            source_tag = ""
            
            if recalculated_distance is not None:
                source_tag = "–¢–∞—Ä–∏—Ñ (10-01)"
                km_left = recalculated_distance
                forecast_days = round(recalculated_distance / 600 + 1, 1) if recalculated_distance > 0 else 0.0
            else:
                source_tag = "–ë–î"
                km_left = db_row.km_left
                forecast_days = db_row.forecast_days or 0.0

            logger.info(f"[dislocation] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {db_row.container_number}: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ ({km_left} –∫–º) –≤–∑—è—Ç–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_tag}")
             
            wagon_number_raw = db_row.wagon_number
            wagon_number_cleaned = str(wagon_number_raw).removesuffix('.0') if wagon_number_raw else None
            
            wagon_type_for_excel = get_wagon_type_by_number(wagon_number_raw)

            railway_display_name = db_row.operation_road 


            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è Excel. (13 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
            excel_row = [
                 db_row.container_number, db_row.from_station, db_row.to_station,
                 db_row.current_station, db_row.operation, db_row.operation_date,
                 db_row.waybill, km_left, source_tag, 
                 wagon_number_cleaned, wagon_type_for_excel, railway_display_name,
                 forecast_days, # –ü—Ä–æ–≥–Ω–æ–∑ –≤ –∫–æ–Ω—Ü–µ
             ]
            final_report_data.append(excel_row)

        file_path = None
        try:
             file_path = await asyncio.to_thread(
                 create_excel_file,
                 final_report_data,
                 excel_columns # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ (13 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
             )
             filename = get_vladivostok_filename(prefix="–î–∏—Å–ª–æ–∫–∞—Ü–∏—è")

             with open(file_path, "rb") as f:
                 await message.reply_document(
                     document=f,
                     filename=filename,
                     caption=f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ {len(final_report_data)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º."
                 )
             logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω Excel –æ—Ç—á–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        except Exception as send_err:
             logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {send_err}", exc_info=True)
             await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Excel —Ñ–∞–π–ª.")
        finally:
             if file_path and os.path.exists(file_path):
                 try:
                     os.remove(file_path)
                 except OSError as e:
                      logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")