# handlers/dislocation_handlers.py
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from sqlalchemy import select
import re

from logger import get_logger
from db import SessionLocal
from models import Tracking, Stats

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –£–±–∏—Ä–∞–µ–º try...except –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç
from queries.containers import get_latest_train_by_container

logger = get_logger(__name__)


def _fmt_num(x):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª: —É–±–∏—Ä–∞–µ—Ç .0 –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Ö–æ–¥ ‚Äî —Å—Ç—Ä–æ–∫–∞."""
    try:
        f = float(x)
        if f.is_integer():
            return str(int(f))
        return str(f)
    except Exception:
        return str(x)


def detect_wagon_type(wagon_number: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–∞–≥–æ–Ω–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É: 60‚Äì69 ‚Üí –ø–æ–ª—É–≤–∞–≥–æ–Ω, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Üí –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞."""
    try:
        num = int(wagon_number[:2])
    except Exception:
        return "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
    if 60 <= num <= 69:
        return "–ø–æ–ª—É–≤–∞–≥–æ–Ω"
    return "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"


COLUMNS = [
    '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–ü–æ–µ–∑–¥',
    '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
    '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
    '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
    '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
]

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ä–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    """
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ message, text –∏ from_user
    if not update.message or not update.message.text or not update.message.from_user:
        logger.warning(f"[dislocation] –ø–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ/—Ç–µ–∫—Å—Ç/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)")
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ –º–æ–∂–µ–º, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        if update.message:
            await update.message.reply_text("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
        return

    user_id = update.message.from_user.id
    user_name = update.message.from_user.username or "‚Äî"
    logger.info(f"[dislocation] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")

    user_input = update.message.text
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,\n.]+', user_input.strip()) if c]
    found_rows = []
    not_found = []

    async with SessionLocal() as session:
        for container_number in container_numbers:
            result = await session.execute(
                select(Tracking).where(
                    Tracking.container_number == container_number
                ).order_by(
                    Tracking.operation_date.desc()
                )
            )
            rows = result.fetchall()

            stats_record = Stats(
                container_number=container_number,
                user_id=user_id,
                username=user_name
            )
            session.add(stats_record)
            await session.commit()

            if not rows:
                not_found.append(container_number)
                continue

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (—Å–∞–º—É—é —Å–≤–µ–∂—É—é) —Å—Ç—Ä–æ–∫—É
            found_rows.append(rows[0])

    if len(container_numbers) > 1 and found_rows:
        try:
            rows_for_excel = []
            for row in found_rows:
                train = await get_latest_train_by_container(row.container_number) or ""
                rows_for_excel.append([
                    row.container_number, train,
                    row.from_station, row.to_station,
                    row.current_station, row.operation, row.operation_date,
                    row.waybill, row.km_left, row.forecast_days,
                    _fmt_num(row.wagon_number), row.operation_road,
                ])

            from utils.send_tracking import create_excel_file, get_vladivostok_filename
            file_path = create_excel_file(rows_for_excel, COLUMNS)
            filename = get_vladivostok_filename()
            with open(file_path, "rb") as f:
                await update.message.reply_document(document=f, filename=filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)

        if not_found:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
        return

    if found_rows:
        row = found_rows[0]
        train = await get_latest_train_by_container(row.container_number)
        wagon_number = str(row.wagon_number) if row.wagon_number else "‚Äî"
        wagon_type = detect_wagon_type(wagon_number)

        try:
            km_left_val = float(row.km_left)
            forecast_days_calc = round(km_left_val / 600 + 1, 1)
        except (ValueError, TypeError):
            km_left_val = "‚Äî"
            forecast_days_calc = "‚Äî"

        operation_station = f"{row.current_station} üõ§Ô∏è ({row.operation_road})" if row.operation_road else row.current_station
        
        header = f"üì¶ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</b>: <code>{row.container_number}</code>\n"
        if train:
            header += f"üöÇ <b>–ü–æ–µ–∑–¥</b>: <code>{train}</code>\n"
        
        msg = (
            f"{header}\n"
            f"üõ§ <b>–ú–∞—Ä—à—Ä—É—Ç</b>:\n<b>{row.from_station}</b> üöÇ ‚Üí <b>{row.to_station}</b>\n\n"
            f"üìç <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è</b>: {operation_station}\n"
            f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è</b>:\n{row.operation_date} ‚Äî <i>{row.operation}</i>\n\n"
            f"üöÜ <b>–í–∞–≥–æ–Ω</b>: <code>{_fmt_num(wagon_number)}</code> ({wagon_type})\n"
            f"üìè <b>–û—Å—Ç–∞–ª–æ—Å—å –µ—Ö–∞—Ç—å</b>: <b>{_fmt_num(km_left_val)}</b> –∫–º\n\n"
            f"‚è≥ <b>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏</b>:\n~<b>{_fmt_num(forecast_days_calc)}</b> —Å—É—Ç–æ–∫"
        )
        await update.message.reply_text(msg, parse_mode=ParseMode.HTML)
        return

    await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.")