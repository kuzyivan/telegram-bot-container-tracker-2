# handlers/dislocation_handlers.py
from __future__ import annotations

import re
from typing import List, Tuple

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from sqlalchemy import select

from logger import get_logger
from db import SessionLocal
from models import Tracking, Stats
from utils.send_tracking import create_excel_file, get_vladivostok_filename

logger = get_logger(__name__)

# –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è Excel
COLUMNS = [
    "–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞", "–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
    "–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏", "–û–ø–µ—Ä–∞—Ü–∏—è", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏",
    "–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π", "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è", "–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)",
    "–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞", "–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"
]


def _parse_container_input(text: str) -> List[str]:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –¥–æ–ø—É—Å–∫–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ø—Ä–æ–±–µ–ª/–∑–∞–ø—è—Ç–∞—è/—Ç–æ—á–∫–∞/–ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (UPPER, –±–µ–∑ –ø—É—Å—Ç—ã—Ö).
    """
    return [c.strip().upper() for c in re.split(r"[\s,\n\.]+", text.strip()) if c.strip()]


def _format_single_message(row: List) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    row —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ä—è–¥–∫—É –∫–æ–ª–æ–Ω–æ–∫ COLUMNS.
    """
    container = row[0]
    from_station = row[1]
    to_station = row[2]
    current_station = row[3]
    operation = row[4]
    operation_dt = row[5]
    waybill = row[6]
    km_left = row[7]
    forecast_days = row[8]
    wagon_number = row[9]
    op_road = row[10]

    wagon_str = str(wagon_number) if wagon_number else "‚Äî"
    wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if wagon_str.startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"

    try:
        km_val = float(km_left)
        forecast_calc = round(km_val / 600 + 1, 1)
        km_show = f"{km_val:.0f}"
    except Exception:
        km_show = "‚Äî"
        forecast_calc = "‚Äî"

    station_show = f"{current_station} üõ§Ô∏è ({op_road})" if op_road else f"{current_station}"

    msg = (
        f"üì¶ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</b>: <code>{container}</code>\n\n"
        f"üõ§ <b>–ú–∞—Ä—à—Ä—É—Ç</b>:\n"
        f"<b>{from_station}</b> üöÇ ‚Üí <b>{to_station}</b>\n\n"
        f"üìç <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è</b>: {station_show}\n"
        f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è</b>:\n"
        f"{operation_dt} ‚Äî <i>{operation}</i>\n\n"
        f"üöÜ <b>–í–∞–≥–æ–Ω</b>: <code>{wagon_str}</code> ({wagon_type})\n"
        f"üìè <b>–û—Å—Ç–∞–ª–æ—Å—å –µ—Ö–∞—Ç—å</b>: <b>{km_show}</b> –∫–º\n\n"
        f"‚è≥ <b>–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏</b>:\n"
        f"~<b>{forecast_calc}</b> —Å—É—Ç–æ–∫ (—Ä–∞—Å—á–µ—Ç: {km_show} –∫–º / 600 –∫–º/—Å—É—Ç–∫–∏ + 1 –¥–µ–Ω—å)"
    )
    if waybill:
        msg += f"\n\nüßæ <b>–ù–∞–∫–ª–∞–¥–Ω–∞—è</b>: <code>{waybill}</code>"

    return msg


async def _fetch_latest_rows_for_containers(
    session: SessionLocal,
    containers: List[str],
) -> Tuple[List[List], List[str]]:
    """
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å (–ø–æ –¥–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö, —Å–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤)
    """
    found_rows: List[List] = []
    not_found: List[str] = []

    for container in containers:
        result = await session.execute(
            select(
                Tracking.container_number,
                Tracking.from_station,
                Tracking.to_station,
                Tracking.current_station,
                Tracking.operation,
                Tracking.operation_date,
                Tracking.waybill,
                Tracking.km_left,
                Tracking.forecast_days,
                Tracking.wagon_number,
                Tracking.operation_road,
            )
            .where(Tracking.container_number == container)
            .order_by(Tracking.operation_date.desc())
        )
        rows = result.fetchall()

        # –õ–æ–≥ –∏ –∑–∞–ø–∏—Å—å –≤ Stats
        session.add(
            Stats(
                container_number=container,
                user_id=None,   # –∑–∞–ø–æ–ª–Ω–∏–º –≤—ã—à–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ update.message
                username=None,  # –∑–∞–ø–æ–ª–Ω–∏–º –≤—ã—à–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ update.message
            )
        )

        if not rows:
            not_found.append(container)
            logger.info(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {container}")
            continue

        row = rows[0]
        found_rows.append(list(row))
        logger.info(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω: {container}")

    await session.commit()
    return found_rows, not_found


async def handle_dislocation_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    –ï–≥–æ –Ω–∞–¥–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫ MessageHandler(filters.TEXT & ~filters.COMMAND, handle_dislocation_message)
    –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –í–°–ï –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —Å—á–∏—Ç–∞–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å–æ–º –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏.
    –õ–∏–±–æ –¥–µ—Ä–≥–∞—Ç—å –∏–∑ –Ω—É–∂–Ω—ã—Ö –º–µ—Å—Ç –≤—Ä—É—á–Ω—É—é.
    """
    user = update.effective_user
    user_id = user.id if user else "‚Äî"
    user_name = user.username if user else "‚Äî"
    logger.info(f"handle_dislocation_message: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")

    if not update.message or not update.message.text:
        logger.warning(f"–ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await update.message.reply_text("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
        return

    # –†–∞–∑–±–æ—Ä –≤—Ö–æ–¥–∞
    user_input = update.message.text
    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥: {user_input}")
    containers = _parse_container_input(user_input)

    if not containers:
        await update.message.reply_text("–ù–µ –≤–∏–∂—É –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: MSCU1234567")
        return

    # –ü–æ–∏—Å–∫ –≤ –ë–î
    async with SessionLocal() as session:
        # –æ–±–Ω–æ–≤–∏–º user_id/username –≤ Stats –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º
        found_rows: List[List] = []
        not_found: List[str] = []

        for container in containers:
            result = await session.execute(
                select(
                    Tracking.container_number,
                    Tracking.from_station,
                    Tracking.to_station,
                    Tracking.current_station,
                    Tracking.operation,
                    Tracking.operation_date,
                    Tracking.waybill,
                    Tracking.km_left,
                    Tracking.forecast_days,
                    Tracking.wagon_number,
                    Tracking.operation_road,
                )
                .where(Tracking.container_number == container)
                .order_by(Tracking.operation_date.desc())
            )
            rows = result.fetchall()

            session.add(
                Stats(
                    container_number=container,
                    user_id=update.message.from_user.id,
                    username=update.message.from_user.username,
                )
            )

            if not rows:
                not_found.append(container)
                logger.info(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {container}")
                continue

            found_rows.append(list(rows[0]))
            logger.info(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω: {container}")

        await session.commit()

    # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ‚Üí Excel
    if len(containers) > 1 and found_rows:
        try:
            file_path = create_excel_file(found_rows, COLUMNS)
            filename = get_vladivostok_filename()
            with open(file_path, "rb") as f:
                await update.message.reply_document(document=f, filename=filename)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω Excel —Å –¥–∏—Å–ª–æ–∫–∞—Ü–∏–µ–π –ø–æ {len(found_rows)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)

        if not_found:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
        return

    # –û–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if found_rows:
        msg = _format_single_message(found_rows[0])
        await update.message.reply_text(msg, parse_mode=ParseMode.HTML)
        logger.info(f"–î–∏—Å–ª–æ–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {found_rows[0][0]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return

    # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
    logger.info(f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.")