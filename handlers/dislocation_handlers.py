# handlers/dislocation_handlers.py
import asyncio
import os
from telegram import Update
from telegram.ext import ContextTypes
import re
from typing import Optional, List
from sqlalchemy import select

from logger import get_logger
from db import SessionLocal
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢: –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ TerminalContainer
from models import UserRequest, Tracking
from model.terminal_container import TerminalContainer # <<< –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨
from queries.user_queries import add_user_request, register_user_if_not_exists
from queries.notification_queries import get_tracking_data_for_containers
# ‚úÖ –ò–ú–ü–û–†–¢ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò
from queries.containers import get_tracking_data_by_wagons 
from services.railway_router import get_remaining_distance_on_route
from utils.send_tracking import create_excel_file, get_vladivostok_filename
from utils.railway_utils import get_railway_abbreviation
import config
from utils.keyboards import create_single_container_excel_keyboard

logger = get_logger(__name__)

# --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–∞–≥–æ–Ω–∞ ---

def get_wagon_type_by_number(wagon_number: Optional[str | int]) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ç–∏–ø –≤–∞–≥–æ–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä–µ –Ω–æ–º–µ—Ä–∞."""
    if wagon_number is None:
        return '–Ω/–¥'
    wagon_str = str(wagon_number).removesuffix('.0').strip()
    if not wagon_str or not wagon_str[0].isdigit():
        return '–ü—Ä–æ—á–∏–π'
    first_digit = wagon_str[0]
    if first_digit == '6':
        return '–ü–æ–ª—É–≤–∞–≥–æ–Ω'
    elif first_digit == '9' or first_digit == '5':
        return '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞'
    else:
        return '–ü—Ä–æ—á–∏–π'

# <<< –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø normalize_text_input (–¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏: #wagon_input_fix) >>>
def normalize_text_input(text: str) -> list[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (11 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ –≤–∞–≥–æ–Ω–æ–≤ (8 —Ü–∏—Ñ—Ä) –∏–∑ —Ç–µ–∫—Å—Ç–∞.
    """
    text = text.upper().strip()
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    items = re.split(r'[,\s;\n]+', text)
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    normalized_items = list(set(filter(None, items)))
    
    final_items = []
    for item in normalized_items:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (4 –±—É–∫–≤—ã + 7 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä XXXU1234567)
        if re.fullmatch(r'[A-Z]{3}U\d{7}', item):
            final_items.append(item)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∞–≥–æ–Ω (8 —Ü–∏—Ñ—Ä)
        elif re.fullmatch(r'\d{8}', item):
            final_items.append(item)
            
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    return sorted(final_items)
# <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò >>>

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–µ–∑–¥–∞ ---
async def get_train_for_container(container_number: str) -> str | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ –∏–∑ terminal_containers."""
    async with SessionLocal() as session:
        result = await session.execute(
            select(TerminalContainer.train)
            .where(TerminalContainer.container_number == container_number)
            .limit(1)
        )
        train = result.scalar_one_or_none()
        return train

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---

# <<< –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø handle_message (–¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏: #wagon_handler_logic) >>>
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –∏—â–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏/–∏–ª–∏ –≤–∞–≥–æ–Ω—ã, 
    –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    message = update.message
    user = update.effective_user

    if not message or not message.text or not user:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    await register_user_if_not_exists(user)

    search_terms = normalize_text_input(message.text)
    if not search_terms:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (XXXU1234567) –∏–ª–∏ –≤–∞–≥–æ–Ω–∞ (8 —Ü–∏—Ñ—Ä) –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    query_text_log = ", ".join(search_terms)
    logger.info(f"[dislocation] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: {query_text_log}")

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await add_user_request(telegram_id=user.id, query_text=query_text_log)
    except Exception as log_err:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {log_err}", exc_info=True)

    # 1. –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –≤–∞–≥–æ–Ω—ã
    container_numbers: List[str] = [term for term in search_terms if len(term) == 11 and term[3] == 'U']
    wagon_numbers: List[str] = [term for term in search_terms if len(term) == 8 and term.isdigit()]
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ª–æ–∫–∞—Ü–∏—é
    tracking_results: List[Tracking] = []
    
    if container_numbers:
        # –ò—â–µ–º –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
        tracking_results.extend(await get_tracking_data_for_containers(container_numbers))
        
    if wagon_numbers:
        # –ò—â–µ–º –ø–æ –≤–∞–≥–æ–Ω–∞–º (–ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤ –Ω–µ–º –µ–¥—É—Ç)
        tracking_results.extend(await get_tracking_data_by_wagons(wagon_numbers))

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –∏ –ø–æ –Ω–æ–º–µ—Ä—É –≤–∞–≥–æ–Ω–∞
    unique_container_numbers = set()
    final_unique_results: List[Tracking] = []
    for result in tracking_results:
        if result.container_number not in unique_container_numbers:
            unique_container_numbers.add(result.container_number)
            final_unique_results.append(result)

    if not final_unique_results:
        await message.reply_text(f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º: {query_text_log}")
        return

    # --- –õ–æ–≥–∏–∫–∞: –û–î–ò–ù –ö–û–ù–¢–ï–ô–ù–ï–† (–¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞) ---
    if len(final_unique_results) == 1 and len(search_terms) == 1:
        result = final_unique_results[0]
        
        # --- –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ ---
        train_number = await get_train_for_container(result.container_number)
        train_display = f"–ü–æ–µ–∑–¥: `{train_number}`\n" if train_number else ""

        # --- –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è ---
        remaining_distance = await get_remaining_distance_on_route(
            start_station=result.from_station,
            end_station=result.to_station,
            current_station=result.current_station
        )
        km_left_display = None
        forecast_days_display = 0.0
        source_log_tag = "–ù/–î"
        distance_label = "–û—Å—Ç–∞–ª–æ—Å—å –∫–º (–ë–î):"

        if remaining_distance is not None:
            source_log_tag = "–†–ê–°–ß–ï–¢"
            km_left_display = remaining_distance
            forecast_days_display = round(remaining_distance / 600 + 1, 1) if remaining_distance > 0 else 0.0
            distance_label = "–¢–∞—Ä–∏—Ñ–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:"
        else:
            source_log_tag = "–ë–î (Fallback)"
            km_left_display = result.km_left
            forecast_days_display = result.forecast_days or 0.0
            distance_label = "–û—Å—Ç–∞–ª–æ—Å—å –∫–º (–ë–î):"

        logger.info(f"[dislocation] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {result.container_number}: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ ({km_left_display} –∫–º) –≤–∑—è—Ç–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_log_tag}")

        wagon_number_raw = result.wagon_number
        wagon_number_cleaned = str(wagon_number_raw).removesuffix('.0') if wagon_number_raw else '–Ω/–¥'
        wagon_type_display = get_wagon_type_by_number(wagon_number_raw)
        railway_abbreviation = get_railway_abbreviation(result.operation_road)

        # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---
        response_text = (
            f"üì¶ **–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {result.container_number}**\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üìç *–ú–∞—Ä—à—Ä—É—Ç:*\n"
            f"{train_display}" 
            f"–û—Ç–ø—Ä: `{result.from_station}`\n"
            f"–ù–∞–∑–Ω: `{result.to_station}`\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üöÇ *–¢–µ–∫—É—â–∞—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏—è:*\n"
            f"**–°—Ç–∞–Ω—Ü–∏—è:** {result.current_station} (–î–æ—Ä–æ–≥–∞: `{railway_abbreviation}`)\n"
            f"**–û–ø–µ—Ä–∞—Ü–∏—è:** `{result.operation}`\n"
            f"**–î–∞—Ç–∞/–í—Ä–µ–º—è:** `{result.operation_date}`\n"
            f"**–í–∞–≥–æ–Ω:** `{wagon_number_cleaned}` (–¢–∏–ø: `{wagon_type_display}`)\n"
            f"**–ù–∞–∫–ª–∞–¥–Ω–∞—è:** `{result.waybill}`\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"üõ£Ô∏è *–ü—Ä–æ–≥–Ω–æ–∑:*\n"
            f"**{distance_label}** **{km_left_display or '–Ω/–¥'} –∫–º**\n"
            f"**–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏):** `{forecast_days_display:.1f} –¥–Ω.`"
        )

        await message.reply_markdown(
            response_text,
            reply_markup=create_single_container_excel_keyboard(result.container_number)
        )

    # --- –õ–æ–≥–∏–∫–∞: –ú–ù–û–ì–û –ö–û–ù–¢–ï–ô–ù–ï–†–û–í/–í–ê–ì–û–ù–û–í (–û—Ç–≤–µ—Ç Excel) ---
    else:
        final_report_data = []
        EXCEL_HEADERS = [
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–í–∞–≥–æ–Ω',
            '–¢–∏–ø –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        ]
        excel_columns = EXCEL_HEADERS
        for db_row in final_unique_results: 
            recalculated_distance = await get_remaining_distance_on_route(
                start_station=db_row.from_station,
                end_station=db_row.to_station,
                current_station=db_row.current_station
            )
            km_left = recalculated_distance if recalculated_distance is not None else db_row.km_left
            source_tag = "–†–ê–°–ß–ï–¢" if recalculated_distance is not None else "–ë–î"
            logger.info(f"[dislocation] –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {db_row.container_number}: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ ({km_left} –∫–º) –≤–∑—è—Ç–æ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_tag}")
            wagon_number_raw = db_row.wagon_number
            wagon_number_cleaned = str(wagon_number_raw).removesuffix('.0') if wagon_number_raw else None
            wagon_type_for_excel = get_wagon_type_by_number(wagon_number_raw)
            railway_display_name = db_row.operation_road
            excel_row = [
                 db_row.container_number, db_row.from_station, db_row.to_station,
                 db_row.current_station, db_row.operation, db_row.operation_date,
                 db_row.waybill, km_left,
                 wagon_number_cleaned, wagon_type_for_excel, railway_display_name,
             ]
            final_report_data.append(excel_row)

        file_path = None
        try:
             file_path = await asyncio.to_thread(
                 create_excel_file,
                 final_report_data,
                 excel_columns
             )
             filename = get_vladivostok_filename(prefix="–î–∏—Å–ª–æ–∫–∞—Ü–∏—è")
             with open(file_path, "rb") as f:
                 await message.reply_document(
                     document=f,
                     filename=filename,
                     caption=f"–ù–∞–π–¥–µ–Ω–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏—è –ø–æ {len(final_unique_results)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º/–≤–∞–≥–æ–Ω–∞–º."
                 )
             logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω Excel –æ—Ç—á–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        except Exception as send_err:
             logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {send_err}", exc_info=True)
             await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Excel —Ñ–∞–π–ª.")
        finally:
             if file_path and os.path.exists(file_path):
                 try:
                     os.remove(file_path)
                 except OSError as e:
                      logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")

# <<< –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò handle_message >>>


async def handle_single_container_excel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel-–æ—Ç—á–µ—Ç–∞ –ø–æ –æ–¥–Ω–æ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É.
    """
    query = update.callback_query
    if not query or not query.data or not query.data.startswith("get_excel_single_") or not update.effective_user:
        return
    await query.answer("‚è≥ –ì–æ—Ç–æ–≤–ª—é Excel-–æ—Ç—á–µ—Ç...")
    container_number = query.data.split("_")[-1]
    user = update.effective_user
    logger.info(f"[dislocation] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª Excel –¥–ª—è {container_number} —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
    tracking_results = await get_tracking_data_for_containers([container_number])
    if not tracking_results:
        if query.message and query.message.text:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel.")
        elif query.message:
             await context.bot.send_message(user.id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel.")
        return

    db_row = tracking_results[0]
    recalculated_distance = await get_remaining_distance_on_route(
        start_station=db_row.from_station,
        end_station=db_row.to_station,
        current_station=db_row.current_station
    )
    km_left = recalculated_distance if recalculated_distance is not None else db_row.km_left
    wagon_number_raw = db_row.wagon_number
    wagon_number_cleaned = str(wagon_number_raw).removesuffix('.0') if wagon_number_raw else None
    wagon_type_for_excel = get_wagon_type_by_number(wagon_number_raw)
    railway_display_name = db_row.operation_road
    EXCEL_HEADERS = [
        '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
        '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
        '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–í–∞–≥–æ–Ω',
        '–¢–∏–ø –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
    ]
    final_report_data = [[
         db_row.container_number, db_row.from_station, db_row.to_station,
         db_row.current_station, db_row.operation, db_row.operation_date,
         db_row.waybill, km_left,
         wagon_number_cleaned, wagon_type_for_excel, railway_display_name,
     ]]
    file_path = None
    try:
         file_path = await asyncio.to_thread(
             create_excel_file,
             final_report_data,
             EXCEL_HEADERS
         )
         filename = get_vladivostok_filename(prefix=container_number)
         with open(file_path, "rb") as f:
              await context.bot.send_document(
                 chat_id=user.id,
                 document=f,
                 filename=filename,
                 caption=f"‚úÖ –û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É {container_number}."
             )
         logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω Excel –æ—Ç—á–µ—Ç –¥–ª—è {container_number} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
         if query.message and query.message.text:
             await query.edit_message_reply_markup(reply_markup=None)

    except Exception as send_err:
         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {send_err}", exc_info=True)
         await context.bot.send_message(user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Excel —Ñ–∞–π–ª.")
    finally:
         if file_path and os.path.exists(file_path):
             try:
                 os.remove(file_path)
             except OSError as e:
                  logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")