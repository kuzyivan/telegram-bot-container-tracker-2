# handlers/dislocation_handlers.py
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
import re
from typing import List

from logger import get_logger
from db import SessionLocal
from models import Stats, Tracking
from queries.containers import get_latest_train_by_container, get_latest_tracking_data, get_tracking_data_by_wagons
from services.railway_router import get_remaining_distance_on_route

logger = get_logger(__name__)

def _fmt_num(x):
    try:
        f = float(x)
        if f.is_integer(): return str(int(f))
        return str(f)
    except (ValueError, TypeError): return str(x)

def detect_wagon_type(wagon_number: str) -> str:
    try:
        num = int(str(wagon_number)[:2])
    except (ValueError, TypeError): return "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
    if 60 <= num <= 69: return "–ø–æ–ª—É–≤–∞–≥–æ–Ω"
    return "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"

def _are_all_tokens_wagons(tokens: List[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã 8-–∑–Ω–∞—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏."""
    if not tokens:
        return False
    return all(t.isdigit() and len(t) == 8 for t in tokens)

COLUMNS = [
    '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–ü–æ–µ–∑–¥', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
    '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π',
    '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)', '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
]

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or not update.message.from_user:
        return

    user_id = update.message.from_user.id
    user_name = update.message.from_user.username or "‚Äî"
    text = update.message.text.strip()
    
    logger.info(f"[dislocation] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: {text}")
    
    input_tokens = [c.strip().upper() for c in re.split(r'[\s,\n.]+', text) if c]
    
    if not input_tokens:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–ª–∏ –≤–∞–≥–æ–Ω–∞.")
        return

    if _are_all_tokens_wagons(input_tokens):
        wagon_numbers = input_tokens
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –≤–∞–≥–æ–Ω–∞(–æ–≤): {', '.join(wagon_numbers)}")
        
        tracking_results = await get_tracking_data_by_wagons(wagon_numbers)
        
        if not tracking_results:
            await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–∞ –≤–∞–≥–æ–Ω–∞—Ö: `{', '.join(wagon_numbers)}`.", parse_mode=ParseMode.MARKDOWN)
            return
            
        if len(wagon_numbers) > 1:
            rows_for_excel = []
            for tracking_obj in tracking_results:
                train = await get_latest_train_by_container(tracking_obj.container_number) or ""
                remaining_distance = await get_remaining_distance_on_route(
                    start_station=tracking_obj.from_station,
                    end_station=tracking_obj.to_station,
                    current_station=tracking_obj.current_station
                )
                km_left = remaining_distance if remaining_distance is not None else tracking_obj.km_left
                forecast_days = round(float(km_left or 0) / 600 + 1, 1) if km_left and float(km_left or 0) > 0 else 0.0
                
                rows_for_excel.append([
                    tracking_obj.container_number, train,
                    tracking_obj.from_station, tracking_obj.to_station,
                    tracking_obj.current_station, tracking_obj.operation, tracking_obj.operation_date,
                    tracking_obj.waybill, km_left, forecast_days,
                    _fmt_num(tracking_obj.wagon_number), tracking_obj.operation_road,
                ])
            
            from utils.send_tracking import create_excel_file, get_vladivostok_filename
            
            filename_prefix = f"–í–∞–≥–æ–Ω—ã_{'-'.join(wagon_numbers[:3])}"
            caption = f"–ù–∞ –≤–∞–≥–æ–Ω–∞—Ö `{', '.join(wagon_numbers)}` –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(rows_for_excel)} —à—Ç."

            file_path = create_excel_file(rows_for_excel, COLUMNS)
            filename = get_vladivostok_filename(filename_prefix)

            with open(file_path, "rb") as f:
                await update.message.reply_document(document=f, filename=filename, caption=caption, parse_mode=ParseMode.MARKDOWN)
            return
        else:
            wagon_number = wagon_numbers[0]
            first_container = tracking_results[0]
            train = await get_latest_train_by_container(first_container.container_number) or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

            header_lines = [
                f"üöÜ *–í–∞–≥–æ–Ω*: `{wagon_number}` ({detect_wagon_type(wagon_number)})",
                f"üìç *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è*: `{first_container.current_station}` üõ§Ô∏è ({first_container.operation_road})",
                f"üìÖ *–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è*: {first_container.operation_date} ‚Äî _{first_container.operation}_",
            ]
            if train != "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω":
                header_lines.append(f"üöÇ *–ü–æ–µ–∑–¥*: `{train}`")
            
            message = "\n".join(header_lines)
            message += f"\n\n–ù–∞ –≤–∞–≥–æ–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: *{len(tracking_results)}* —à—Ç."
            message += "\n" + ("-"*20)

            for tracking_obj in tracking_results:
                remaining_distance = await get_remaining_distance_on_route(
                    start_station=tracking_obj.from_station,
                    end_station=tracking_obj.to_station,
                    current_station=tracking_obj.current_station
                )
                km_left = remaining_distance if remaining_distance is not None else tracking_obj.km_left
                forecast_days = round(float(km_left or 0) / 600 + 1, 1) if km_left and float(km_left or 0) > 0 else 0.0
                
                container_part = (
                    f"\n\nüì¶ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä*: `{tracking_obj.container_number}`\n"
                    f"üõ§ *–ú–∞—Ä—à—Ä—É—Ç*: `{tracking_obj.from_station}` ‚Üí `{tracking_obj.to_station}`\n"
                    f"üìè *–û—Å—Ç–∞–ª–æ—Å—å –µ—Ö–∞—Ç—å*: {_fmt_num(km_left)} –∫–º (~{_fmt_num(forecast_days)} —Å—É—Ç–æ–∫)"
                )
                message += container_part
            
            await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
            return

    else:
        container_numbers = input_tokens
        found_rows = []
        not_found = []

        async with SessionLocal() as session:
            for container_number in container_numbers:
                rows = await get_latest_tracking_data(container_number)
                stats_record = Stats(container_number=container_number, user_id=user_id, username=user_name)
                session.add(stats_record)
                await session.commit()
                if not rows:
                    not_found.append(container_number)
                    continue
                found_rows.append(rows[0])

        if len(container_numbers) > 1 and found_rows:
            try:
                rows_for_excel = []
                # <<< –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –í–û –í–¢–û–†–û–ú –ë–õ–û–ö–ï >>>
                for tracking_obj in found_rows:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
                    train = await get_latest_train_by_container(tracking_obj.container_number) or ""
                    remaining_distance = await get_remaining_distance_on_route(
                        start_station=tracking_obj.from_station,
                        end_station=tracking_obj.to_station,
                        current_station=tracking_obj.current_station
                    )
                    km_left = remaining_distance if remaining_distance is not None else tracking_obj.km_left
                    # –ü—Ä–∏–≤–æ–¥–∏–º km_left –∫ float –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    forecast_days = round(float(km_left or 0) / 600 + 1, 1) if km_left and float(km_left or 0) > 0 else 0.0
                    rows_for_excel.append([
                        tracking_obj.container_number, train,
                        tracking_obj.from_station, tracking_obj.to_station,
                        tracking_obj.current_station, tracking_obj.operation, tracking_obj.operation_date,
                        tracking_obj.waybill, km_left, forecast_days,
                        _fmt_num(tracking_obj.wagon_number), tracking_obj.operation_road,
                    ])
                # <<< –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô >>>

                from utils.send_tracking import create_excel_file, get_vladivostok_filename
                file_path = create_excel_file(rows_for_excel, COLUMNS)
                filename = get_vladivostok_filename()
                with open(file_path, "rb") as f:
                    await update.message.reply_document(document=f, filename=filename)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)

            if not_found:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
            return

        if found_rows:
            tracking_obj = found_rows[0]
            train = await get_latest_train_by_container(tracking_obj.container_number)
            wagon_number_str = str(tracking_obj.wagon_number) if tracking_obj.wagon_number else "‚Äî"
            wagon_type = detect_wagon_type(wagon_number_str)
            
            km_left_val = tracking_obj.km_left
            distance_str = f"üìè *–û—Å—Ç–∞–ª–æ—Å—å –µ—Ö–∞—Ç—å (–ø–æ –¥–∞–Ω–Ω—ã–º –≠–¢–†–ê–ù)*: *{_fmt_num(km_left_val)}* –∫–º\n"

            remaining_distance = await get_remaining_distance_on_route(
                start_station=tracking_obj.from_station,
                end_station=tracking_obj.to_station,
                current_station=tracking_obj.current_station
            )
            
            if remaining_distance is not None:
                distance_str = f"üöÜ *–û—Å—Ç–∞–ª–æ—Å—å –µ—Ö–∞—Ç—å (—Ä–∞—Å—á–µ—Ç –ø–æ OSM)*: *{_fmt_num(remaining_distance)}* –∫–º\n"
                km_left_val = remaining_distance

            try:
                km_float = float(km_left_val) if km_left_val is not None else 0.0
                forecast_days_calc = round(km_float / 600 + 1, 1) if km_float > 0 else 0
            except (ValueError, TypeError):
                forecast_days_calc = "‚Äî"

            operation_station = f"`{tracking_obj.current_station}` üõ§Ô∏è ({tracking_obj.operation_road})" if tracking_obj.operation_road else f"`{tracking_obj.current_station}`"
            header = f"üì¶ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä*: `{tracking_obj.container_number}`\n"
            if train:
                header += f"üöÇ *–ü–æ–µ–∑–¥*: `{train}`\n"
            msg = (
                f"{header}\n"
                f"üõ§ *–ú–∞—Ä—à—Ä—É—Ç*:\n`{tracking_obj.from_station}` üöÇ ‚Üí `{tracking_obj.to_station}`\n\n"
                f"üìç *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è*: {operation_station}\n"
                f"üìÖ *–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è*:\n{tracking_obj.operation_date} ‚Äî _{tracking_obj.operation}_\n\n"
                f"üöÜ *–í–∞–≥–æ–Ω*: `{_fmt_num(wagon_number_str)}` ({wagon_type})\n"
                f"{distance_str}\n"
                f"‚è≥ *–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏*:\n~*{_fmt_num(forecast_days_calc)}* —Å—É—Ç–æ–∫"
            )
            await update.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)
            return

        if not_found:
            await update.message.reply_text(f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –Ω–æ–º–µ—Ä–∞–º: {', '.join(not_found)}")