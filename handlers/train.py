# handlers/train.py
from __future__ import annotations
from telegram import Update
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)

from config import ADMIN_CHAT_ID
from logger import get_logger
from queries.train_queries import get_train_summary, get_train_latest_status
import re

logger = get_logger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
ASK_TRAIN = range(1)

_train_re = re.compile(r"^[k–∫]\s*(\d{2})\s*[-‚Äì‚Äî ]?\s*(\d{3})$", re.IGNORECASE)

def normalize_train_no(text: str) -> str | None:
    if not text:
        return None
    s = text.strip()
    m = _train_re.match(s)
    if not m:
        return None
    return f"–ö{m.group(1)}-{m.group(2)}"


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ /train ---
async def train_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(
        "[/train] received from id=%s username=%s args=%s",
        getattr(user, "id", None),
        getattr(user, "username", None),
        context.args,
    )

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ update.message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not update.message:
        logger.warning("[/train] train_cmd called without a message.")
        return

    if not user or user.id != ADMIN_CHAT_ID:
        logger.warning("[/train] access denied for id=%s", getattr(user, "id", None))
        return

    args = context.args or []
    if args:
        raw = " ".join(args)
        train_no = normalize_train_no(raw) or raw.strip()
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ü–µ—Ä–µ–¥–∞–µ–º 'update.message' –≤–º–µ—Å—Ç–æ 'update' –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        return await _respond_train_report(update.message, train_no)

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ (–ø—Ä–∏–º–µ—Ä: –ö25-076)."
    )
    return ASK_TRAIN


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º –ø–æ–µ–∑–¥–∞ ---
async def train_ask_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ update.message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not update.message:
        logger.warning("[/train] train_ask_handler called without a message.")
        return ConversationHandler.END

    user = update.effective_user
    if not user or user.id != ADMIN_CHAT_ID:
        return ConversationHandler.END

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ update.message.text —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    raw = (update.message.text or "").strip()
    train_no = normalize_train_no(raw)
    if not train_no:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ö25-076. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return ASK_TRAIN

    return await _respond_train_report(update.message, train_no)


# --- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ ---
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–±—ä–µ–∫—Ç Message, –∞ –Ω–µ Update, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –Ω–∏–º
async def _respond_train_report(message, train_no: str):
    logger.info("[/train] train_no(normalized)=%s", train_no)
    try:
        summary_rows = await get_train_summary(train_no)
        if not summary_rows:
            await message.reply_html(f"–ü–æ–µ–∑–¥ ¬´<b>{train_no}</b>¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            logger.info("[/train] no rows for train=%s", train_no)
            return ConversationHandler.END

        latest = await get_train_latest_status(train_no)
        logger.debug("[/train] latest_status=%s", latest)

        lines = [f"üöÜ –ü–æ–µ–∑–¥: <b>{train_no}</b>", "‚îÄ‚îÄ‚îÄ", "<b>–°–≤–æ–¥–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º:</b>"]
        for client, cnt in summary_rows:
            lines.append(f"‚Ä¢ {client or '–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞'} ‚Äî <b>{cnt}</b>")

        if latest:
            ctn, operation, station, op_date, wagon, road = latest
            lines += ["‚îÄ‚îÄ‚îÄ", "<b>–î–∏—Å–ª–æ–∫–∞—Ü–∏—è –ø–æ–µ–∑–¥–∞ (–ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤):</b>", f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: <code>{ctn}</code>"]
            if operation: lines.append(f"–û–ø–µ—Ä–∞—Ü–∏—è: {operation}")
            if station: lines.append(f"–°—Ç–∞–Ω—Ü–∏—è: {station}")
            if op_date: lines.append(f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {op_date}")
            if wagon: lines.append(f"–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {str(wagon).removesuffix('.0')}")
            if road: lines.append(f"–î–æ—Ä–æ–≥–∞: {road}")

        await message.reply_html("\n".join(lines), disable_web_page_preview=True)
        logger.info("[/train] reply sent for train=%s", train_no)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /train –¥–ª—è train=%s: %s", train_no, e)
        try:
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–µ–∑–¥—É.")
        except Exception:
            pass
    return ConversationHandler.END

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---
def setup_handlers(app):
    conv = ConversationHandler(
        entry_points=[CommandHandler("train", train_cmd)],
        states={
            ASK_TRAIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, train_ask_handler)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(conv)
    logger.info("‚úÖ handlers.train.setup_handlers: /train (conversation) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")