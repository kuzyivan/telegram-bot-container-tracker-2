from __future__ import annotations
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler

from config import ADMIN_CHAT_ID
from logger import get_logger
from queries.train_queries import get_train_summary, get_train_latest_status

logger = get_logger(__name__)

async def train_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info("[/train] received from id=%s username=%s args=%s",
                getattr(user, "id", None), getattr(user, "username", None), context.args)

    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
    if not user or user.id != ADMIN_CHAT_ID:
        logger.warning("[/train] access denied for id=%s", getattr(user, "id", None))
        return

    args = context.args or []
    if not args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞: /train –ö25-073")
        return

    train_no = " ".join(args).strip()
    logger.info("[/train] train_no=%s", train_no)

    try:
        summary_rows = await get_train_summary(train_no)
        if not summary_rows:
            await update.message.reply_html(f"–ü–æ–µ–∑–¥ ¬´<b>{train_no}</b>¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            logger.info("[/train] no rows for train=%s", train_no)
            return

        latest = await get_train_latest_status(train_no)
        logger.debug("[/train] latest_status=%s", latest)

        lines = [f"üöÜ –ü–æ–µ–∑–¥: <b>{train_no}</b>", "‚îÄ‚îÄ‚îÄ", "<b>–°–≤–æ–¥–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º (–∫–æ–ª-–≤–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤):</b>"]
        for client, cnt in summary_rows:
            lines.append(f"‚Ä¢ {client or '–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞'} ‚Äî <b>{cnt}</b>")

        if latest:
            ctn, operation, station, op_date, wagon, road = latest
            lines += [
                "‚îÄ‚îÄ‚îÄ",
                "<b>–î–∏—Å–ª–æ–∫–∞—Ü–∏—è –ø–æ–µ–∑–¥–∞ (–ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤):</b>",
                f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: <code>{ctn}</code>",
                f"–û–ø–µ—Ä–∞—Ü–∏—è: {operation or '‚Äî'}",
                f"–°—Ç–∞–Ω—Ü–∏—è: {station or '‚Äî'}",
                f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {op_date or '‚Äî'}",
            ]
            if wagon:
                lines.append(f"–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞: {wagon}")
            if road:
                lines.append(f"–î–æ—Ä–æ–≥–∞: {road}")

        await update.message.reply_html("\n".join(lines), disable_web_page_preview=True)
        logger.info("[/train] reply sent for train=%s", train_no)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /train –¥–ª—è train=%s: %s", train_no, e)
        # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –º–æ–ª—á–∞—Ç—å
        try:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–µ–∑–¥—É. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")
        except Exception:
            pass


def setup_handlers(app):
    app.add_handler(CommandHandler("train", train_cmd))
    logger.info("‚úÖ handlers.train.setup_handlers: /train –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")