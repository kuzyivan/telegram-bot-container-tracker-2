# handlers/train.py

from __future__ import annotations
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler
)

from config import ADMIN_CHAT_ID
from logger import get_logger
import re

# 1. –ò–ó–ú–ï–ù–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ –ó–ê–ü–†–û–°–û–í
from queries.train_queries import (
    get_train_client_summary_by_code, 
    get_first_container_in_train,
    get_all_train_codes
) 
from queries.containers import get_latest_tracking_data
from utils.railway_utils import get_railway_abbreviation

logger = get_logger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
ASK_TRAIN = range(1)

_train_re = re.compile(r"^[k–∫]\s*(\d{2})\s*[-‚Äì‚Äî ]?\s*(\d{3})$", re.IGNORECASE)

def normalize_train_no(text: str) -> str | None:
    if not text:
        return None
    s = text.strip()
    m = _train_re.match(s)
    if not m:
        return None
    return f"–ö{m.group(1)}-{m.group(2)}"


# --- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ (–û–ë–ù–û–í–õ–ï–ù–ê) ---
async def _respond_train_report(message, train_no: str):
    logger.info("[/train] train_no(normalized)=%s", train_no)
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
    summary_rows_dict = await get_train_client_summary_by_code(train_no)

    # 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏—Å–ª–æ–∫–∞—Ü–∏—é –ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    latest = None
    example_ctn = await get_first_container_in_train(train_no)
    
    if example_ctn:
        # get_latest_tracking_data –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Sequence[Tracking] (—Å–ø–∏—Å–æ–∫)
        latest_tracking_list = await get_latest_tracking_data(example_ctn)
        if latest_tracking_list:
            latest = latest_tracking_list[0] # –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å
    
    logger.debug("[/train] latest_status=%s", latest)

    # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞
    lines = [f"üöÜ –ü–æ–µ–∑–¥: *{train_no}*", "‚îÄ‚îÄ‚îÄ"]

    if summary_rows_dict:
        lines.append("üì¶ *–°–≤–æ–¥–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º:*")
        for client, cnt in summary_rows_dict.items():
            lines.append(f"‚Ä¢ {client or '–ë–µ–∑ –∫–ª–∏–µ–Ω—Ç–∞'} ‚Äî *{cnt}*")
    else:
        lines.append("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–µ–∑–¥–∞ –≤ –±–∞–∑–µ *TerminalContainer* –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    if latest:
        # –í —ç—Ç–æ–º –±–ª–æ–∫–µ latest - —ç—Ç–æ –æ–±—ä–µ–∫—Ç Tracking (–∏–∑ —Å–ø–∏—Å–∫–∞)
        lines += ["‚îÄ‚îÄ‚îÄ", "*–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏—è –ø–æ–µ–∑–¥–∞ (–ø–æ –æ–¥–Ω–æ–º—É –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤):*", f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: `{latest.container_number}`"]
        
        # ‚ùóÔ∏è –ù–û–í–û–ï: –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–ê–ù–¶–ò–Æ –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø
        lines.append(f"–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: `{latest.to_station or '–Ω/–¥'}`")
        
        if latest.current_station: 
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_railway_abbreviation –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Ä–æ–≥–∏
            railway_abbr = get_railway_abbreviation(latest.operation_road) 
            lines.append(f"–î–∏—Å–ª–æ–∫–∞—Ü–∏—è: —Å—Ç. *{latest.current_station}* (–î–æ—Ä–æ–≥–∞: `{railway_abbr}`)")
        
        if latest.operation: 
            lines.append(f"–û–ø–µ—Ä–∞—Ü–∏—è: *{latest.operation}*")
        
        if latest.operation_date: 
            lines.append(f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: `{latest.operation_date}`")

    elif summary_rows_dict:
        lines.append("\n‚ö†Ô∏è –î–∏—Å–ª–æ–∫–∞—Ü–∏—è –ø–æ–µ–∑–¥–∞ (Tracking) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


    try:
        await message.reply_text("\n".join(lines), parse_mode='Markdown')
        logger.info("[/train] reply sent for train=%s", train_no)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ /train –¥–ª—è train=%s: %s", train_no, e)
        try:
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–µ–∑–¥—É.")
        except Exception:
            pass
            
    return ConversationHandler.END


# --- –ù–û–í–´–ï –•–ï–ù–î–õ–ï–†–´: –°–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ ---

async def show_train_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤ –≤ –≤–∏–¥–µ Inline-–∫–Ω–æ–ø–æ–∫."""
    user = update.effective_user
    if not user or user.id != ADMIN_CHAT_ID:
        return ConversationHandler.END
        
    train_codes = await get_all_train_codes()
    
    if not train_codes:
        text = "‚ö†Ô∏è –í –±–∞–∑–µ *TerminalContainer* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–µ–∑–¥–æ–≤."
        await update.effective_message.reply_text(text, parse_mode='Markdown')
        return ConversationHandler.END

    text = "üöÜ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏:*"
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏: –ø–æ 3 –≤ —Ä—è–¥ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
    row = []
    for code in train_codes:
        # data –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å 'train_code_' –∏ —Å–∞–º –∫–æ–¥ –ø–æ–µ–∑–¥–∞
        row.append(InlineKeyboardButton(code, callback_data=f"train_code_{code}"))
        if len(row) == 3: # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            keyboard.append(row)
            row = []
    if row: # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
        keyboard.append(row)
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    elif update.callback_query and update.callback_query.message:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥–ª–æ –±—ã—Ç—å "–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤..."
        await update.callback_query.message.edit_text(
            text, 
            reply_markup=reply_markup, 
            parse_mode='Markdown'
        )
        
    return ConversationHandler.END

async def handle_train_code_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –ø–æ–µ–∑–¥–∞."""
    query = update.callback_query
    if not query or not query.data or not query.data.startswith("train_code_") or not query.message:
        return
        
    await query.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –æ—Ç—á–µ—Ç...")
    train_no = query.data.split("_")[-1]
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await query.message.edit_text(f"‚è≥ –ì–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç –ø–æ –ø–æ–µ–∑–¥—É *{train_no}*...", parse_mode='Markdown')
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ—Ç—á–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º query.message)
    return await _respond_train_report(query.message, train_no)


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ /train (–ò–ó–ú–ï–ù–ï–ù–ê) ---
async def train_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /train.
    –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç—á–µ—Ç.
    –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤.
    """
    user = update.effective_user
    logger.info(
        "[/train] received from id=%s username=%s args=%s",
        getattr(user, "id", None),
        getattr(user, "username", None),
        context.args,
    )

    if not user or user.id != ADMIN_CHAT_ID:
        logger.warning("[/train] access denied for id=%s", getattr(user, "id", None))
        return ConversationHandler.END

    args = context.args or []
    if args:
        raw = " ".join(args)
        train_no = normalize_train_no(raw) or raw.strip()
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã - —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        return await _respond_train_report(update.message, train_no)

    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–≤
    return await show_train_list(update, context)


async def train_ask_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–∞ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞."""
    user = update.effective_user
    if not user or user.id != ADMIN_CHAT_ID or not update.message or not update.message.text:
        return ConversationHandler.END

    train_no_raw = update.message.text.strip()
    train_no = normalize_train_no(train_no_raw) or train_no_raw

    await update.message.reply_text(f"‚è≥ –ì–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç –ø–æ –ø–æ–µ–∑–¥—É *{train_no}*...", parse_mode='Markdown')
    
    return await _respond_train_report(update.message, train_no)


# --- –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–î–û–ü–û–õ–ù–ï–ù–ê) ---

def setup_handlers(app):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–µ–∑–¥–∞–º–∏.
    """
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è CallbackQuery
    app.add_handler(
        CallbackQueryHandler(
            handle_train_code_callback, 
            pattern="^train_code_"
        )
    )
    
    # ConversationHandler –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–∞
    conv = ConversationHandler(
        entry_points=[CommandHandler("train", train_cmd)],
        states={
            ASK_TRAIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, train_ask_handler)], 
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(conv)
    
    logger.info("‚úÖ handlers.train.setup_handlers: /train (–º–µ–Ω—é/conversation/callback) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")