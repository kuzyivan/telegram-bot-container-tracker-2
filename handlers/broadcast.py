# handlers/broadcast.py
import asyncio
import html
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, Message
from telegram.error import BadRequest, Forbidden, ChatMigrated # –î–æ–±–∞–≤–ª–µ–Ω Forbidden
from telegram.ext import (
    ContextTypes, ConversationHandler,
    CommandHandler, MessageHandler, CallbackQueryHandler, filters
)

from logger import get_logger
from config import ADMIN_CHAT_ID
# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_all_user_ids –∏–∑ queries.user_queries, –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
from queries.user_queries import get_all_user_ids 

logger = get_logger(__name__)

BROADCAST_TEXT, BROADCAST_CONFIRM = range(2)

async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    user = update.effective_user
    chat = update.effective_chat
    
    if not user or not chat:
        return ConversationHandler.END

    # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–î–ú–ò–ù-–ü–†–û–í–ï–†–ö–£ (–ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
    if user.id != ADMIN_CHAT_ID:
        if update.message:
            await chat.send_message("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        elif update.callback_query:
            await update.callback_query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return ConversationHandler.END

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—ã
    logger.info(f"[/broadcast] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏.")

    text = "üì£ **–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.**\n\n" \
           "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML/Markdown. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª CallbackQuery, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.answer()
        if update.callback_query.message:
            await update.callback_query.message.edit_text(text, parse_mode='Markdown')
        else:
             await chat.send_message(text, parse_mode='Markdown')
    else:
        await chat.send_message(text, parse_mode='Markdown')
        
    return BROADCAST_TEXT


async def broadcast_get_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä)."""
    message = update.message
    if not message or not message.text:
        if message:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return BROADCAST_TEXT

    text = message.text
    if context.user_data is None:
        context.user_data = {}
    context.user_data['broadcast_text'] = text
    
    logger.info(f"[/broadcast] –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text[:50]}...")

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üöÄ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
        ]
    ])
    
    # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú HTML –î–õ–Ø –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê
    safe_text_preview = html.escape(text)
    
    await message.reply_text(
        f"<b>–¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n<pre>{safe_text_preview}</pre>\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    return BROADCAST_CONFIRM

async def broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –æ—à–∏–±–æ–∫."""
    query = update.callback_query
    if not query or not query.message:
        return ConversationHandler.END
    await query.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

    if query.data == "cancel_broadcast":
        await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        if context.user_data: context.user_data.clear()
        return ConversationHandler.END

    # <<< –ù–ê–ß–ê–õ–û –õ–û–ì–ò–ö–ò –û–¢–ü–†–ê–í–ö–ò >>>
    user_data = context.user_data or {}
    text = user_data.get('broadcast_text')
    
    if not text:
        await query.edit_message_text("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        if context.user_data: context.user_data.clear()
        return ConversationHandler.END

    # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú queries.user_queries.get_all_user_ids()
    user_ids = await get_all_user_ids()
    sent_count = 0
    failed_count = 0
    blocked_count = 0
    
    await query.edit_message_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    logger.info(f"[BROADCAST_SEND] –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    for user_id in set(user_ids):
        try:
            # 1. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await context.bot.send_message(chat_id=user_id, text=text, parse_mode='HTML')
            sent_count += 1
            await asyncio.sleep(0.1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram
        
        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ Telegram API
        except Forbidden:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            blocked_count += 1
            failed_count += 1
            logger.warning(f"[BROADCAST_FAIL] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ (Forbidden).")
        except BadRequest as e:
            error_str = str(e)
            if "Chat not found" in error_str or "User not found" in error_str:
                # –ß–∞—Ç/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                failed_count += 1
                logger.warning(f"[BROADCAST_FAIL] –ß–∞—Ç/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (Chat not found/User not found).")
            elif "Can't parse entities" in error_str:
                # –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML
                logger.warning(f"[BROADCAST_RETRY] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –¥–ª—è {user_id}. –ü—Ä–æ–±—É—é –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.")
                try:
                    await context.bot.send_message(chat_id=user_id, text=text)
                    sent_count += 1 # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                except Exception as plain_e:
                    failed_count += 1
                    logger.error(f"[BROADCAST_FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id} –¥–∞–∂–µ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç: {plain_e}")
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ BadRequest (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
                failed_count += 1
                logger.warning(f"[BROADCAST_FAIL] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
        except ChatMigrated as e:
            # –ß–∞—Ç –±—ã–ª –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω (—Ä–µ–¥–∫–æ)
            failed_count += 1
            logger.warning(f"[BROADCAST_WARN] –ß–∞—Ç {user_id} –º–∏–≥—Ä–∏—Ä–æ–≤–∞–ª –≤ {e.new_chat_id}. –ü—Ä–æ–ø—É—Å–∫.")
        except Exception as e:
            # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ (—Å–µ—Ç—å, —Ç–∞–π–º–∞—É—Ç –∏ —Ç.–¥.)
            failed_count += 1
            logger.error(f"[BROADCAST_ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)


    logger.info(f"[BROADCAST_SEND] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {sent_count}, –û—à–∏–±–∫–∏: {failed_count} (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_count})")
    
    await query.edit_message_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count}\n"
        f"(–ò–∑ –Ω–∏—Ö –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {blocked_count})"
    )
    
    if context.user_data: context.user_data.clear()
    return ConversationHandler.END

async def broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if update.message:
        await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    if context.user_data: context.user_data.clear()
    return ConversationHandler.END

# –ì–ª–∞–≤–Ω—ã–π ConversationHandler
broadcast_conversation_handler = ConversationHandler(
    entry_points=[
        CommandHandler("broadcast", broadcast_start),
        CallbackQueryHandler(broadcast_start, pattern="^admin_broadcast$")
    ],
    states={
        BROADCAST_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_get_text)],
        BROADCAST_CONFIRM: [CallbackQueryHandler(broadcast_confirm)],
    },
    fallbacks=[CommandHandler("cancel", broadcast_cancel)],
)