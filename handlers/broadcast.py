# handlers/broadcast.py
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler
)
from telegram.error import TelegramError

from logger import get_logger
from queries.user_queries import get_all_user_ids 
from handlers.admin.utils import admin_only_handler
from config import ADMIN_CHAT_ID 
# ‚úÖ –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ –ò–ó UTILS/KEYBOARDS.PY
from utils.keyboards import create_broadcast_confirm_keyboard

logger = get_logger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
AWAIT_BROADCAST_MESSAGE, CONFIRM_BROADCAST = range(2) 

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ConversationHandler ---

async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if not update.message or not await admin_only_handler(update, context):
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è MarkdownV2 (—Å–∏–º–≤–æ–ª—ã ., -, !, (, ) –∏ –¥—Ä. –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å: `\\.`, `\\-` –∏ —Ç.–¥.).\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    return AWAIT_BROADCAST_MESSAGE

async def broadcast_ask_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    —Å –ø–æ–º–æ—â—å—é –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫.
    """
    logger.info(f"[BROADCAST_ASK] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç {update.effective_user.id}: {update.message.text[:50]}...")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞–Ω–∞ –æ—à–∏–±–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ context.user_data
    if not update.message or not update.message.text: 
        logger.warning("[BROADCAST_ASK] Message or text is missing. Ending conversation.")
        return ConversationHandler.END
    
    message_text = update.message.text
    parse_mode = "MarkdownV2" 
    
    context.user_data['broadcast_text'] = message_text
    context.user_data['broadcast_parse_mode'] = parse_mode

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)
    preview_text = message_text.replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("]", "\\]") \
                              .replace("(", "\\(").replace(")", "\\)").replace("~", "\\~").replace("`", "\\`") \
                              .replace(">", "\\>").replace("#", "\\#").replace("+", "\\+").replace("-", "\\-") \
                              .replace("=", "\\=").replace("|", "\\|").replace("{", "\\{").replace("}", "\\}") \
                              .replace(".", "\\.").replace("!", "\\!")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ–±—Ä–∞–º–ª—è—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    confirmation_text = (
        f"üì£ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏**\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\\?\n"
        f"\n\\-\\-\\-\n"
        f"{preview_text}\n"
        f"\\-\\-\\-\n"
    )

    # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –§–£–ù–ö–¶–ò–Æ –ò–ó KEYBOARDS.PY
    await update.message.reply_text(
        confirmation_text,
        reply_markup=create_broadcast_confirm_keyboard(),
        parse_mode="MarkdownV2"
    )
    
    return CONFIRM_BROADCAST 

async def broadcast_confirm_and_send(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ '–î–ê' (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º)."""
    if not update.message or not update.message.text or not context.user_data:
        return ConversationHandler.END

    confirmation = update.message.text.strip().upper()
    
    if confirmation != '–î–ê':
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        context.user_data.clear()
        return ConversationHandler.END

    # –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    return await _execute_broadcast_logic(update.message, context)


async def _execute_broadcast_logic(message, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫—É."""
    
    message_text = context.user_data.get('broadcast_text')
    parse_mode = context.user_data.get('broadcast_parse_mode')

    if not message_text:
         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
         await message.reply_text("–û—à–∏–±–∫–∞: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /broadcast —Å–Ω–æ–≤–∞.")
         context.user_data.clear()
         return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
    await message.reply_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    user_ids = await get_all_user_ids()
    successful_sends = 0
    failed_sends = 0
    blocked_users = 0
    
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    for user_id in user_ids:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode=parse_mode
            )
            successful_sends += 1
            await asyncio.sleep(0.1) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        except TelegramError as e:
            failed_sends += 1
            if "bot was blocked by the user" in str(e):
                 blocked_users +=1
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            else:
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        except Exception as e:
             failed_sends += 1
             logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)

    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful_sends}, –û—à–∏–±–∫–∏: {failed_sends} (–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_users})")
    await message.reply_text(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_sends}\n"
        f"‚ùå –û—à–∏–±–∫–∏: {failed_sends} (–∏–∑ –Ω–∏—Ö –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {blocked_users})"
    )
    
    context.user_data.clear()
    return ConversationHandler.END

async def broadcast_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    if update.message:
        await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    if context.user_data: context.user_data.clear()
    return ConversationHandler.END


# --- –•–ï–ù–î–õ–ï–† –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è Inline-–∫–Ω–æ–ø–æ–∫ ---

async def handle_broadcast_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞ —à–∞–≥–µ CONFIRM_BROADCAST."""
    query = update.callback_query
    if not query or not query.data or not query.from_user or query.from_user.id != ADMIN_CHAT_ID:
        await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return CONFIRM_BROADCAST

    await query.answer()

    if query.data == 'broadcast_confirm_yes':
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–∞—Ä–æ–º.
        await context.bot.send_message(query.message.chat_id, "‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ**. –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏...", parse_mode='Markdown')
        
        # –û—á–∏—â–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–∞—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã UX
        if query.message:
            await query.message.edit_reply_markup(reply_markup=None)
            
        return await _execute_broadcast_logic(query.message, context)
        
    elif query.data == 'broadcast_confirm_no':
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ, –∞ —Å—Ç–∞—Ä–æ–µ —Ç–æ–ª—å–∫–æ –æ—á–∏—â–∞–µ–º
        if query.message:
            await query.message.edit_reply_markup(reply_markup=None)
            await context.bot.send_message(query.message.chat_id, "‚ùå **–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.**", parse_mode='Markdown')
            
        if context.user_data: context.user_data.clear()
        return ConversationHandler.END
        
    return CONFIRM_BROADCAST


# –°–æ–∑–¥–∞–µ–º ConversationHandler
broadcast_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("broadcast", broadcast_start)],
    states={
        AWAIT_BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_ask_confirm)],
        CONFIRM_BROADCAST: [
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤
            CallbackQueryHandler(handle_broadcast_callback, pattern="^broadcast_confirm_"),
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞ '–î–ê'
            MessageHandler(filters.Regex('^–î–ê$'), broadcast_confirm_and_send)
        ]
    },
    fallbacks=[CommandHandler("cancel", broadcast_cancel)],
)