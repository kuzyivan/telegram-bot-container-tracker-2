from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.future import select
from sqlalchemy import select as sync_select
from datetime import time, datetime
from pathlib import Path
from pytz import timezone

from db import SessionLocal
from models import TrackingSubscription, Tracking, User
from utils.send_tracking import create_excel_file, get_vladivostok_filename
from utils.email_sender import send_email
from mail_reader import check_mail
from services.container_importer import import_loaded_and_dispatch_from_excel
from logger import get_logger

logger = get_logger(__name__)
scheduler = AsyncIOScheduler(timezone=timezone("Asia/Vladivostok"))


def get_daily_excel_path():
    today = datetime.now().strftime("%d.%m.%Y")
    return Path(f"/root/AtermTrackBot/A-Terminal {today}.xlsx")


def check_dislocation_and_import():
    logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω –æ–±—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –∏ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã.")

    try:
        check_mail()
        logger.info("üì¨ –ü–æ—á—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}", exc_info=True)

    now = datetime.now(timezone("Asia/Vladivostok"))
    if now.hour == 8 and now.minute == 30:
        file_path = str(get_daily_excel_path())
        logger.info(f"üì• –í—Ä–µ–º—è 08:30 ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞: {file_path}")
        try:
            import_loaded_and_dispatch_from_excel(file_path)
            logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –±–∞–∑—ã –∏–∑ {file_path}: {e}", exc_info=True)
    else:
        logger.info(f"‚è∞ –°–µ–π—á–∞—Å {now.strftime('%H:%M')} ‚Äî –Ω–µ 08:30, –∏–º–ø–æ—Ä—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è.")


def start_scheduler(bot):
    scheduler.add_job(send_notifications, 'cron', hour=23, minute=0, args=[bot, time(9, 0)])
    scheduler.add_job(send_notifications, 'cron', hour=6, minute=0, args=[bot, time(16, 0)])
    scheduler.add_job(check_dislocation_and_import, 'cron', minute='*/20')

    logger.info("üóìÔ∏è –û–±—â–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –∏ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç).")
    scheduler.start()
    logger.info("üü¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

    local_time = datetime.now(timezone("Asia/Vladivostok"))
    logger.info(f"üïí –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: {local_time}")
    logger.info(f"üïí –í—Ä–µ–º—è –ø–æ UTC: {datetime.utcnow()}")


async def send_notifications(bot, target_time: time):
    logger.info(f"üîî –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏: {target_time}")
    try:
        async with SessionLocal() as session:
            result = await session.execute(
                select(TrackingSubscription).where(TrackingSubscription.notify_time == target_time)
            )
            subscriptions = result.scalars().all()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(subscriptions)}")

            columns = [
                '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
                '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
                '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
                '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
            ]

            for sub in subscriptions:
                rows = []
                for container in sub.containers:
                    res = await session.execute(
                        select(Tracking).filter(Tracking.container_number == container).order_by(Tracking.operation_date.desc())
                    )
                    track = res.scalars().first()
                    if track:
                        rows.append([
                            track.container_number,
                            track.from_station,
                            track.to_station,
                            track.current_station,
                            track.operation,
                            track.operation_date,
                            track.waybill,
                            track.km_left,
                            track.forecast_days,
                            track.wagon_number,
                            track.operation_road
                        ])

                if not rows:
                    containers_list = list(sub.containers) if isinstance(sub.containers, (list, tuple, set)) else []
                    await bot.send_message(sub.user_id, f"üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º {', '.join(containers_list)}")
                    logger.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sub.user_id} ({containers_list})")
                    continue

                file_path = create_excel_file(rows, columns)
                filename = get_vladivostok_filename()

                try:
                    with open(file_path, "rb") as f:
                        await bot.send_document(
                            chat_id=sub.user_id,
                            document=f,
                            filename=filename
                        )
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {filename} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id} –≤ Telegram")
                except Exception as send_err:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id} –≤ Telegram: {send_err}", exc_info=True)

                user_result = await session.execute(
                    sync_select(User).where(User.telegram_id == sub.user_id, User.email_enabled == True)
                )
                user = user_result.scalar_one_or_none()

                if user and user.email:
                    try:
                        await send_email(
                            to=user.email,
                            attachments=[file_path]
                        )
                        logger.info(f"üìß Email —Å —Ñ–∞–π–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user.email}")
                    except Exception as email_err:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –Ω–∞ {user.email}: {email_err}", exc_info=True)
                else:
                    logger.info(f"üìù –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sub.user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ email –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)