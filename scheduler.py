# scheduler.py
from __future__ import annotations

import asyncio
import inspect
from datetime import datetime, time
from typing import Any, Callable, Optional, Mapping

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone

from mail_reader import check_mail, fetch_terminal_excel_and_process
from utils.notify import notify_admin
from logger import get_logger
from services.notification_service import NotificationService

# =========================
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# =========================
logger = get_logger(__name__)
TZ = timezone("Asia/Vladivostok")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –¥–∂–æ–±–æ–≤
JOB_DEFAULTS = {
    "coalesce": True,
    "max_instances": 1,
    "misfire_grace_time": 300,
}

# –ï–¥–∏–Ω—ã–µ ID –∑–∞–¥–∞—á
JOB_ID_MAIL_EVERY_20 = "mail_check_every_20"
JOB_ID_IMPORT_08_30 = "terminal_import_08_30"
JOB_ID_NOTIFY_FOR_09 = "notify_for_09"
JOB_ID_NOTIFY_FOR_16 = "notify_for_16"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–æ–¥–∏–Ω –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
scheduler = AsyncIOScheduler(timezone=TZ, job_defaults=JOB_DEFAULTS)

# =========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =========================
async def _maybe_await(func: Callable[..., Any], *args, **kwargs):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤: –µ—Å–ª–∏ func ‚Äî coroutine function, await it;
    –µ—Å–ª–∏ sync ‚Äî —É–≤–æ–¥–∏–º –≤ executor, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop.
    """
    if inspect.iscoroutinefunction(func):
        return await func(*args, **kwargs)
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, lambda: func(*args, **kwargs))

def _format_terminal_import_message(started_dt: datetime, stats: Optional[Mapping] = None) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã."""
    header = "‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n"
    base = f"<b>–í—Ä–µ–º—è (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫):</b> {started_dt.strftime('%d.%m %H:%M')}\n"

    if not stats or not isinstance(stats, Mapping):
        return header + base
    
    key_map = [
        ("file_name", "–§–∞–π–ª"), ("sheets_processed", "–õ–∏—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"), ("duration_sec", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–µ–∫"),
        ("total_rows", "–°—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"), ("total_added", "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ"), ("total_updated", "–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ"),
    ]
    pretty = [f"<b>{title}:</b> {stats[key]}" for key, title in key_map if key in stats]
    
    body = "\n".join(pretty)
    return header + base + (body + "\n" if body else "")

# =========================
# –î–∂–æ–±—ã (jobs)
# =========================
async def job_check_mail():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á—Ç—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–∏–Ω–≥-—Ñ–∞–π–ª–æ–≤."""
    logger.info("üì¨ [job_check_mail] –°—Ç–∞—Ä—Ç –ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã.")
    try:
        await _maybe_await(check_mail)
        logger.info("‚úÖ [job_check_mail] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå [job_check_mail] –û—à–∏–±–∫–∞: {e}", exc_info=True)

async def job_daily_terminal_import():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ Executive summary."""
    logger.info("üì• [job_daily_terminal_import] 08:30 ‚Äî –∑–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ Executive summary")
    started = datetime.now(TZ)
    try:
        stats = await _maybe_await(fetch_terminal_excel_and_process)
        logger.info("‚úÖ [job_daily_terminal_import] –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        
        text = _format_terminal_import_message(started_dt=started, stats=stats)
        await notify_admin(text, silent=True)
        logger.info("[job_daily_terminal_import] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
    except Exception as e:
        logger.error(f"‚ùå [job_daily_terminal_import] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}", exc_info=True)
        error_message = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞</b>\n"
            f"<b>–í—Ä–µ–º—è (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫):</b> {started.strftime('%d.%m %H:%M')}\n"
            f"<code>{e}</code>"
        )
        await notify_admin(error_message, silent=False)
        logger.error("[job_daily_terminal_import] –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω –æ–± –æ—à–∏–±–∫–µ.")

async def job_send_notifications(bot, target_time: time):
    """
    –ó–∞–¥–∞—á–∞-–æ–±–µ—Ä—Ç–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É.
    """
    logger.info(f"üîî –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {target_time.strftime('%H:%M')}")
    service = NotificationService(bot)
    try:
        await service.send_scheduled_notifications(target_time)
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {target_time.strftime('%H:%M')} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {target_time.strftime('%H:%M')}: {e}", exc_info=True)

# =========================
# –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
# =========================
def start_scheduler(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    """
    # 1) –†–∞—Å—Å—ã–ª–∫–∏ –≤ 09:00 –∏ 16:00
    scheduler.add_job(
        job_send_notifications,
        trigger='cron', hour=9, minute=0,
        args=[bot, time(9, 0)],
        id=JOB_ID_NOTIFY_FOR_09,
        replace_existing=True,
        jitter=10,
    )
    scheduler.add_job(
        job_send_notifications,
        trigger='cron', hour=16, minute=0,
        args=[bot, time(16, 0)],
        id=JOB_ID_NOTIFY_FOR_16,
        replace_existing=True,
        jitter=10,
    )

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
    scheduler.add_job(
        job_check_mail,
        trigger='cron', minute='*/20',
        id=JOB_ID_MAIL_EVERY_20,
        replace_existing=True,
        jitter=10,
    )

    # 3) –ò–º–ø–æ—Ä—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã —Å—Ç—Ä–æ–≥–æ –≤ 08:30
    scheduler.add_job(
        job_daily_terminal_import,
        trigger='cron', hour=8, minute=30,
        id=JOB_ID_IMPORT_08_30,
        replace_existing=True,
        jitter=10,
    )

    scheduler.start()
    logger.info("üü¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ó–∞–¥–∞—á–∏: –ø–æ—á—Ç–∞ */20, –∏–º–ø–æ—Ä—Ç 08:30, —Ä–∞—Å—Å—ã–ª–∫–∏ 09:00/16:00.")

    local_time = datetime.now(TZ)
    logger.info(f"üïí –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: {local_time}")
    logger.info(f"üïí –í—Ä–µ–º—è –ø–æ UTC: {datetime.utcnow()}")