# scheduler.py
from __future__ import annotations
from datetime import datetime, time
from typing import Optional, Mapping
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone

from utils.notify import notify_admin
from logger import get_logger
from services.notification_service import NotificationService
from services.dislocation_importer import check_and_process_dislocation
from services.terminal_importer import check_and_process_terminal_report

logger = get_logger(__name__)
TZ = timezone("Asia/Vladivostok")

JOB_DEFAULTS = {"coalesce": True, "max_instances": 1, "misfire_grace_time": 300}
scheduler = AsyncIOScheduler(timezone=TZ, job_defaults=JOB_DEFAULTS)


def _format_terminal_import_message(started_dt: datetime, stats: Optional[Mapping] = None) -> str:
    header = "‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n"
    base = f"<b>–í—Ä–µ–º—è (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫):</b> {started_dt.strftime('%d.%m %H:%M')}\n"
    if not stats: return header + base
    key_map = [
        ("file_name", "–§–∞–π–ª"), ("sheets_processed", "–õ–∏—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"),
        ("total_added", "–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö"),
    ]
    pretty = [f"<b>{title}:</b> {stats[key]}" for key, title in key_map if key in stats]
    return header + base + "\n".join(pretty)


async def job_send_notifications(bot, target_time: time):
    logger.info(f"üîî –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {target_time.strftime('%H:%M')}")
    service = NotificationService(bot)
    try:
        await service.send_scheduled_notifications(target_time)
        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {target_time.strftime('%H:%M')} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {target_time.strftime('%H:%M')}: {e}", exc_info=True)


async def job_periodic_dislocation_check():
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏...")
    try:
        await check_and_process_dislocation()
        logger.info("Scheduler: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏: {e}", exc_info=True)


async def job_daily_terminal_import():
    logger.info("Scheduler: –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞...")
    started = datetime.now(TZ)
    try:
        stats = await check_and_process_terminal_report()
        if stats:
            text = _format_terminal_import_message(started_dt=started, stats=stats)
            await notify_admin(text, silent=True)
    except Exception as e:
        logger.error(f"‚ùå Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {e}", exc_info=True)
        error_message = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞</b>\n"
            f"<b>–í—Ä–µ–º—è:</b> {started.strftime('%d.%m %H:%M')}\n"
            f"<code>{e}</code>"
        )
        await notify_admin(error_message, silent=False)


def start_scheduler(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    """
    # 1) –†–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    scheduler.add_job(
        job_send_notifications, 'cron', hour=9, minute=0,
        args=[bot, time(9, 0)], id="notify_for_09", replace_existing=True,
        jitter=600  # <<< –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: 600 —Å–µ–∫—É–Ω–¥ (10 –º–∏–Ω—É—Ç)
    )
    scheduler.add_job(
        job_send_notifications, 'cron', hour=16, minute=0,
        args=[bot, time(16, 0)], id="notify_for_16", replace_existing=True,
        jitter=600  # <<< –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: 600 —Å–µ–∫—É–Ω–¥ (10 –º–∏–Ω—É—Ç)
    )

    # 2) –ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç
    scheduler.add_job(
        job_periodic_dislocation_check, 'cron', minute='*/20',
        id="dislocation_check_20min", replace_existing=True, jitter=10
    )

    # 3) –ó–∞–¥–∞—á–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ 08:30
    scheduler.add_job(
        job_daily_terminal_import, 'cron', hour=8, minute=30,
        id="terminal_import_0830", replace_existing=True, jitter=10
    )

    scheduler.start()
    # <<< –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–µ
    logger.info("üü¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –¥—Ä–æ–∂–∞–Ω–∏–µ–º (jitter).")
    local_time = datetime.now(TZ)
    logger.info(f"üïí –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: {local_time}")
    logger.info(f"üïí –í—Ä–µ–º—è –ø–æ UTC: {datetime.utcnow()}")