from __future__ import annotations

import asyncio
import inspect
from datetime import datetime, time
from typing import Any, Callable

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.future import select
from sqlalchemy import select as sync_select
from pytz import timezone

from db import SessionLocal
from models import TrackingSubscription, Tracking, User
from utils.send_tracking import create_excel_file, get_vladivostok_filename
from utils.email_sender import send_email
from mail_reader import check_mail, fetch_terminal_excel_and_process
from logger import get_logger

# =========================
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# =========================
logger = get_logger(__name__)
TZ = timezone("Asia/Vladivostok")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –¥–∂–æ–±–æ–≤
JOB_DEFAULTS = {
    "coalesce": True,          # —Å—Ö–ª–æ–ø—ã–≤–∞—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –æ–¥–∏–Ω –∑–∞–ø—É—Å–∫
    "max_instances": 1,        # –Ω–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –¥–∂–æ–±
    "misfire_grace_time": 300, # 5 –º–∏–Ω—É—Ç –Ω–∞ ¬´–æ–ø–æ–∑–¥–∞–Ω–∏—è¬ª
}

# –ï–¥–∏–Ω—ã–µ ID –∑–∞–¥–∞—á
JOB_ID_MAIL_EVERY_20 = "mail_check_every_20"
JOB_ID_IMPORT_08_30  = "terminal_import_08_30"
JOB_ID_NOTIFY_FOR_09  = "notify_for_09"
JOB_ID_NOTIFY_FOR_16  = "notify_for_16"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–æ–¥–∏–Ω –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
scheduler = AsyncIOScheduler(timezone=TZ, job_defaults=JOB_DEFAULTS)


# =========================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =========================
async def _maybe_await(func: Callable[..., Any], *args, **kwargs):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤: –µ—Å–ª–∏ func ‚Äî coroutine function, await it;
    –µ—Å–ª–∏ sync ‚Äî —É–≤–æ–¥–∏–º –≤ executor, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop.
    """
    if inspect.iscoroutinefunction(func):
        return await func(*args, **kwargs)
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, lambda: func(*args, **kwargs))


# =========================
# –î–∂–æ–±—ã (jobs)
# =========================
async def job_check_mail():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã (tracking + –ø–æ–ø—ã—Ç–∫–∞ Executive summary)."""
    logger.info("üì¨ [job_check_mail] –°—Ç–∞—Ä—Ç –ø–ª–∞–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã.")
    try:
        await _maybe_await(check_mail)
        logger.info("‚úÖ [job_check_mail] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå [job_check_mail] –û—à–∏–±–∫–∞: {e}", exc_info=True)


async def job_daily_terminal_import():
    """
    –ò–º–ø–æ—Ä—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã. –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–æ–≥–æ –≤ 08:30 –ø–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—É.
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ Executive summary –≤ /root/AtermTrackBot/download_container
    –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ª–∏—Å—Ç—ã Loaded*/Dispatch* –≤ terminal_containers.
    """
    logger.info("üì• [job_daily_terminal_import] 08:30 ‚Äî –∑–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ Executive summary")
    try:
        await _maybe_await(fetch_terminal_excel_and_process)
        logger.info("‚úÖ [job_daily_terminal_import] –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except Exception as e:
        logger.error(f"‚ùå [job_daily_terminal_import] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}", exc_info=True)


async def send_notifications(bot, target_time: time):
    """
    –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è.
    target_time ‚Äî –≤—Ä–µ–º—è –∏–∑ TrackingSubscription.notify_time (09:00 / 16:00 / –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ).
    """
    logger.info(f"üîî [send_notifications] –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏: {target_time}")
    try:
        async with SessionLocal() as session:
            result = await session.execute(
                select(TrackingSubscription).where(TrackingSubscription.notify_time == target_time)
            )
            subscriptions = result.scalars().all()
            logger.info(f"[send_notifications] –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}")

            columns = [
                '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
                '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
                '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
                '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
            ]

            for sub in subscriptions:
                rows = []
                for container in sub.containers:
                    res = await session.execute(
                        select(Tracking)
                        .filter(Tracking.container_number == container)
                        .order_by(Tracking.operation_date.desc())
                    )
                    track = res.scalars().first()
                    if track:
                        rows.append([
                            track.container_number,
                            track.from_station,
                            track.to_station,
                            track.current_station,
                            track.operation,
                            track.operation_date,
                            track.waybill,
                            track.km_left,
                            track.forecast_days,
                            track.wagon_number,
                            track.operation_road
                        ])

                if not rows:
                    containers_list = list(sub.containers) if isinstance(sub.containers, (list, tuple, set)) else []
                    await bot.send_message(sub.user_id, f"üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º {', '.join(containers_list)}")
                    logger.info(f"[send_notifications] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sub.user_id} ({containers_list})")
                    continue

                # –°–æ–∑–¥–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞ —Å –∏—Ç–æ–≥–∞–º–∏
                file_path = create_excel_file(rows, columns)
                filename = get_vladivostok_filename()

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
                try:
                    with open(file_path, "rb") as f:
                        await bot.send_document(
                            chat_id=sub.user_id,
                            document=f,
                            filename=filename
                        )
                    logger.info(f"‚úÖ [send_notifications] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª {filename} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id} (Telegram)")
                except Exception as send_err:
                    logger.error(f"‚ùå [send_notifications] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id}: {send_err}", exc_info=True)

                # –î–æ–ø. —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ email (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
                user_result = await session.execute(
                    sync_select(User).where(User.telegram_id == sub.user_id, User.email_enabled == True)
                )
                user = user_result.scalar_one_or_none()

                if user and user.email:
                    try:
                        await send_email(
                            to=user.email,
                            attachments=[file_path]
                        )
                        logger.info(f"üìß [send_notifications] Email —Å —Ñ–∞–π–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user.email}")
                    except Exception as email_err:
                        logger.error(f"‚ùå [send_notifications] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –Ω–∞ {user.email}: {email_err}", exc_info=True)
                else:
                    logger.info(f"[send_notifications] –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sub.user_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ email –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    except Exception as e:
        logger.critical(f"‚ùå [send_notifications] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)


# =========================
# –ü—É–±–ª–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
# =========================
def start_scheduler(bot):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–∂–æ–±—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    """
    # 1) –†–∞—Å—Å—ã–ª–∫–∏
    scheduler.add_job(
        send_notifications,
        trigger='cron',
        hour=23, minute=0,
        args=[bot, time(9, 0)],
        id=JOB_ID_NOTIFY_FOR_09,
        replace_existing=True,
        jitter=10,
    )
    scheduler.add_job(
        send_notifications,
        trigger='cron',
        hour=6, minute=0,
        args=[bot, time(16, 0)],
        id=JOB_ID_NOTIFY_FOR_16,
        replace_existing=True,
        jitter=10,
    )

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç (tracking + –ø–æ–ø—ã—Ç–∫–∞ Executive summary)
    scheduler.add_job(
        job_check_mail,
        trigger='cron',
        minute='*/20',
        id=JOB_ID_MAIL_EVERY_20,
        replace_existing=True,
        jitter=10,
    )

    # 3) –ò–º–ø–æ—Ä—Ç Executive summary —Å—Ç—Ä–æ–≥–æ –≤ 08:30
    scheduler.add_job(
        job_daily_terminal_import,
        trigger='cron',
        hour=8, minute=30,
        id=JOB_ID_IMPORT_08_30,
        replace_existing=True,
        jitter=10,
    )

    scheduler.start()
    logger.info("üü¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ó–∞–¥–∞—á–∏: –ø–æ—á—Ç–∞ */20, –∏–º–ø–æ—Ä—Ç 08:30, —Ä–∞—Å—Å—ã–ª–∫–∏ 23:00/06:00.")

    local_time = datetime.now(TZ)
    logger.info(f"üïí –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: {local_time}")
    logger.info(f"üïí –í—Ä–µ–º—è –ø–æ UTC: {datetime.utcnow()}")