# scheduler.py
from datetime import datetime, time
from typing import Optional, Mapping
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pytz import timezone

import config
from utils.notify import notify_admin
from logger import get_logger
from services.notification_service import NotificationService
from services.dislocation_importer import check_and_process_dislocation
from services.terminal_importer import check_and_process_terminal_report
from populate_stations_cache import job_populate_stations_cache

logger = get_logger(__name__)
TZ = timezone("Asia/Vladivostok")

JOB_DEFAULTS = {"coalesce": True, "max_instances": 1, "misfire_grace_time": 300}
scheduler = AsyncIOScheduler(timezone=TZ, job_defaults=JOB_DEFAULTS)

def _format_terminal_import_message(started_dt: datetime, stats: Optional[Mapping] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    header = "‚úÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n"
    base = f"<b>–í—Ä–µ–º—è (–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫):</b> {started_dt.strftime('%d.%m %H:%M')}\n"
    
    if not stats: 
        logger.info("[Terminal Import] –û—Ç—á–µ—Ç: –ë–∞–∑–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return header + base
        
    key_map = [("file_name", "–§–∞–π–ª"), ("sheets_processed", "–õ–∏—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"), ("total_added", "–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö")]
    pretty = [f"<b>{title}:</b> {stats[key]}" for key, title in key_map if key in stats]
    
    summary_log = f"[Terminal Import] –°–≤–æ–¥–∫–∞: –§–∞–π–ª={stats.get('file_name', '–Ω/–¥')}, –î–æ–±–∞–≤–ª–µ–Ω–æ={stats.get('total_added', 0)}, –õ–∏—Å—Ç–æ–≤={stats.get('sheets_processed', 0)}"
    logger.info(summary_log)
    
    return header + base + "\n".join(pretty)

async def job_send_notifications(bot, target_time: time):
    """–ó–∞–¥–∞—á–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    time_str = target_time.strftime('%H:%M')
    logger.info(f"üîî –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {time_str}")
    
    service = NotificationService(bot)
    try:
        logger.info(f"[Notification] –ò–Ω–∏—Ü–∏–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {time_str}...")
        
        sent_count, total_count = await service.send_scheduled_notifications(target_time)
        
        logger.info(f"‚úÖ [Notification] –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {time_str} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{total_count}.")
        
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {time_str}: {e}", exc_info=True)


# ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞)
async def job_dislocation_check_on_start():
    logger.info("‚ö°Ô∏è Scheduler: –ó–∞–ø—É—Å–∫ –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ô –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ (–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)...")
    try:
        await check_and_process_dislocation()
        logger.info("‚úÖ Scheduler: –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–û–ô –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏: {e}", exc_info=True)


# –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞
async def job_periodic_dislocation_check():
    """–ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏."""
    logger.info("üïí Scheduler: –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏...")
    try:
        logger.info("[Dislocation Import] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        
        await check_and_process_dislocation()
        
        logger.info("‚úÖ Scheduler: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"‚ùå Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏: {e}", exc_info=True)

async def job_daily_terminal_import():
    """–ó–∞–¥–∞—á–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞."""
    logger.info("üïí Scheduler: –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞...")
    started = datetime.now(TZ)
    try:
        logger.info("[Terminal Import] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –∏ –∏–º–ø–æ—Ä—Ç–∞...")
        
        stats = await check_and_process_terminal_report()
        
        text = _format_terminal_import_message(started_dt=started, stats=stats)
        
        if stats and stats.get('total_added', 0) > 0:
             await notify_admin(text, silent=True, parse_mode="HTML")
             
        logger.info("‚úÖ Scheduler: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.")
             
    except Exception as e:
        logger.error(f"‚ùå Scheduler: –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {e}", exc_info=True)
        error_message = (f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–∞</b>\n<b>–í—Ä–µ–º—è:</b> {started.strftime('%d.%m %H:%M')}\n<code>{e}</code>")
        await notify_admin(error_message, silent=False, parse_mode="HTML")

def start_scheduler(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    scheduler.add_job(job_send_notifications, 'cron', hour=9, minute=0, args=[bot, time(9, 0)], id="notify_for_09", replace_existing=True, jitter=600)
    scheduler.add_job(job_send_notifications, 'cron', hour=16, minute=0, args=[bot, time(16, 0)], id="notify_for_16", replace_existing=True, jitter=600)
    scheduler.add_job(job_periodic_dislocation_check, 'cron', minute='*/20', id="dislocation_check_20min", replace_existing=True, jitter=10) 
    scheduler.add_job(job_daily_terminal_import, 'cron', hour=8, minute=30, id="terminal_import_0830", replace_existing=True, jitter=10)

    # --- ‚úÖ –ë–ª–æ–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Å—Ç–∞–Ω—Ü–∏–π OSM –æ—Ç–∫–ª—é—á–µ–Ω ---
    # if config.STATIONS_CACHE_CRON_SCHEDULE:
    #     try:
    #         trigger = CronTrigger.from_crontab(config.STATIONS_CACHE_CRON_SCHEDULE, timezone=TZ)
    #         scheduler.add_job(job_populate_stations_cache, trigger, id="stations_cacher_periodic", replace_existing=True, jitter=120)
    #         logger.info(f"üü¢ –ó–∞–¥–∞—á–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π OSM –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: '{config.STATIONS_CACHE_CRON_SCHEDULE}'")
    #     except Exception as e:
    #         logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π: {e}")
    # else:
    #     logger.info("‚ÑπÔ∏è –§–æ–Ω–æ–≤–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π OSM –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    
    scheduler.start()
    logger.info("üü¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏.")
    local_time = datetime.now(TZ)
    logger.info(f"üïí –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞: {local_time}")
    logger.info(f"üïí –í—Ä–µ–º—è –ø–æ UTC: {datetime.utcnow()}")
    
    # ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –§–£–ù–ö–¶–ò–Æ –î–õ–Ø –ó–ê–ü–£–°–ö–ê –í post_init
    return job_dislocation_check_on_start