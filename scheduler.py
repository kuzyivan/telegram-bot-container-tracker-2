from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.future import select
from datetime import time
import logging

from db import SessionLocal
from models import TrackingSubscription, Tracking
from utils.send_tracking import create_excel_file, get_vladivostok_filename
from mail_reader import check_mail

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler(timezone="Asia/Vladivostok")
logger = logging.getLogger(__name__)

def start_scheduler(bot):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ.
    """
    # –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞
    scheduler.add_job(send_notifications, 'cron', hour=9, minute=0, args=[bot, time(9, 0)], misfire_grace_time=3600)
    scheduler.add_job(send_notifications, 'cron', hour=16, minute=0, args=[bot, time(16, 0)], misfire_grace_time=3600)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
    scheduler.add_job(check_mail, 'interval', minutes=15, misfire_grace_time=60)

    logger.info("üïì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏.")
    scheduler.start()

async def send_notifications(bot, target_time: time):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º.
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î.
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {target_time.strftime('%H:%M')}")
    async with SessionLocal() as session:
        # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        sub_result = await session.execute(
            select(TrackingSubscription).where(TrackingSubscription.notify_time == target_time)
        )
        subscriptions = sub_result.scalars().all()

        if not subscriptions:
            logger.info(f"‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {target_time.strftime('%H:%M')}.")
            return

        # 2. –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        all_containers_to_find = {cn for sub in subscriptions for cn in sub.containers}

        if not all_containers_to_find:
            return

        # 3. –î–µ–ª–∞–µ–º –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        tracking_result = await session.execute(
            select(Tracking).filter(Tracking.container_number.in_(all_containers_to_find))
        )
        tracking_data = {track.container_number: track for track in tracking_result.scalars().all()}
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(tracking_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {len(all_containers_to_find)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")

        columns = [
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
            '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        ]

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
        for sub in subscriptions:
            rows_for_user = []
            for container_num in sub.containers:
                track = tracking_data.get(container_num)
                if track:
                    rows_for_user.append([
                        track.container_number, track.from_station, track.to_station,
                        track.current_station, track.operation, track.operation_date,
                        track.waybill, track.km_left, track.forecast_days,
                        track.wagon_number, track.operation_road
                    ])
            
            if not rows_for_user:
                try:
                    await bot.send_message(sub.user_id, f"üì≠ –ü–æ –≤–∞—à–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º ({', '.join(sub.containers)}) –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id}: {e}")
                continue

            try:
                file_path = create_excel_file(rows_for_user, columns)
                filename = get_vladivostok_filename()
                with open(file_path, "rb") as f:
                    await bot.send_document(
                        chat_id=sub.user_id,
                        document=f,
                        filename=filename,
                        caption=f"–î–∏—Å–ª–æ–∫–∞—Ü–∏—è –ø–æ –≤–∞—à–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –Ω–∞ {target_time.strftime('%H:%M')}"
                    )
                logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id} ({len(rows_for_user)} —Å—Ç—Ä–æ–∫).")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id}: {e}")
