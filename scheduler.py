import logging
import asyncio
from datetime import time
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.future import select
from telegram import Bot

from db import SessionLocal
from models import TrackingSubscription, Tracking
from utils.send_tracking import create_excel_file, get_vladivostok_filename
from mail_reader import check_mail

logger = logging.getLogger(__name__)
scheduler = AsyncIOScheduler(timezone="Asia/Vladivostok") # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞

def start_scheduler(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    # –ó–∞–¥–∞—á–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    scheduler.add_job(send_notifications, 'cron', hour=9, minute=0, args=[bot, time(9, 0)])
    scheduler.add_job(send_notifications, 'cron', hour=16, minute=0, args=[bot, time(16, 0)])
    # –ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã
    scheduler.add_job(check_mail, 'interval', minutes=15)
    
    logger.info("üïì –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω, –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    scheduler.start()

async def send_notifications(bot: Bot, target_time: time):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º.
    –ò–°–ü–†–ê–í–õ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê N+1 –ó–ê–ü–†–û–°–û–í.
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {target_time.strftime('%H:%M')}...")
    
    async with SessionLocal() as session:
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        result = await session.execute(
            select(TrackingSubscription).where(TrackingSubscription.notify_time == target_time)
        )
        subscriptions = result.scalars().all()

        if not subscriptions:
            logger.info(f"–î–ª—è –≤—Ä–µ–º–µ–Ω–∏ {target_time.strftime('%H:%M')} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        # 2. –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        all_container_numbers = {container for sub in subscriptions for container in sub.containers}

        if not all_container_numbers:
            logger.warning("–ù–∞–π–¥–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–æ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")
            return

        # 3. –î–µ–ª–∞–µ–º –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –∫ –ë–î, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
        tracking_result = await session.execute(
            select(Tracking).where(Tracking.container_number.in_(all_container_numbers))
        )
        # 4. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞: {'–ù–û–ú–ï–†': <–û–±—ä–µ–∫—Ç Tracking>}
        tracking_data_map = {track.container_number: track for track in tracking_result.scalars().all()}
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫. –°–æ–±—Ä–∞–Ω–æ {len(all_container_numbers)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. "
                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(tracking_data_map)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î.")

        # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è Excel-—Ñ–∞–π–ª–∞
        columns = [
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
            '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        ]
        
        # 5. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for sub in subscriptions:
            rows = []
            not_found_containers = []
            for container_number in sub.containers:
                track_info = tracking_data_map.get(container_number)
                if track_info:
                    rows.append([
                        track_info.container_number,
                        track_info.from_station,
                        track_info.to_station,
                        track_info.current_station,
                        track_info.operation,
                        track_info.operation_date.strftime('%Y-%m-%d %H:%M:%S') if track_info.operation_date else '',
                        track_info.waybill,
                        track_info.km_left,
                        track_info.forecast_days,
                        track_info.wagon_number,
                        track_info.operation_road
                    ])
                else:
                    not_found_containers.append(container_number)

            if not rows:
                await bot.send_message(sub.user_id, f"üì≠ –ü–æ –≤–∞—à–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º ({', '.join(sub.containers)}) –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
                continue
            
            try:
                # –í–´–ù–û–°–ò–ú –ë–õ–û–ö–ò–†–£–Æ–©–£–Æ –û–ü–ï–†–ê–¶–ò–Æ –í EXECUTOR
                loop = asyncio.get_running_loop()
                file_path = await loop.run_in_executor(None, create_excel_file, rows, columns)
                
                filename = get_vladivostok_filename()
                
                with open(file_path, "rb") as f:
                    caption = f"‚úÖ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è –ø–æ –≤–∞—à–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º –Ω–∞ {target_time.strftime('%H:%M')}."
                    if not_found_containers:
                        caption += f"\n\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {', '.join(not_found_containers)}"
                    
                    await bot.send_document(
                        chat_id=sub.user_id,
                        document=f,
                        filename=filename,
                        caption=caption
                    )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id} ({sub.username}) —Å {len(rows)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id}: {e}")

