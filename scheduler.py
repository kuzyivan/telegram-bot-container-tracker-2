from telegram import Update
from telegram.ext import ContextTypes
from utils.keyboards import (
    reply_keyboard,
    dislocation_inline_keyboard,
    tracking_inline_keyboard,
    main_menu_keyboard
)
from telegram.error import BadRequest
import re
from models import Tracking, Stats
from db import SessionLocal
from sqlalchemy.future import select
from utils.send_tracking import create_excel_file, get_vladivostok_filename

# ... (–∫–æ–¥ start, show_menu, reply_keyboard_handler, menu_button_handler, dislocation_inline_callback_handler, handle_sticker - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_sticker("CAACAgIAAxkBAAIC6mgUWmOtztmC0dnqI3C2l4wcikA-AAJvbAACa_OZSGYOhHaiIb7mNgQ")
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_keyboard
    )

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    target_message = update.message or (update.callback_query and update.callback_query.message)
    if not target_message:
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞,
    # –∏–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ callback –æ—Ç inline-–∫–Ω–æ–ø–∫–∏.
    if update.message:
        await target_message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=reply_keyboard
        )
    elif update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu_keyboard
            )
        except BadRequest as e:
            if "Message is not modified" not in str(e):
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º. –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
                await target_message.reply_text(
                    "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=reply_keyboard
                )

async def reply_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏."
        )
    elif text == "üîî –ó–∞–¥–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ":
        await update.message.reply_text(
            "–î–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —Å–ª–µ–∂–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=tracking_inline_keyboard
        )
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è":
        from handlers.tracking_handlers import cancel_tracking_start
        await cancel_tracking_start(update, context)
    else:
        await handle_message(update, context)
    
async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    try:
        if data == 'start':
            await query.edit_message_text(
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu_keyboard
            )
        elif data == 'dislocation':
            await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏.")
        elif data == 'track_request':
            from handlers.tracking_handlers import ask_containers
            await ask_containers(update, context)
    except BadRequest as e:
        if "Message is not modified" not in str(e):
             raise

async def dislocation_inline_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker = update.message.sticker
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker.file_id}`", parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user_input = update.message.text
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,;\n]+', user_input.strip()) if c.strip()]
    
    if not container_numbers:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
        return

    found_tracks = {}
    async with SessionLocal() as session:
        # –û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        result = await session.execute(
            select(Tracking).where(Tracking.container_number.in_(container_numbers))
        )
        for track in result.scalars().all():
            found_tracks[track.container_number] = track
        
        # –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        user = update.message.from_user
        stats_records = [Stats(container_number=cn, user_id=user.id, username=user.username) for cn in container_numbers]
        session.add_all(stats_records)
        await session.commit()

    not_found = [cn for cn in container_numbers if cn not in found_tracks]

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ —á—Ç–æ-—Ç–æ –Ω–∞–π–¥–µ–Ω–æ -> Excel
    if len(container_numbers) > 1 and found_tracks:
        COLUMNS = ['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)', '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏']
        rows_for_excel = []
        for cn in container_numbers:
            track = found_tracks.get(cn)
            if track:
                rows_for_excel.append([
                    track.container_number, track.from_station, track.to_station,
                    track.current_station, track.operation, track.operation_date,
                    track.waybill, track.km_left, track.forecast_days,
                    track.wagon_number, track.operation_road
                ])
        
        file_path = create_excel_file(rows_for_excel, COLUMNS)
        filename = get_vladivostok_filename()
        with open(file_path, "rb") as f:
            await update.message.reply_document(document=f, filename=filename)

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –æ–Ω –Ω–∞–π–¥–µ–Ω
    elif len(container_numbers) == 1 and container_numbers[0] in found_tracks:
        track = found_tracks[container_numbers[0]]
        wagon_number = str(track.wagon_number) if track.wagon_number else "‚Äî"
        wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if wagon_number.startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
        km_left = track.km_left if track.km_left is not None else "‚Äî"
        forecast_days_calc = f"~<b>{track.forecast_days}</b> —Å—É—Ç–æ–∫" if track.forecast_days is not None else "‚Äî"
        operation_station = f"{track.current_station} ({track.operation_road})" if track.operation_road else track.current_station

        msg = (
            f"üì¶ <b>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</b>: <code>{track.container_number}</code>\n\n"
            f"üõ§ <b>–ú–∞—Ä—à—Ä—É—Ç</b>: <b>{track.from_station}</b> ‚Üí <b>{track.to_station}</b>\n\n"
            f"üìç <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è</b>: {operation_station}\n"
            f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è</b>: {track.operation_date} ‚Äî <i>{track.operation}</i>\n\n"
            f"üöÜ <b>–í–∞–≥–æ–Ω</b>: <code>{wagon_number}</code> ({wagon_type})\n"
            f"üìè <b>–û—Å—Ç–∞–ª–æ—Å—å –µ—Ö–∞—Ç—å</b>: <b>{km_left}</b> –∫–º\n"
            f"‚è≥ <b>–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω–∏)</b>: {forecast_days_calc}"
        )
        await update.message.reply_text(msg, parse_mode="HTML")

    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if not_found:
        await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))

