import os
import sqlite3
import logging
from imap_tools import MailBox
import pandas as pd

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
EMAIL = os.getenv('EMAIL')
PASSWORD = os.getenv('PASSWORD')
IMAP_SERVER = os.getenv('IMAP_SERVER', 'imap.yandex.ru')
DOWNLOAD_FOLDER = 'downloads'
DB_FILE = 'tracking.db'

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
def ensure_database_exists():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tracking (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            container_number TEXT,
            from_station TEXT,
            to_station TEXT,
            current_station TEXT,
            operation TEXT,
            operation_date TEXT,
            waybill TEXT,
            km_left INTEGER,
            forecast_days INTEGER
        )
    ''')
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–æ–≤
def check_mail():
    if not EMAIL or not PASSWORD:
        logger.error("‚ùå EMAIL –∏–ª–∏ PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    try:
        with MailBox(IMAP_SERVER).login(EMAIL, PASSWORD, initial_folder='INBOX') as mailbox:
            logger.info("üì¨ –í—Ö–æ–¥ –≤ –ø–æ—á—Ç—É —É—Å–ø–µ—à–µ–Ω")

            messages = list(mailbox.fetch(reverse=True, limit=3))
            logger.info(f"üì® –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(messages)}")

            for msg in messages:
                logger.info(f"‚úâÔ∏è –¢–µ–º–∞: {msg.subject} | –î–∞—Ç–∞: {msg.date}")

                for att in msg.attachments:
                    logger.info(f"üìé –í–ª–æ–∂–µ–Ω–∏–µ: {att.filename} | –†–∞–∑–º–µ—Ä: {len(att.payload)} –±–∞–π—Ç")

                    if att.filename.endswith('.xlsx'):
                        filepath = os.path.join(DOWNLOAD_FOLDER, att.filename)
                        with open(filepath, 'wb') as f:
                            f.write(att.payload)
                        logger.info(f"üì• –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {filepath}")
                        process_file(filepath)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel-—Ñ–∞–π–ª–∞
def process_file(filepath):
    try:
        df = pd.read_excel(filepath, skiprows=3)  # —Å 4-–π —Å—Ç—Ä–æ–∫–∏
        logger.info(f"üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        logger.info(f"üìë –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ: {list(df.columns)}")

        if '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' not in df.columns:
            logger.warning(f"‚ö†Ô∏è –í —Ñ–∞–π–ª–µ {os.path.basename(filepath)} –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'. –ü—Ä–æ–ø—É—Å–∫.")
            return

        if df.empty:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {os.path.basename(filepath)} –ø—É—Å—Ç–æ–π. –ü—Ä–æ–ø—É—Å–∫.")
            return

        records = []
        for _, row in df.iterrows():
            km_left = int(row.get('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', 0)) if pd.notna(row.get('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è')) else 0
            forecast_days = (km_left + 599) // 600 if km_left > 0 else 0
            records.append((
                str(row['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞']).strip().upper(),
                str(row.get('–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '')).strip(),
                str(row.get('–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '')).strip(),
                str(row.get('–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip(),
                str(row.get('–û–ø–µ—Ä–∞—Ü–∏—è', '')).strip(),
                str(row.get('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip(),
                str(row.get('–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '')).strip(),
                km_left,
                forecast_days
            ))

        if not records:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ {os.path.basename(filepath)}.")
            return

        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM tracking")
        cursor.executemany("""
            INSERT INTO tracking (
                container_number, from_station, to_station,
                current_station, operation, operation_date,
                waybill, km_left, forecast_days
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, records)
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(filepath)}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath}: {e}")

# –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã
from apscheduler.triggers.interval import IntervalTrigger

def schedule_mail_checking(scheduler):
    scheduler.add_job(start_mail_checking, IntervalTrigger(minutes=30))
    logger.info("üïí –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω).")

# –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
def start_mail_checking():
    logger.info("üì© –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã...")
    ensure_database_exists()
    check_mail()
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
