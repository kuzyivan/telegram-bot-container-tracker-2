# mail_reader.py
from __future__ import annotations

import os
import asyncio
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AND –∏–∑ –µ–≥–æ –ø–æ–¥–º–æ–¥—É–ª—è imap_tools.query
from imap_tools.query import AND

from logger import get_logger
from services.imap_service import ImapService
from services.container_importer import import_loaded_and_dispatch_from_excel

logger = get_logger(__name__)

_mail_check_lock = asyncio.Lock()
TERMINAL_DOWNLOAD_FOLDER = "/root/AtermTrackBot/download_container"


def _get_vladivostok_date_str(days_offset: int = 0) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º.
    """
    tz = ZoneInfo("Asia/Vladivostok")
    target_date = datetime.now(tz) - timedelta(days=days_offset)
    return target_date.strftime("%d.%m.%Y")


async def fetch_terminal_excel_and_process() -> dict | None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∏—â–µ—Ç –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç "Executive summary".
    """
    imap = ImapService()
    filepath = None
    stats = None

    today_str = _get_vladivostok_date_str(days_offset=0)
    logger.info(f"–ò—â—É 'Executive summary' –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today_str})...")
    criteria_today = AND(from_="aterminal@effex.ru", subject=f"Executive summary {today_str}")
    filepath = await asyncio.to_thread(
        imap.download_latest_attachment,
        criteria_today,
        TERMINAL_DOWNLOAD_FOLDER
    )

    if not filepath:
        yesterday_str = _get_vladivostok_date_str(days_offset=1)
        logger.info(f"–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—â—É 'Executive summary' –∑–∞ –≤—á–µ—Ä–∞ ({yesterday_str})...")
        criteria_yesterday = AND(from_="aterminal@effex.ru", subject=f"Executive summary {yesterday_str}")
        filepath = await asyncio.to_thread(
            imap.download_latest_attachment,
            criteria_yesterday,
            TERMINAL_DOWNLOAD_FOLDER
        )

    if not filepath:
        logger.info("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª 'Executive summary' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    try:
        logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª {filepath}. –ó–∞–ø—É—Å–∫–∞—é –∏–º–ø–æ—Ä—Ç –≤ terminal_containers...")
        added_count, sheets_processed = await import_loaded_and_dispatch_from_excel(filepath)
        stats = {
            "file_name": os.path.basename(filepath),
            "total_added": added_count,
            "sheets_processed": sheets_processed,
        }
        logger.info(f"–ò–º–ø–æ—Ä—Ç –∏–∑ '{os.path.basename(filepath)}' –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}, –ª–∏—Å—Ç–æ–≤: {sheets_processed}.")
        return stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞ '{filepath}': {e}", exc_info=True)
        raise


async def check_mail():
    """
    –ü–ª–∞–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∑–∞–ø—É—Å–∫–∞–µ–º–∞—è –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç.
    """
    logger.info("üì¨ [Scheduler] –ó–∞–ø—É—â–µ–Ω–∞ –ø–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã...")
    if _mail_check_lock.locked():
        logger.info("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ‚Äî —Ç–µ–∫—É—â–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")
        return

    async with _mail_check_lock:
        try:
            await fetch_terminal_excel_and_process()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è check_mail: {e}", exc_info=True)

    logger.info("üì¨ [Scheduler] –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")