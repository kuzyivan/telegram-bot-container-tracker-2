import os
import sqlite3
import logging
import pandas as pd
from imap_tools import MailBox

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

IMAP_SERVER = 'imap.yandex.ru'
EMAIL = os.getenv('EMAIL')
PASSWORD = os.getenv('EMAIL_PASSWORD')
DOWNLOAD_FOLDER = 'downloads'
DB_FILE = 'tracking.db'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tracking (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            container_number TEXT,
            from_station TEXT,
            to_station TEXT,
            operation_station TEXT,
            operation TEXT,
            operation_date TEXT,
            waybill TEXT,
            km_remains INTEGER
        )
    ''')
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def load_excel_to_db(file_path):
    try:
        df = pd.read_excel(file_path, skiprows=3)
        df = df.rename(columns=lambda x: x.strip())
        if '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' not in df.columns:
            raise ValueError(['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'])

        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM tracking')

        for _, row in df.iterrows():
            cursor.execute('''
                INSERT INTO tracking (
                    container_number, from_station, to_station, 
                    operation_station, operation, operation_date, 
                    waybill, km_remains
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                row.get('–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', ''),
                row.get('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', ''),
                row.get('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ', ''),
                row.get('–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', ''),
                row.get('–û–ø–µ—Ä–∞—Ü–∏—è', ''),
                row.get('–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', ''),
                row.get('–ù–∞–∫–ª–∞–¥–Ω–∞—è', ''),
                row.get('–û—Å—Ç–∞—Ç–æ–∫ –ø—É—Ç–∏, –∫–º', 0)
            ))

        conn.commit()
        conn.close()
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {file_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
def check_mail():
    logger.info("üì© –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã...")
    if not EMAIL or not PASSWORD:
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã EMAIL –∏–ª–∏ EMAIL_PASSWORD –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return

    try:
        with MailBox(IMAP_SERVER).login(EMAIL, PASSWORD) as mailbox:
            logger.debug(f"DEBUG: EMAIL='{EMAIL}', PASSWORD_SET={bool(PASSWORD)}")
            logger.debug("DEBUG: –í—Ö–æ–¥ –≤ –ø–æ—á—Ç—É —É—Å–ø–µ—à–µ–Ω")

            for msg in mailbox.fetch():
                for att in msg.attachments:
                    logger.debug(f"DEBUG: –í–ª–æ–∂–µ–Ω–∏–µ: '{att.filename}'")
                    if att.filename.lower().endswith('.xlsx'):
                        file_path = os.path.join(DOWNLOAD_FOLDER, att.filename)
                        with open(file_path, 'wb') as f:
                            f.write(att.payload)
                        logger.info(f"üì• –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {file_path}")
                        load_excel_to_db(file_path)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
def start_mail_checking():
    from apscheduler.schedulers.background import BackgroundScheduler

    init_db()

    scheduler = BackgroundScheduler()
    scheduler.add_job(check_mail, 'interval', minutes=5)
    scheduler.start()
    logger.info("üîÑ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–ø—É—â–µ–Ω–∞.")
