# mail_reader.py
from __future__ import annotations

import os
import asyncio
from datetime import datetime
from zoneinfo import ZoneInfo

import pandas as pd
from imap_tools import AND, MailBox
from sqlalchemy import text

class SmartTx:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    –ï—Å–ª–∏ –Ω–∞ —Å–µ—Å—Å–∏–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SAVEPOINT (begin_nested),
    –∏–Ω–∞—á–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (begin).
    """
    def __init__(self, session):
        self.session = session
        self._ctx = None

    async def __aenter__(self):
        # –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –∏–¥—ë—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–≤—Ç–æ–∑–∞–ø—É—â–µ–Ω–∞), —Å–æ–∑–¥–∞—ë–º savepoint
        if self.session.in_transaction():
            self._ctx = self.session.begin_nested()
        else:
            self._ctx = self.session.begin()
        return await self._ctx.__aenter__()

    async def __aexit__(self, exc_type, exc, tb):
        return await self._ctx.__aexit__(exc_type, exc, tb)

from db import SessionLocal
from logger import get_logger
from models import Tracking

# –∏–º–ø–æ—Ä—Ç –ª–æ–≥–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã
from services.container_importer import import_loaded_and_dispatch_from_excel

logger = get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã (—Ä—É—á–Ω–æ–π + –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)
_mail_check_lock = asyncio.Lock()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
EMAIL = os.getenv("EMAIL")
PASSWORD = os.getenv("PASSWORD")
IMAP_SERVER = os.getenv("IMAP_SERVER", "imap.yandex.ru")

# –§–∞–π–ª—ã –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ/–ø–æ—á–∞—Å–æ–≤—ã–µ –æ—Ç—á—ë—Ç—ã RZD) ‚Äî —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä
DOWNLOAD_FOLDER = "downloads"
# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ ¬´Executive summary¬ª
TERMINAL_FOLDER = "/root/AtermTrackBot/download_container"

os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)
os.makedirs(TERMINAL_FOLDER, exist_ok=True)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è Executive summary (—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è –±–∞–∑–∞)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _today_vvo_str() -> str:
    """–î–∞—Ç–∞ –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY –¥–ª—è —Ç–µ–º—ã –ø–∏—Å—å–º–∞."""
    return datetime.now(ZoneInfo("Asia/Vladivostok")).strftime("%d.%m.%Y")


def _download_today_terminal_attachment() -> str | None:
    """
    –ò—â–µ—Ç –≤ INBOX —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –ø–∏—Å—å–º–æ –æ—Ç aterminal@effex.ru —Å —Ç–µ–º–æ–π
    'Executive summary DD.MM.YYYY', —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç .xlsx –≤ TERMINAL_FOLDER.
    –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –ø—ã—Ç–∞–µ—Ç—Å—è –≤—á–µ—Ä–∞—à–Ω–µ–µ; –µ—Å–ª–∏ –∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –±–µ—Ä—ë—Ç
    —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ –ø–∏—Å—å–º–æ –æ—Ç —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–µ–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
    —Å 'Executive summary'.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None.
    """
    if not EMAIL or not PASSWORD:
        logger.error("‚ùå EMAIL/PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –Ω–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å Executive summary.")
        return None

    today_str = _today_vvo_str()
    from datetime import timedelta
    yday_str = (datetime.now(ZoneInfo("Asia/Vladivostok")) - timedelta(days=1)).strftime("%d.%m.%Y")

    subjects = [
        f"Executive summary {today_str}",
        f"Executive summary {yday_str}",
    ]
    logger.info(f"üì¨ –ò—â—É –ø–∏—Å—å–º–æ: from=aterminal@effex.ru, subject in {subjects} (—Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)")

    with MailBox(IMAP_SERVER).login(EMAIL, PASSWORD, initial_folder="INBOX") as m:
        # 1) —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: —Å–µ–≥–æ–¥–Ω—è ‚Üí –≤—á–µ—Ä–∞
        for subj in subjects:
            msgs = list(m.fetch(AND(from_="aterminal@effex.ru", subject=subj), reverse=True))
            if msgs:
                msg = msgs[0]
                logger.info(f"‚úâÔ∏è –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–æ: '{msg.subject}' –æ—Ç {msg.date}")
                for att in msg.attachments or []:
                    if att.filename and att.filename.lower().endswith(".xlsx"):
                        save_path = os.path.join(TERMINAL_FOLDER, att.filename)
                        with open(save_path, "wb") as f:
                            f.write(att.payload)
                        logger.info(f"üì• Executive summary —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
                        return save_path
                logger.warning("‚ö†Ô∏è –í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ –Ω–µ—Ç .xlsx.")
                return None

        # 2) –§–æ–ª–±—ç–∫: —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ –ø–∏—Å—å–º–æ, –≥–¥–µ —Ç–µ–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "Executive summary"
        candidates = list(m.fetch(AND(from_="aterminal@effex.ru"), reverse=True))
        msgs = [x for x in candidates if (x.subject or "").strip().lower().startswith("executive summary")]
        if not msgs:
            logger.info("üì≠ –ü–∏—Å—å–º–æ Executive summary –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–Ω–∏ —Å–µ–≥–æ–¥–Ω—è, –Ω–∏ –≤—á–µ—Ä–∞, –Ω–∏ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É).")
            return None

        msg = msgs[0]
        logger.info(f"‚úâÔ∏è –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–æ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É: '{msg.subject}' –æ—Ç {msg.date}")
        for att in msg.attachments or []:
            if att.filename and att.filename.lower().endswith(".xlsx"):
                save_path = os.path.join(TERMINAL_FOLDER, att.filename)
                with open(save_path, "wb") as f:
                    f.write(att.payload)
                logger.info(f"üì• Executive summary —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
                return save_path

        logger.warning("‚ö†Ô∏è –í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ –Ω–µ—Ç .xlsx.")
        return None


async def fetch_terminal_excel_and_process():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ Executive summary –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç
    –ª–∏—Å—Ç—ã Loaded*/Dispatch* –≤ —Ç–∞–±–ª–∏—Ü—É terminal_containers.
    """
    try:
        import asyncio

        loop = asyncio.get_running_loop()
        filepath = await loop.run_in_executor(None, _download_today_terminal_attachment)
        if not filepath:
            logger.info("‚ö† –ù–µ—Ç —Ñ–∞–π–ª–∞ Executive summary –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.")
            return

        logger.info(f"‚ñ∂Ô∏è –ò–º–ø–æ—Ä—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã –∏–∑: {filepath}")
        await import_loaded_and_dispatch_from_excel(filepath)
        logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Executive summary: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞: –¥–∏—Å–ª–æ–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (tracking)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def fetch_latest_excel() -> str | None:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ .xlsx –≤–æ –≤—Ö–æ–¥—è—â–∏—Ö (–±–µ–∑ –∂—ë—Å—Ç–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏),
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ DOWNLOAD_FOLDER, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã tracking.
    """
    latest_file: tuple | None = None
    latest_date: datetime | None = None

    if EMAIL is None or PASSWORD is None:
        logger.error("‚ùå EMAIL –∏–ª–∏ PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return None

    with MailBox(IMAP_SERVER).login(EMAIL, PASSWORD, initial_folder="INBOX") as mailbox:
        for msg in mailbox.fetch(reverse=True):
            for att in msg.attachments or []:
                if att.filename and att.filename.lower().endswith(".xlsx"):
                    if latest_date is None or msg.date > latest_date:
                        latest_date = msg.date
                        latest_file = (att, att.filename)

        if latest_file:
            filepath = os.path.join(DOWNLOAD_FOLDER, latest_file[1])
            with open(filepath, "wb") as f:
                f.write(latest_file[0].payload)
            return filepath

    return None


async def process_file(filepath: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É tracking –∏–∑ Excel (—Å—Ç–∞—Ä—ã–π –æ—Ç—á—ë—Ç –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏).
    –û–∂–∏–¥–∞–µ—Ç –∫–æ–ª–æ–Ω–∫—É '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è.
    """
    import traceback

    try:
        df = pd.read_excel(filepath, skiprows=3)

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ (—É–±–µ—Ä—ë–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã)
        df.columns = [str(c).strip() for c in df.columns]

        if "–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞" not in df.columns:
            raise ValueError("['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞']")

        records = []
        for _, row in df.iterrows():
            # –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫–∏–ª–æ–º–µ—Ç—Ä—ã
            km_raw = row.get("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è", 0)
            try:
                km_left = int(float(km_raw)) if pd.notna(km_raw) and km_raw != "" else 0
            except Exception:
                km_left = 0

            forecast_days = round(km_left / 600, 1) if km_left else 0.0

            record = Tracking(
                container_number=str(row["–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"]).strip().upper(),
                from_station=str(row.get("–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "")).strip(),
                to_station=str(row.get("–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", "")).strip(),
                current_station=str(row.get("–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏", "")).strip(),
                operation=str(row.get("–û–ø–µ—Ä–∞—Ü–∏—è", "")).strip(),
                operation_date=str(row.get("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏", "")).strip(),
                waybill=str(row.get("–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π", "")).strip(),
                km_left=km_left,
                forecast_days=forecast_days,
                wagon_number=str(row.get("–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞", "")).strip(),
                operation_road=str(row.get("–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", "")).strip(),
            )
            records.append(record)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ (executemany)
        rows = [
            {
                "container_number": r.container_number,
                "from_station": r.from_station,
                "to_station": r.to_station,
                "current_station": r.current_station,
                "operation": r.operation,
                "operation_date": r.operation_date,
                "waybill": r.waybill,
                "km_left": r.km_left,
                "forecast_days": r.forecast_days,
                "wagon_number": r.wagon_number,
                "operation_road": r.operation_road,
            }
            for r in records
        ]

        async with SessionLocal() as session:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (SAVEPOINT –ø—Ä–∏ –≤–ª–æ–∂–µ–Ω–∏–∏)
            async with SmartTx(session):
                # –ë–µ—Ä—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                conn = await session.connection()
                # –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å–Ω–∏–º–∫–∞ —Ç–∞–±–ª–∏—Ü—ã tracking –Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                await conn.exec_driver_sql("TRUNCATE tracking")

                if rows:
                    # –ü–∞–∫–µ—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ tracking (–±–µ–∑ –≤—Ä–µ–º—è–Ω–∫–∏)
                    await conn.execute(
                        text(
                            """
                            INSERT INTO tracking (
                                container_number, from_station, to_station, current_station,
                                operation, operation_date, waybill, km_left, forecast_days,
                                wagon_number, operation_road
                            )
                            VALUES (
                                :container_number, :from_station, :to_station, :current_station,
                                :operation, :operation_date, :waybill, :km_left, :forecast_days,
                                :wagon_number, :operation_road
                            )
                            """
                        ),
                        rows,
                    )

        last_date = df["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏"].dropna().max() if "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏" in df.columns else None
        logger.info(f"‚úÖ –ë–∞–∑–∞ tracking –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(filepath)}")
        logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(records)}")
        if last_date is not None:
            logger.info(f"üïì –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ: {last_date}")
        if "–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏" in df.columns:
            logger.info(f"üöâ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {df['–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏'].nunique()}")
        logger.info(f"üöõ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {df['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'].nunique()}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath}: {e}")
        logger.error(traceback.format_exc())


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≤—ã–∑—ã–≤–∞–µ–º—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º/–±–æ—Ç–æ–º
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def check_mail():
    """
    –ü–ª–∞–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã:
      1) –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Executive summary (terminal_containers);
      2) –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å–ª–æ–∫–∞—Ü–∏—é (tracking) –∏–∑ —Å–∞–º–æ–≥–æ —Å–≤–µ–∂–µ–≥–æ .xlsx,
         –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ Executive summary.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏
    (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ + –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫).
    """
    logger.info("üì¨ [Scheduler] –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç)...")
    if not EMAIL or not PASSWORD:
        logger.error("‚ùå EMAIL –∏–ª–∏ PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    # –µ—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã—Ö–æ–¥–∏–º
    if _mail_check_lock.locked():
        logger.info("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø—É—Å–∫.")
        return

    async with _mail_check_lock:
        try:
            loop = asyncio.get_running_loop()

            # –®–∞–≥ 1. Executive summary ‚Üí terminal_containers
            try:
                terminal_path = await loop.run_in_executor(None, _download_today_terminal_attachment)
                if terminal_path:
                    logger.info("üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã. –ó–∞–ø—É—Å–∫–∞—é –∏–º–ø–æ—Ä—Ç –≤ terminal_containers...")
                    await import_loaded_and_dispatch_from_excel(terminal_path)
                    logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.")
                else:
                    logger.info("‚ÑπÔ∏è –§–∞–π–ª Executive summary –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –∏–º–ø–æ—Ä—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã.")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Executive summary: {e}", exc_info=True)

            # –®–∞–≥ 2. –î–∏—Å–ª–æ–∫–∞—Ü–∏—è ‚Üí tracking (—Å–∞–º—ã–π —Å–≤–µ–∂–∏–π .xlsx)
            result = await loop.run_in_executor(None, fetch_latest_excel)
            if result:
                filepath = result
                fname = os.path.basename(filepath).lower()
                # –Ω–µ –∫–æ—Ä–º–∏–º —Å—Ç–∞—Ä–æ–º—É –ø–∞—Ä—Å–µ—Ä—É —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã
                if fname.startswith("a-terminal ") or "executive" in fname:
                    logger.info(f"‚ÑπÔ∏è –°–≤–µ–∂–∏–π .xlsx ‚Äî Executive summary ({fname}). –î–ª—è tracking –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º.")
                else:
                    logger.info(f"üì• –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏: {filepath}")
                    await process_file(filepath)
            else:
                logger.info("‚ö† –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö Excel-–≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è tracking.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}")


async def start_mail_checking():
    logger.info("üì© –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)...")
    await check_mail()
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")