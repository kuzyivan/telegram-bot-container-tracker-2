import os
import sqlite3
import logging
from imap_tools import MailBox, AND
from datetime import datetime
import pandas as pd

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
EMAIL = os.getenv('EMAIL')
PASSWORD = os.getenv('PASSWORD')
IMAP_SERVER = os.getenv('IMAP_SERVER', 'imap.yandex.ru')
DOWNLOAD_FOLDER = 'downloads'
DB_FILE = 'tracking.db'

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def ensure_database_exists():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS tracking (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        container_number TEXT,
                        from_station TEXT,
                        to_station TEXT,
                        current_station TEXT,
                        operation TEXT,
                        operation_date TEXT,
                        waybill TEXT,
                        km_left INTEGER,
                        forecast_days REAL,
                        wagon_number TEXT,
                        operation_road TEXT)''')
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–æ–≤
def check_mail():
    if not EMAIL or not PASSWORD:
        logger.error("‚ùå EMAIL –∏–ª–∏ PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    logger.debug(f"DEBUG: EMAIL='{EMAIL}', PASSWORD_SET={'Yes' if PASSWORD else 'No'}")

    try:
        with MailBox(IMAP_SERVER).login(EMAIL, PASSWORD, initial_folder='INBOX') as mailbox:
            logger.debug("DEBUG: –í—Ö–æ–¥ –≤ –ø–æ—á—Ç—É —É—Å–ø–µ—à–µ–Ω")

            count = 0
            for msg in mailbox.fetch(reverse=True):
                for att in msg.attachments:
                    if att.filename.endswith('.xlsx'):
                        filepath = os.path.join(DOWNLOAD_FOLDER, att.filename)
                        with open(filepath, 'wb') as f:
                            f.write(att.payload)
                        logger.info(f"üì• –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {filepath}")
                        process_file(filepath)
                        count += 1
                        if count >= 2:
                            break
                if count >= 2:
                    break

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel-—Ñ–∞–π–ª–∞
def process_file(filepath):
    try:
        df = pd.read_excel(filepath, skiprows=3)  # –ù–∞—á–∏–Ω–∞–µ–º —Å 4 —Å—Ç—Ä–æ–∫–∏
        if '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' not in df.columns:
            raise ValueError("['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞']")

        records = []
        for _, row in df.iterrows():
            km_left = int(row.get('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', 0))
            forecast_days = round(km_left / 600, 1) if km_left else 0.0
            wagon_number = str(row.get('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '')).strip()
            operation_road = str(row.get('–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip()

            records.append(\
                (
                str(row['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞']).strip().upper(),
                str(row.get('–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '')).strip(),
                str(row.get('–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '')).strip(),
                str(row.get('–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip(),
                str(row.get('–û–ø–µ—Ä–∞—Ü–∏—è', '')).strip(),
                str(row.get('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip(),
                str(row.get('–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '')).strip(),
                km_left,
                forecast_days,
                wagon_number,
                operation_road
            ))

        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM tracking")
        cursor.executemany("INSERT INTO tracking (container_number, from_station, to_station, current_station, operation, operation_date, waybill, km_left, forecast_days, wagon_number, operation_road) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", records)
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(filepath)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath}: {e}")

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥
def start_mail_checking():
    logger.info("üì© –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã...")
    ensure_database_exists()
    check_mail()
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
