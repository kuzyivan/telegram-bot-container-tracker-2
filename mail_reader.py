import os
import sqlite3
import logging
import re
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from mail_reader import start_mail_checking
from backup_db import start_backup_scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 10000))
DB_FILE = "tracking.db"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç—É—é, —Ç–æ—á–∫—É –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
async def handle_container_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    raw_containers = re.split(r"[\s,\.\n]+", text)
    containers = [c.strip().upper() for c in raw_containers if c.strip()]

    if not containers:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    found_messages = []
    not_found = []

    for number in containers:
        cursor.execute("SELECT * FROM tracking WHERE container_number = ?", (number,))
        rows = cursor.fetchall()
        if not rows:
            not_found.append(number)
            continue

        for row in rows:
            message = (f"üöö –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row[1]}\n"
                       f"–û—Ç–∫—É–¥–∞: {row[2]}\n"
                       f"–ö—É–¥–∞: {row[3]}\n"
                       f"–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {row[4]}\n"
                       f"–û–ø–µ—Ä–∞—Ü–∏—è: {row[5]}\n"
                       f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {row[6]}\n"
                       f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row[7]}\n"
                       f"–û—Å—Ç–∞–ª–æ—Å—å –∫–º: {row[8]}\n"
                       f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è: {row[9]} –¥–Ω–µ–π")
            found_messages.append(message)

    conn.close()

    reply_parts = found_messages
    if not_found:
        reply_parts.append("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ:\n" + "\n".join(f"- {c}" for c in not_found))

    await update.message.reply_text("\n\n".join(reply_parts))

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    if not TOKEN:
        raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

    start_mail_checking()
    start_backup_scheduler()

    app = ApplicationBuilder().token(TOKEN).webhook_url(WEBHOOK_URL).port(PORT).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_container_query))

    logger.info("‚ú® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")

    app.run_webhook(listen="0.0.0.0", port=PORT, webhook_url=WEBHOOK_URL)
