import os
import logging
from imap_tools import MailBox
import pandas as pd
import sqlalchemy as sa
from db import engine, SessionLocal
from models import Tracking, TrackingTemp, create_temp_table

logger = logging.getLogger(__name__)

EMAIL = os.getenv('EMAIL')
PASSWORD = os.getenv('PASSWORD')
IMAP_SERVER = os.getenv('IMAP_SERVER', 'imap.yandex.ru')
DOWNLOAD_FOLDER = 'downloads'

os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

async def check_mail():
    logger.info("üì¨ [Scheduler] –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
    if not EMAIL or not PASSWORD:
        logger.error("‚ùå EMAIL –∏–ª–∏ PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    try:
        import asyncio
        loop = asyncio.get_running_loop()
        filepath = await loop.run_in_executor(None, fetch_latest_excel)
        
        if filepath:
            logger.info(f"üì• –°–∫–∞—á–∞–Ω —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª: {filepath}")
            await process_file(filepath)
        else:
            logger.info("‚ö† –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö Excel-–≤–ª–æ–∂–µ–Ω–∏–π –≤ –ø–æ—á—Ç–µ.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã: {e}", exc_info=True)

def fetch_latest_excel():
    with MailBox(IMAP_SERVER).login(EMAIL, PASSWORD, initial_folder='INBOX') as mailbox:
        messages = list(mailbox.fetch(reverse=True, limit=10))
        for msg in messages:
            for att in msg.attachments:
                if att.filename.lower().endswith('.xlsx'):
                    filepath = os.path.join(DOWNLOAD_FOLDER, att.filename)
                    with open(filepath, 'wb') as f:
                        f.write(att.payload)
                    return filepath
    return None

async def process_file(filepath):
    try:
        df = pd.read_excel(filepath, skiprows=3)
        if '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' not in df.columns:
            raise ValueError("–í Excel-—Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'")

        records_to_load = []
        for _, row in df.iterrows():
            try:
                km_left = int(row.get('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', 0))
                record = {
                    'container_number': str(row['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞']).strip().upper(),
                    'from_station': str(row.get('–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '')).strip(),
                    'to_station': str(row.get('–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '')).strip(),
                    'current_station': str(row.get('–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip(),
                    'operation': str(row.get('–û–ø–µ—Ä–∞—Ü–∏—è', '')).strip(),
                    'operation_date': str(row.get('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip(),
                    'waybill': str(row.get('–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '')).strip(),
                    'km_left': km_left,
                    'forecast_days': round(km_left / 600, 1) if km_left else 0.0,
                    'wagon_number': str(row.get('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '')).strip(),
                    'operation_road': str(row.get('–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip()
                }
                records_to_load.append(record)
            except (ValueError, TypeError) as e:
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {row}. –û—à–∏–±–∫–∞: {e}")
                continue
        
        # --- –ê–¢–û–ú–ê–†–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï ---
        await create_temp_table()

        # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é
        async with SessionLocal() as session:
            async with session.begin():
                # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
                await session.execute(sa.delete(TrackingTemp))
                if records_to_load:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º bulk_insert_mappings –≤–Ω—É—Ç—Ä–∏ run_sync, —Ç.–∫. —ç—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                    await session.run_sync(
                         lambda s: s.bulk_insert_mappings(TrackingTemp, records_to_load)
                    )
        
        # –®–∞–≥ 2: –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ DDL-–∫–æ–º–∞–Ω–¥—ã
        async with engine.begin() as conn:
            await conn.execute(sa.text("LOCK TABLE tracking IN ACCESS EXCLUSIVE MODE"))
            await conn.execute(sa.text("DROP TABLE IF EXISTS tracking_old CASCADE"))
            await conn.execute(sa.text("ALTER TABLE tracking RENAME TO tracking_old"))
            await conn.execute(sa.text("ALTER TABLE tracking_temp RENAME TO tracking"))

        last_date = df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏'].dropna().max()
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(filepath)}")
        logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(records_to_load)}")
        logger.info(f"üïì –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ: {last_date}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {filepath}: {e}", exc_info=True)

async def start_mail_checking():
    logger.info("üì© –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã...")
    await check_mail()
    logger.info("üîÑ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
