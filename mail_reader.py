import os
import logging
import asyncio
from datetime import datetime
import pandas as pd
from sqlalchemy import delete
from sqlalchemy.dialects.postgresql import insert
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç MailBox –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ imap_tools
from imap_tools import MailBox 

from db import SessionLocal
from models import Tracking

logger = logging.getLogger(__name__)

EMAIL = os.getenv('EMAIL')
PASSWORD = os.getenv('PASSWORD')
IMAP_SERVER = os.getenv('IMAP_SERVER', 'imap.yandex.ru')
DOWNLOAD_FOLDER = 'downloads'

os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

def _blocking_fetch_latest_excel():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è) —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø–æ—á—Ç—ã."""
    latest_file_path = None
    latest_date = None
    try:
        with MailBox(IMAP_SERVER).login(EMAIL, PASSWORD, initial_folder='INBOX') as mailbox:
            for msg in mailbox.fetch():
                for att in msg.attachments:
                    if att.filename.lower().endswith(('.xlsx', '.xls')):
                        msg_date = msg.date
                        if latest_date is None or msg_date > latest_date:
                            latest_date = msg_date
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ç—Ç–∞—á–º–µ–Ω—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            filepath = os.path.join(DOWNLOAD_FOLDER, att.filename)
                            with open(filepath, 'wb') as f:
                                f.write(att.payload)
                            latest_file_path = filepath
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É: {e}")
        return None
    return latest_file_path

def _blocking_process_file(filepath: str):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è) —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel-—Ñ–∞–π–ª–∞.
    –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π.
    """
    try:
        df = pd.read_excel(filepath, skiprows=3)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        df.rename(columns={
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞': 'container_number',
            '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è': 'from_station',
            '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è': 'to_station',
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏': 'current_station',
            '–û–ø–µ—Ä–∞—Ü–∏—è': 'operation',
            '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏': 'operation_date',
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π': 'waybill',
            '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è': 'km_left',
            '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞': 'wagon_number',
            '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏': 'operation_road',
        }, inplace=True)
        
        if 'container_number' not in df.columns:
            raise ValueError("–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        df['container_number'] = df['container_number'].astype(str).str.strip().str.upper()
        df['operation_date'] = pd.to_datetime(df['operation_date'], errors='coerce')
        df.dropna(subset=['container_number', 'operation_date'], inplace=True) # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –¥–∞—Ç—ã

        df['km_left'] = pd.to_numeric(df['km_left'], errors='coerce').fillna(0).astype(int)
        df['forecast_days'] = df.apply(lambda row: round(row['km_left'] / 600, 1) if row['km_left'] > 0 else 0.0, axis=1)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for col in ['from_station', 'to_station', 'current_station', 'operation', 'waybill', 'wagon_number', 'operation_road']:
            if col in df.columns:
                df[col] = df[col].astype(str).str.strip().fillna('')
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î
        return df.to_dict('records')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return []

async def check_mail():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î."""
    logger.info("üì¨ [Scheduler] –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã...")
    if not EMAIL or not PASSWORD:
        logger.error("‚ùå EMAIL –∏–ª–∏ PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    loop = asyncio.get_running_loop()
    
    # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
    filepath = await loop.run_in_executor(None, _blocking_fetch_latest_excel)
    if not filepath:
        logger.info("üì™ –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ—á—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    logger.info(f"üì• –°–∫–∞—á–∞–Ω —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª: {os.path.basename(filepath)}")

    # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
    records_to_upsert = await loop.run_in_executor(None, _blocking_process_file, filepath)
    if not records_to_upsert:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(filepath)}.")
        return

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º –ë–î (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
    async with SessionLocal() as session:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º On Conflict (UPSERT) –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        stmt = insert(Tracking).values(records_to_upsert)
        update_dict = {c.name: c for c in stmt.excluded if c.name not in ["id", "container_number"]}
        
        stmt = stmt.on_conflict_do_update(
            index_elements=['container_number'],
            set_=update_dict
        )
        await session.execute(stmt)
        await session.commit()
    
    logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(records_to_upsert)} –∑–∞–ø–∏—Å–µ–π.")
    try:
        os.remove(filepath) # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    except OSError as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filepath}: {e}")

async def start_mail_checking():
    logger.info("üì© –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞...")
    await check_mail()
    logger.info("üîÑ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

