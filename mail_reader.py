import os
import logging
from imap_tools import MailBox
from datetime import datetime
import pandas as pd
from sqlalchemy import delete
from db import SessionLocal
from models import Tracking
import asyncio

logger = logging.getLogger(__name__)

EMAIL = os.getenv('EMAIL')
PASSWORD = os.getenv('PASSWORD')
IMAP_SERVER = os.getenv('IMAP_SERVER', 'imap.yandex.ru')
DOWNLOAD_FOLDER = 'downloads'

os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

def check_mail():
    check_time = datetime.now()
    logger.info(f"üì¨ [Scheduler] === –ù–ê–ß–ê–õ–û –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã: {check_time}")

    if not EMAIL or not PASSWORD:
        logger.error(f"‚ùå EMAIL –∏–ª–∏ PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –í—Ä–µ–º—è: {datetime.now()}")
        logger.info(f"üì¨ [Scheduler] === –ö–û–ù–ï–¶ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã (–æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏): {datetime.now()}")
        return

    try:
        with MailBox(IMAP_SERVER).login(EMAIL, PASSWORD, initial_folder='INBOX') as mailbox:
            latest_file = None
            latest_date = None

            logger.info(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –Ω–∞ {IMAP_SERVER} –Ω–∞—á–∞—Ç–∞: {datetime.now()}")

            for msg in mailbox.fetch():
                for att in msg.attachments:
                    if att.filename.endswith('.xlsx'):
                        msg_date = msg.date
                        if latest_date is None or msg_date > latest_date:
                            latest_date = msg_date
                            latest_file = (att, att.filename)
            if latest_file:
                filepath = os.path.join(DOWNLOAD_FOLDER, latest_file[1])
                with open(filepath, 'wb') as f:
                    f.write(latest_file[0].payload)
                logger.info(f"üì• –°–∫–∞—á–∞–Ω —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª: {filepath} ({datetime.now()})")
                try:
                    loop = asyncio.get_running_loop()
                except RuntimeError:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                loop.create_task(process_file(filepath))
            else:
                logger.warning(f"‚ö† –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö Excel-–≤–ª–æ–∂–µ–Ω–∏–π –≤ –ø–æ—á—Ç–µ. –í—Ä–µ–º—è: {datetime.now()}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e} (–í—Ä–µ–º—è: {datetime.now()})")

    logger.info(f"üì¨ [Scheduler] === –ö–û–ù–ï–¶ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã: {datetime.now()}")

async def process_file(filepath):
    try:
        logger.info(f"üìù –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {filepath} ({datetime.now()})")
        df = pd.read_excel(filepath, skiprows=3)
        if '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' not in df.columns:
            raise ValueError("['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞']")

        # –Ø–í–ù–û –£–ö–ê–ó–´–í–ê–ï–ú –§–û–†–ú–ê–¢ –î–ê–¢–´:
        if '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏' in df.columns:
            # –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –ø—É—Å—Ç–æ - –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∏
            df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏'] = pd.to_datetime(
                df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏'].astype(str).str.strip(),
                format='%d.%m.%Y %H:%M',
                errors='coerce'
            )

        records = []
        for _, row in df.iterrows():
            km_left = int(row.get('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', 0))
            forecast_days = round(km_left / 600, 1) if km_left else 0.0

            record = Tracking(
                container_number=str(row['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞']).strip().upper(),
                from_station=str(row.get('–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '')).strip(),
                to_station=str(row.get('–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '')).strip(),
                current_station=str(row.get('–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip(),
                operation=str(row.get('–û–ø–µ—Ä–∞—Ü–∏—è', '')).strip(),
                operation_date=row.get('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏'),  # —Ç–µ–ø–µ—Ä—å —ç—Ç–æ datetime, –Ω–µ —Å—Ç—Ä–æ–∫–∞!
                waybill=str(row.get('–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '')).strip(),
                km_left=km_left,
                forecast_days=forecast_days,
                wagon_number=str(row.get('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '')).strip(),
                operation_road=str(row.get('–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip()
            )
            records.append(record)

        async with SessionLocal() as session:
            await session.execute(delete(Tracking))
            session.add_all(records)
            await session.commit()

        last_date = df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏'].dropna().max()
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(filepath)} ({datetime.now()})")
        logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(records)}")
        logger.info(f"üïì –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ: {last_date}")
        logger.info(f"üöâ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {df['–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏'].nunique()}")
        logger.info(f"üöõ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {df['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'].nunique()}")
        logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {filepath} ({datetime.now()})")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath}: {e} ({datetime.now()})")

def start_mail_checking():
    logger.info(f"üì© –ó–∞–ø—É—â–µ–Ω–∞ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã: {datetime.now()}")
    check_mail()
    logger.info(f"üîÑ –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now()}")
