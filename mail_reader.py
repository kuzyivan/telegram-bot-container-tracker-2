import os
import logging
from imap_tools import MailBox
import pandas as pd
from sqlalchemy import text
from db import engine  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º engine –Ω–∞–ø—Ä—è–º—É—é
from models import Tracking, TrackingTemp, create_temp_table

logger = logging.getLogger(__name__)

EMAIL = os.getenv('EMAIL')
PASSWORD = os.getenv('PASSWORD')
IMAP_SERVER = os.getenv('IMAP_SERVER', 'imap.yandex.ru')
DOWNLOAD_FOLDER = 'downloads'

os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

async def check_mail():
    logger.info("üì¨ [Scheduler] –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)...")

    if not EMAIL or not PASSWORD:
        logger.error("‚ùå EMAIL –∏–ª–∏ PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    try:
        # imap_tools –Ω–µ async, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ executor, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
        import asyncio
        loop = asyncio.get_running_loop()
        filepath = await loop.run_in_executor(None, fetch_latest_excel)
        
        if filepath:
            logger.info(f"üì• –°–∫–∞—á–∞–Ω —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª: {filepath}")
            await process_file(filepath)
        else:
            logger.info("‚ö† –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö Excel-–≤–ª–æ–∂–µ–Ω–∏–π –≤ –ø–æ—á—Ç–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}", exc_info=True)

def fetch_latest_excel():
    latest_file_info = None
    with MailBox(IMAP_SERVER).login(EMAIL, PASSWORD, initial_folder='INBOX') as mailbox:
        messages = list(mailbox.fetch(reverse=True, limit=10)) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–∏—Å–µ–º
        for msg in messages:
            for att in msg.attachments:
                if att.filename.lower().endswith('.xlsx'):
                    # –ù–∞—à–ª–∏ —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ –ø–∏—Å—å–º–æ —Å –Ω—É–∂–Ω—ã–º —Ñ–∞–π–ª–æ–º, —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
                    filepath = os.path.join(DOWNLOAD_FOLDER, att.filename)
                    with open(filepath, 'wb') as f:
                        f.write(att.payload)
                    return filepath
    return None

async def process_file(filepath):
    try:
        df = pd.read_excel(filepath, skiprows=3)
        if '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' not in df.columns:
            raise ValueError("–í Excel-—Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'")

        records_to_load = []
        for _, row in df.iterrows():
            try:
                km_left = int(row.get('–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', 0))
                forecast_days = round(km_left / 600, 1) if km_left else 0.0

                record = {
                    'container_number': str(row['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞']).strip().upper(),
                    'from_station': str(row.get('–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '')).strip(),
                    'to_station': str(row.get('–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '')).strip(),
                    'current_station': str(row.get('–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip(),
                    'operation': str(row.get('–û–ø–µ—Ä–∞—Ü–∏—è', '')).strip(),
                    'operation_date': str(row.get('–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip(),
                    'waybill': str(row.get('–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '')).strip(),
                    'km_left': km_left,
                    'forecast_days': forecast_days,
                    'wagon_number': str(row.get('–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '')).strip(),
                    'operation_road': str(row.get('–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏', '')).strip()
                }
                records_to_load.append(record)
            except (ValueError, TypeError) as e:
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {row}. –û—à–∏–±–∫–∞: {e}")
                continue
        
        # --- –ê–¢–û–ú–ê–†–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï ---
        await create_temp_table() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

        async with engine.begin() as conn:
            # 1. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            await conn.execute(text(f"TRUNCATE TABLE {TrackingTemp.__tablename__}"))
            
            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            if records_to_load:
                await conn.run_sync(
                    lambda sync_session: sync_session.bulk_insert_mappings(TrackingTemp, records_to_load)
                )

            # 3. –ê—Ç–æ–º–∞—Ä–Ω–æ –º–µ–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –º–µ—Å—Ç–∞–º–∏
            await conn.execute(text("""
                ALTER TABLE IF EXISTS tracking RENAME TO tracking_old;
                ALTER TABLE tracking_temp RENAME TO tracking;
                DROP TABLE IF EXISTS tracking_old;
            """))
            # `engine.begin()` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–º–º–∏—Ç–∏—Ç –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –±–ª–æ–∫–∞

        last_date = df['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏'].dropna().max()
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(filepath)}")
        logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(records_to_load)}")
        logger.info(f"üïì –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ: {last_date}")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}", exc_info=True)
        # –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –∑–¥–µ—Å—å, –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ `tracking` –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç–æ–π

async def start_mail_checking():
    logger.info("üì© –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã...")
    await check_mail()
    logger.info("üîÑ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

