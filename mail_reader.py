import os
import time
import sqlite3
import pandas as pd
from imap_tools import MailBox, AND
from apscheduler.schedulers.background import BackgroundScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
EMAIL = os.getenv('EMAIL')  # –ë–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render
PASSWORD = os.getenv('PASSWORD')
DOWNLOAD_FOLDER = 'downloads'
DB_FILE = 'tracking.db'
DAYS_TO_KEEP = 5  # –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ Excel —Ñ–∞–π–ª—ã

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tracking (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        container_number TEXT,
        departure_station TEXT,
        arrival_station TEXT,
        operation_station TEXT,
        operation_type TEXT,
        operation_datetime TEXT,
        waybill_number TEXT,
        distance_left INTEGER
    )
    ''')
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
def cleanup_old_files():
    now = time.time()
    for filename in os.listdir(DOWNLOAD_FOLDER):
        file_path = os.path.join(DOWNLOAD_FOLDER, filename)
        if os.path.isfile(file_path):
            file_age_days = (now - os.path.getctime(file_path)) / (60 * 60 * 24)
            if file_age_days > DAYS_TO_KEEP:
                os.remove(file_path)
                print(f"üóë –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {filename}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–æ–≤
def check_mail():
    print("üì© –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã...")
    cleanup_old_files()
    try:
        with MailBox('imap.yandex.ru').login(EMAIL, PASSWORD) as mailbox:
            for msg in mailbox.fetch(AND(seen=False, subject=lambda x: x and x.startswith('–û—Ç—á—ë—Ç —Å–ª–µ–∂–µ–Ω–∏—è TrackerTG ‚Ññ'))):
                for att in msg.attachments:
                    if att.filename.startswith('103') and att.filename.endswith('.xlsx'):
                        filepath = os.path.join(DOWNLOAD_FOLDER, att.filename)
                        with open(filepath, 'wb') as f:
                            f.write(att.payload)
                        print(f"üì• –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {filepath}")
                        process_excel(filepath)
                mailbox.flag(msg.uid, MailBox.flags.SEEN, True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞
def process_excel(filepath):
    try:
        df = pd.read_excel(filepath, skiprows=2)
        df.columns = [
            'container_number',
            'departure_station',
            'arrival_station',
            'operation_station',
            'operation_type',
            'operation_datetime',
            'waybill_number',
            'distance_left'
        ]
        df = df.dropna(subset=['container_number'])
        conn = sqlite3.connect(DB_FILE)
        df.to_sql('tracking', conn, if_exists='append', index=False)
        conn.close()
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)} –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(filepath)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")

# –°—Ç–∞—Ä—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
def start_mail_checking():
    init_db()
    scheduler = BackgroundScheduler()
    scheduler.add_job(check_mail, 'interval', minutes=40)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É –∫–∞–∂–¥—ã–µ 40 –º–∏–Ω—É—Ç
    scheduler.start()
    print("üîÑ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–ø—É—â–µ–Ω–∞.")
