# mail_reader.py
from __future__ import annotations

import os
import asyncio
from datetime import datetime
from typing import Optional

import pandas as pd
from sqlalchemy import text
from imap_tools import MailBox, AND  # –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ IMAP

from db import SessionLocal
from models import Tracking  # —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞—ë—Ç—Å—è
from logger import get_logger

# === –ù–æ–≤–æ–µ: –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã ===
from services.container_importer import import_loaded_and_dispatch_from_excel

# –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ (Python 3.9+). –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ pytz.
try:
    from zoneinfo import ZoneInfo  # type: ignore
except Exception:  # fallback –Ω–∞ pytz –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    ZoneInfo = None  # noqa

logger = get_logger(__name__)

EMAIL = os.getenv("EMAIL")
PASSWORD = os.getenv("PASSWORD")
IMAP_SERVER = os.getenv("IMAP_SERVER", "imap.yandex.ru")

# –ü–∞–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á
DOWNLOAD_FOLDER = "downloads"  # –¥–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏
TERMINAL_FOLDER = "data"       # –¥–ª—è Executive summary (—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è –±–∞–∑–∞)

os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)
os.makedirs(TERMINAL_FOLDER, exist_ok=True)


# =========================
# –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê: –î–ò–°–õ–û–ö–ê–¶–ò–Ø
# =========================
async def check_mail():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫).
    –ë–µ—Ä—ë—Ç —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π .xlsx –∏–∑ INBOX –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É tracking.
    """
    logger.info("üì¨ [Scheduler] –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã (–∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç)...")
    if not EMAIL or not PASSWORD:
        logger.error("‚ùå EMAIL –∏–ª–∏ PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    try:
        loop = asyncio.get_running_loop()
        filepath = await loop.run_in_executor(None, fetch_latest_excel)
        if filepath:
            logger.info(f"üì• –°–∫–∞—á–∞–Ω —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª (–¥–∏—Å–ª–æ–∫–∞—Ü–∏—è): {filepath}")
            await process_file(filepath)
        else:
            logger.info("‚ö† –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö Excel-–≤–ª–æ–∂–µ–Ω–∏–π –≤ –ø–æ—á—Ç–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ tracking –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã (tracking): {e}", exc_info=True)


def fetch_latest_excel() -> Optional[str]:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —á–∞—Å—Ç—å: –Ω–∞–π—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π .xlsx –¥–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏.
    """
    latest_file = None
    latest_date = None
    if EMAIL is None or PASSWORD is None:
        logger.error("‚ùå EMAIL –∏–ª–∏ PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return None

    with MailBox(IMAP_SERVER).login(EMAIL, PASSWORD, initial_folder="INBOX") as mailbox:
        for msg in mailbox.fetch(reverse=True):
            for att in msg.attachments:
                if att.filename and att.filename.lower().endswith(".xlsx"):
                    msg_date = msg.date
                    if latest_date is None or (msg_date and msg_date > latest_date):
                        latest_date = msg_date
                        latest_file = (att, att.filename)
        if latest_file:
            filepath = os.path.join(DOWNLOAD_FOLDER, latest_file[1])
            with open(filepath, "wb") as f:
                f.write(latest_file[0].payload)
            return filepath
    return None


async def process_file(filepath: str):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã tracking –∏–∑ Excel (—Å—Ç–∞—Ä—ã–π –ø–æ—Ç–æ–∫). –ß–µ—Ä–µ–∑ temp-—Ç–∞–±–ª–∏—Ü—É.
    """
    import traceback
    try:
        df = pd.read_excel(filepath, skiprows=3)
        if "–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞" not in df.columns:
            raise ValueError("–û–∂–∏–¥–∞–ª–∞—Å—å –∫–æ–ª–æ–Ω–∫–∞ '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞' –≤ —Ñ–∞–π–ª–µ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏")

        records = []
        for _, row in df.iterrows():
            km_left_val = row.get("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è", 0)
            try:
                km_left = int(km_left_val or 0)
            except Exception:
                km_left = 0
            forecast_days = round(km_left / 600, 1) if km_left else 0.0

            record = Tracking(
                container_number=str(row["–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"]).strip().upper(),
                from_station=str(row.get("–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "")).strip(),
                to_station=str(row.get("–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", "")).strip(),
                current_station=str(row.get("–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏", "")).strip(),
                operation=str(row.get("–û–ø–µ—Ä–∞—Ü–∏—è", "")).strip(),
                operation_date=str(row.get("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏", "")).strip(),
                waybill=str(row.get("–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π", "")).strip(),
                km_left=km_left,
                forecast_days=forecast_days,
                wagon_number=str(row.get("–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞", "")).strip(),
                operation_road=str(row.get("–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", "")).strip(),
            )
            records.append(record)

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ë–î (—á–µ—Ä–µ–∑ temp-—Ç–∞–±–ª–∏—Ü—É)
        async with SessionLocal() as session:
            await session.execute(text("CREATE TEMP TABLE IF NOT EXISTS tracking_tmp (LIKE tracking INCLUDING ALL)"))
            await session.execute(text("TRUNCATE tracking_tmp"))

            for record in records:
                await session.execute(
                    text(
                        "INSERT INTO tracking_tmp "
                        "(container_number, from_station, to_station, current_station, operation, "
                        "operation_date, waybill, km_left, forecast_days, wagon_number, operation_road) "
                        "VALUES (:container_number, :from_station, :to_station, :current_station, :operation, "
                        ":operation_date, :waybill, :km_left, :forecast_days, :wagon_number, :operation_road)"
                    ),
                    {
                        "container_number": record.container_number,
                        "from_station": record.from_station,
                        "to_station": record.to_station,
                        "current_station": record.current_station,
                        "operation": record.operation,
                        "operation_date": record.operation_date,
                        "waybill": record.waybill,
                        "km_left": record.km_left,
                        "forecast_days": record.forecast_days,
                        "wagon_number": record.wagon_number,
                        "operation_road": record.operation_road,
                    },
                )

            await session.commit()
            await session.execute(text("TRUNCATE tracking"))
            await session.execute(text("INSERT INTO tracking SELECT * FROM tracking_tmp"))
            await session.execute(text("DROP TABLE IF EXISTS tracking_tmp"))
            await session.commit()

        last_date = df["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏"].dropna().max()
        logger.info(f"‚úÖ tracking –æ–±–Ω–æ–≤–ª—ë–Ω –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(filepath)}")
        logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(records)}")
        logger.info(f"üïì –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ: {last_date}")
        logger.info(f"üöâ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {df['–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏'].nunique()}")
        logger.info(f"üöõ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {df['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'].nunique()}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath}: {e}")
        logger.error(traceback.format_exc())


async def start_mail_checking():
    logger.info("üì© –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏)...")
    await check_mail()
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# ========================================
# –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: Executive summary (—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–∞—è –±–∞–∑–∞)
# ========================================
def _today_vvo_str() -> str:
    """
    –î–∞—Ç–∞ –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ –¥–ª—è —Ç–µ–º—ã –ø–∏—Å—å–º–∞ (DD.MM.YYYY).
    –ï—Å–ª–∏ ZoneInfo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–∞—Ç—É.
    """
    if ZoneInfo:
        return datetime.now(ZoneInfo("Asia/Vladivostok")).strftime("%d.%m.%Y")
    # fallback ‚Äî –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞)
    return datetime.now().strftime("%d.%m.%Y")


def _download_today_terminal_attachment() -> Optional[str]:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –Ω–∞—Ö–æ–¥–∏—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –ø–∏—Å—å–º–æ –æ—Ç aterminal@effex.ru —Å —Ç–µ–º–æ–π
    'Executive summary DD.MM.YYYY', —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç .xlsx –≤ TERMINAL_FOLDER.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ None.
    """
    if not EMAIL or not PASSWORD:
        logger.error("‚ùå EMAIL/PASSWORD –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –Ω–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å Executive summary.")
        return None

    subject_today = f"Executive summary {_today_vvo_str()}"
    SENDER = "aterminal@effex.ru"
    PRIMARY_LIMIT = 5     # —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–º–µ–Ω—å—à–µ –ø–∏—Å–µ–º)
    FALLBACK_LIMIT = 50   # –∑–∞–ø–∞—Å–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é

    logger.info(f"üì¨ –ü–æ–∏—Å–∫ –ø–∏—Å—å–º–∞: '{subject_today}' –æ—Ç {SENDER}")

    with MailBox(IMAP_SERVER).login(EMAIL, PASSWORD, initial_folder="INBOX") as mailbox:
        # 1) –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å + —Ç–æ—á–Ω–∞—è —Ç–µ–º–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        exact_msgs = list(
            mailbox.fetch(
                AND(from_=SENDER, subject=subject_today),
                reverse=True,
                limit=PRIMARY_LIMIT,
            )
        )
        candidates = exact_msgs

        # 2) Fallback: —Å–≤–µ–∂–∏–µ –ø–∏—Å—å–º–∞ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å —Ç–µ–º–æ–π, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è –Ω–∞ "Executive summary"
        if not candidates:
            fallback_msgs = list(
                mailbox.fetch(
                    AND(from_=SENDER),
                    reverse=True,
                    limit=FALLBACK_LIMIT,
                )
            )
            candidates = [
                msg for msg in fallback_msgs
                if (msg.subject or "").lower().startswith("executive summary")
            ]

        if not candidates:
            logger.info("üì≠ –ü–∏—Å—å–º–æ Executive summary –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return None

        msg = candidates[0]
        logger.info(f"‚úâÔ∏è –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–æ: '{msg.subject}' –æ—Ç {msg.date}")

        # –ò—â–µ–º .xlsx –≤–æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö
        for att in (msg.attachments or []):
            if att.filename and att.filename.lower().endswith(".xlsx"):
                save_path = os.path.join(TERMINAL_FOLDER, att.filename)
                with open(save_path, "wb") as f:
                    f.write(att.payload)
                logger.info(f"üì• –í–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {save_path}")
                return save_path

        logger.warning("‚ö†Ô∏è –í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ –Ω–µ—Ç .xlsx —Ñ–∞–π–ª–æ–≤.")
        return None


async def fetch_terminal_excel_and_process():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞: —Å–∫–∞—á–∏–≤–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ Executive summary –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ
    –≤ —Ç–∞–±–ª–∏—Ü—É terminal_containers —á–µ—Ä–µ–∑ services.container_importer.
    """
    try:
        loop = asyncio.get_running_loop()
        filepath = await loop.run_in_executor(None, _download_today_terminal_attachment)
        if not filepath:
            logger.info("‚ö† –ù–µ—Ç —Ñ–∞–π–ª–∞ Executive summary –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.")
            return

        logger.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é –∏–º–ø–æ—Ä—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã –∏–∑: {filepath}")
        await import_loaded_and_dispatch_from_excel(filepath)
        logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Executive summary: {e}")