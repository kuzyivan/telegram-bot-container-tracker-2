import os
import time
import sqlite3
import pandas as pd
from imap_tools import MailBox, AND
from apscheduler.schedulers.background import BackgroundScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL = os.getenv('EMAIL')
PASSWORD = os.getenv('PASSWORD')
DOWNLOAD_FOLDER = 'downloads'
DB_FILE = 'tracking.db'
DAYS_TO_KEEP = 5  # –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tracking (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            container_number TEXT,
            departure_station TEXT,
            arrival_station TEXT,
            operation_station TEXT,
            operation_type TEXT,
            operation_datetime TEXT,
            waybill_number TEXT,
            distance_left INTEGER
        )
    ''')
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
def cleanup_old_files():
    now = time.time()
    for filename in os.listdir(DOWNLOAD_FOLDER):
        file_path = os.path.join(DOWNLOAD_FOLDER, filename)
        if os.path.isfile(file_path):
            age_days = (now - os.path.getctime(file_path)) / (60 * 60 * 24)
            if age_days > DAYS_TO_KEEP:
                os.remove(file_path)
                print(f"üóë –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {filename}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
def check_mail():
    print("üì© –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã...")
    cleanup_old_files()
    print(f"DEBUG: EMAIL={EMAIL!r}, PASSWORD_SET={bool(PASSWORD)}")
    try:
        with MailBox('imap.yandex.ru').login(EMAIL, PASSWORD) as mailbox:
            print("DEBUG: –í—Ö–æ–¥ –≤ –ø–æ—á—Ç—É —É—Å–ø–µ—à–µ–Ω")
            for msg in mailbox.fetch(AND(seen=False)):
                for att in msg.attachments:
                    fname = att.filename or ''
                    print(f"DEBUG: –í–ª–æ–∂–µ–Ω–∏–µ: {fname!r}")
                    if fname.lower().endswith('.xlsx'):
                        fp = os.path.join(DOWNLOAD_FOLDER, fname)
                        with open(fp, 'wb') as f:
                            f.write(att.payload)
                        print(f"üì• –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª: {fp}")
                        process_excel(fp)
                mailbox.flag(msg.uid, MailBox.flags.SEEN, True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel –∏ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
def process_excel(filepath):
    try:
        df = pd.read_excel(filepath, header=2)
        df.columns = [(str(c) or '').strip().replace('\ufeff', '') for c in df.columns]
        df = df.dropna(subset=['–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞'])
        df = df.rename(columns={
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞': 'container_number',
            '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è': 'departure_station',
            '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è': 'arrival_station',
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏': 'operation_station',
            '–û–ø–µ—Ä–∞—Ü–∏—è': 'operation_type',
            '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏': 'operation_datetime',
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π': 'waybill_number',
            '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è': 'distance_left'
        })
        df['operation_datetime'] = df['operation_datetime'].astype(str)
        conn = sqlite3.connect(DB_FILE)
        df.to_sql('tracking', conn, if_exists='append', index=False)
        conn.close()
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {os.path.basename(filepath)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath}: {e}")

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã
def start_mail_checking():
    init_db()
    scheduler = BackgroundScheduler()
    scheduler.add_job(check_mail, 'interval', minutes=40)
    scheduler.start()
    check_mail()
    print("üîÑ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–ø—É—â–µ–Ω–∞.")
