# services/train_importer.py
import re
from pathlib import Path
import pandas as pd

from sqlalchemy import update
from sqlalchemy.future import select

from logger import get_logger
from models import TerminalContainer
from db import AsyncSessionLocal  # –≤–∞—à Async engine/session —Ñ–∞–±—Ä–∏–∫–∞

logger = get_logger(__name__)

# –ò—â–µ–º –∫–∞–∫ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ '–ö', —Ç–∞–∫ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞ 'K'
TRAIN_CODE_RE = re.compile(r'([K–ö]\d{2,}-\d{3})', re.IGNORECASE)

# –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
CONTAINER_COL_CANDIDATES = [
    "–Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
    "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
    "container",
    "container number",
    "‚Ññ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
    "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Ññ",
]

def _extract_train_code_from_filename(filepath: str | Path) -> str:
    name = Path(filepath).stem  # –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    m = TRAIN_CODE_RE.search(name)
    if not m:
        raise ValueError(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥ –ø–æ–µ–∑–¥–∞ –≤–∏–¥–∞ '–ö25-073' –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {name}"
        )
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º: –±–æ–ª—å—à–∞—è '–ö'
    code = m.group(1).upper().replace("K", "–ö")
    return code

def _find_container_column(df: pd.DataFrame) -> str:
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    normalized = {c: str(c).strip().lower() for c in df.columns}
    # —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for c, norm in normalized.items():
        if norm in CONTAINER_COL_CANDIDATES:
            return c
    # –∑–∞—Ç–µ–º –∏—â–µ–º –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    for c, norm in normalized.items():
        if "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä" in norm or "container" in norm:
            return c
    raise ValueError(
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å—Ä–µ–¥–∏: {list(df.columns)}"
    )

async def import_train_from_excel(filepath: str | Path) -> tuple[int, str]:
    """
    –ß–∏—Ç–∞–µ—Ç Excel —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –≤ –ø–æ–µ–∑–¥–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏ –∏
    –º–∞—Å—Å–æ–≤–æ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü `train` = <–∫–æ–¥ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞>
    –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ terminal_containers.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫, –∫–æ–¥_–ø–æ–µ–∑–¥–∞)
    """
    filepath = str(filepath)
    train_code = _extract_train_code_from_filename(filepath)
    logger.info(f"üöÜ –ò–º–ø–æ—Ä—Ç –ø–æ–µ–∑–¥–∞ {train_code} –∏–∑ —Ñ–∞–π–ª–∞: {filepath}")

    # —á–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
    df = pd.read_excel(filepath)
    if df.empty:
        logger.warning("–ü—É—Å—Ç–æ–π Excel ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º.")
        return 0, train_code

    col = _find_container_column(df)
    # —Å–æ–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    numbers = (
        df[col]
        .dropna()
        .astype(str)
        .map(str.strip)
        .map(str.upper)
        .map(lambda s: s.replace(" ", ""))  # –Ω–∞ –≤—Å—è–∫–∏–π
        .tolist()
    )

    # —É–¥–∞–ª–∏–º —è–≤–Ω—ã–µ –º—É—Å–æ—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    numbers = [n for n in numbers if len(n) >= 6]  # –≥—Ä—É–±—ã–π —Ñ–∏–ª—å—Ç—Ä
    numbers = list(dict.fromkeys(numbers))  # —É–Ω–∏–∫–∞–ª–∏–∑—É–µ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    if not numbers:
        logger.warning("–í Excel –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.")
        return 0, train_code

    async with AsyncSessionLocal() as session:
        # –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: train=<code> –≥–¥–µ container_number IN (...)
        # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–µ–∑–¥ –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–∞–º —É–∂–µ —á—Ç–æ-—Ç–æ –±—ã–ª–æ ‚Äî —ç—Ç–æ —è–≤–Ω—ã–π —Ä—É—á–Ω–æ–π –∞–ø–¥–µ–π—Ç
        result = await session.execute(
            update(TerminalContainer)
            .where(TerminalContainer.container_number.in_(numbers))
            .values(train=train_code)
            .execution_options(synchronize_session=False)
        )
        updated = result.rowcount or 0
        await session.commit()

    logger.info(f"‚úÖ –ü–æ–µ–∑–¥ {train_code}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")
    return updated, train_code