# services/terminal_importer.py
import os
import asyncio
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from imap_tools.query import AND

from logger import get_logger
from services.imap_service import ImapService
from services.container_importer import import_loaded_and_dispatch_from_excel

logger = get_logger(__name__)
TERMINAL_DOWNLOAD_FOLDER = "/root/AtermTrackBot/download_container"

def _get_vladivostok_date_str(days_offset: int = 0) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."""
    tz = ZoneInfo("Asia/Vladivostok")
    target_date = datetime.now(tz) - timedelta(days=abs(days_offset))
    return target_date.strftime("%d.%m.%Y")

async def check_and_process_terminal_report() -> dict | None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∏—â–µ—Ç –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç "Executive summary".
    –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç - –∑–∞ –≤—á–µ—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–º–ø–æ—Ä—Ç–∞ –∏–ª–∏ None.
    """
    imap = ImapService()
    filepath = None

    # 1. –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_str = _get_vladivostok_date_str(0)
    logger.info(f"üì• [Terminal] –ò—â—É 'Executive summary' –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today_str})...")
    criteria = AND(from_="aterminal@effex.ru", subject=f"Executive summary {today_str}")
    filepath = await asyncio.to_thread(
        imap.download_latest_attachment, criteria, TERMINAL_DOWNLOAD_FOLDER
    )

    # 2. –ï—Å–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç, –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∑–∞ –≤—á–µ—Ä–∞
    if not filepath:
        yesterday_str = _get_vladivostok_date_str(1)
        logger.info(f"[Terminal] –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—â—É –∑–∞ –≤—á–µ—Ä–∞ ({yesterday_str})...")
        criteria = AND(from_="aterminal@effex.ru", subject=f"Executive summary {yesterday_str}")
        filepath = await asyncio.to_thread(
            imap.download_latest_attachment, criteria, TERMINAL_DOWNLOAD_FOLDER
        )

    if not filepath:
        logger.info("[Terminal] –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª 'Executive summary' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    # 3. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
    try:
        added, sheets = await import_loaded_and_dispatch_from_excel(filepath)
        stats = {
            "file_name": os.path.basename(filepath),
            "total_added": added,
            "sheets_processed": sheets,
        }
        logger.info(f"[Terminal] –ò–º–ø–æ—Ä—Ç –∏–∑ '{os.path.basename(filepath)}' –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ: {added}, –ª–∏—Å—Ç–æ–≤: {sheets}.")
        return stats
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ '{filepath}': {e}", exc_info=True)
        raise