# services/train_importer.py
from __future__ import annotations

import os
import re
from pathlib import Path
from typing import List, Tuple, Set

import pandas as pd
from sqlalchemy import select
from logger import get_logger

from model.terminal_container import TerminalContainer
from db import SessionLocal  # async session factory

logger = get_logger(__name__)

# –ö—É–¥–∞ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º ¬´–ø–æ–µ–∑–¥–Ω—ã–µ¬ª —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –∏—Ö —Ö—Ä–∞–Ω–∏—Ç—å
TRAIN_DOWNLOAD_DIR = "/root/AtermTrackBot/download_train"
os.makedirs(TRAIN_DOWNLOAD_DIR, exist_ok=True)

# –ò–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–≤ Excel –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ‚Äë—Ä–∞–∑–Ω–æ–º—É)
CONTAINER_COL_CANDIDATES = {
    "–Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
    "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
    "container",
    "container number",
    "container_no",
    "container no",
    "‚Ññ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
    "–Ω–æ–º–µ—Ä",
}


def extract_train_code_from_filename(filename: str) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –ø–æ–µ–∑–¥–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    –ü—Ä–∏–º–µ—Ä—ã:
      - '–ö–ü –ö25-073 –°–µ–ª—è—Ç–∏–Ω–æ.xlsx' -> '–ö25-073'
      - –¥–æ–ø—É—Å–∫–∞–µ–º –ª–∞—Ç–∏–Ω—Å–∫—É—é K: '–ö–ü K25-073 ...' -> 'K25-073'
    –®–∞–±–ª–æ–Ω: –±—É–∫–≤–∞ –ö/–ö (–∫–∏—Ä–∏–ª–ª/–ª–∞—Ç–∏–Ω), 2 —Ü–∏—Ñ—Ä—ã, —Ç–∏—Ä–µ, 3 —Ü–∏—Ñ—Ä—ã.
    """
    name = Path(filename).stem
    m = re.search(r"\b[–öK]\d{2}-\d{3}\b", name, flags=re.IGNORECASE)
    if not m:
        return None
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–æ (—Ä–µ–≥–∏—Å—Ç—Ä –∏ –±—É–∫–≤–∞)
    return m.group(0)


def normalize_container(value) -> str | None:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: upper, —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –ø—É—Å—Ç–æ/NaN.
    """
    if value is None:
        return None
    s = str(value).strip().upper()
    s = re.sub(r"\s+", "", s)
    if s in ("", "NAN", "NONE"):
        return None
    return s


def find_container_column(df: pd.DataFrame) -> str | None:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ –Ω–∞–±–æ—Ä—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ ‚Äî –ø–æ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤.
    """
    normalized = {c.lower().strip(): c for c in df.columns}
    for cand in CONTAINER_COL_CANDIDATES:
        if cand in normalized:
            return normalized[cand]
    # –∏–Ω–æ–≥–¥–∞ –≤ —Ñ–∞–π–ª–∞—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –ø–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Äî –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for key_lower, original in normalized.items():
        if "–∫–æ–Ω—Ç–µ–π–Ω" in key_lower or "contain" in key_lower:
            return original
    return None


async def _collect_containers_from_excel(file_path: str) -> List[str]:
    """
    –ß–∏—Ç–∞–µ—Ç –≤—Å–µ –ª–∏—Å—Ç—ã Excel –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏.
    –î—É–±–ª–∏–∫–∞—Ç—ã –≤—ã–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤.
    """
    xls = pd.ExcelFile(file_path)
    containers: Set[str] = set()

    for sheet in xls.sheet_names:
        try:
            df = pd.read_excel(file_path, sheet_name=sheet)
        except Exception as e:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–∏—Å—Ç '%s': %s", sheet, e)
            continue

        if df.empty:
            continue

        col = find_container_column(df)
        if not col:
            logger.debug("–ù–∞ –ª–∏—Å—Ç–µ '%s' –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", sheet)
            continue

        for v in df[col].tolist():
            cn = normalize_container(v)
            if cn:
                containers.add(cn)

    return sorted(containers)


async def import_train_excel(src_file_path: str) -> Tuple[int, int, str]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
      - –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –ø–æ–µ–∑–¥–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞,
      - –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤ TRAIN_DOWNLOAD_DIR (–∫–∞–∫ –∞—Ä—Ö–∏–≤–Ω—É—é –∫–æ–ø–∏—é),
      - —á–∏—Ç–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã,
      - –æ–±–Ω–æ–≤–ª—è–µ—Ç terminal_containers.train –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (updated_count, not_found_count, train_code).
    """
    # 1) –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞
    train_code = extract_train_code_from_filename(src_file_path)
    if not train_code:
        raise ValueError(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –ø–æ–µ–∑–¥–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞. "
            "–û–∂–∏–¥–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω –≤—Ä–æ–¥–µ '–ö25-073' (–ö/–ö, 2 —Ü–∏—Ñ—Ä—ã, '-', 3 —Ü–∏—Ñ—Ä—ã)."
        )
    logger.info("üöÇ –û–ø—Ä–µ–¥–µ–ª—ë–Ω –ø–æ–µ–∑–¥: %s (–∏–∑ '%s')", train_code, src_file_path)

    # 2) –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ download_train –¥–ª—è –∞—Ä—Ö–∏–≤–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
    try:
        dst_name = Path(src_file_path).name
        dst_path = str(Path(TRAIN_DOWNLOAD_DIR) / dst_name)
        if os.path.abspath(src_file_path) != os.path.abspath(dst_path):
            # –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(src_file_path, "rb") as r, open(dst_path, "wb") as w:
                w.write(r.read())
        logger.info("üì¶ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s", dst_path)
    except Exception as e:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ö–∏–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞: %s", e)

    # 3) –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏–∑ Excel
    containers = await _collect_containers_from_excel(src_file_path)
    if not containers:
        logger.info("üõà –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤. –ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å.")
        return (0, 0, train_code)

    logger.info("üîç –í —Ñ–∞–π–ª–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: %d", len(containers))

    # 4) –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É
    updated = 0
    not_found = 0

    async with SessionLocal() as session:
        # –°—Ä–∞–∑—É –≤—ã—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ, —á—Ç–æ –µ—Å—Ç—å –≤ –ë–î
        stmt = select(TerminalContainer).where(TerminalContainer.container_number.in_(containers))
        res = await session.execute(stmt)
        found_objects: List[TerminalContainer] = list(res.scalars())

        found_set = {obj.container_number for obj in found_objects}
        missing_set = set(containers) - found_set

        # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–µ–∑–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
        for obj in found_objects:
            obj.train = train_code
        updated = len(found_objects)

        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await session.commit()

        not_found = len(missing_set)

    logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç –ø–æ–µ–∑–¥–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω: –æ–±–Ω–æ–≤–ª–µ–Ω–æ %d, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î %d. –ü–æ–µ–∑–¥: %s",
                updated, not_found, train_code)
    if not_found:
        logger.debug("–ù–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (–ø–µ—Ä–≤—ã–µ 20): %s",
                     ", ".join(list(missing_set)[:20]))

    return (updated, not_found, train_code)


# –£–¥–æ–±–Ω—ã–π CLI-—Ö–µ–ª–ø–µ—Ä:
#   python -m services.train_importer "/path/–ö–ü –ö25-073 –°–µ–ª—è—Ç–∏–Ω–æ.xlsx"
if __name__ == "__main__":
    import asyncio
    import sys

    if len(sys.argv) < 2:
        print("Usage: python -m services.train_importer \"/path/–ö–ü –ö25-073 –°–µ–ª—è—Ç–∏–Ω–æ.xlsx\"")
        raise SystemExit(1)

    path = sys.argv[1]
    if not Path(path).is_file():
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        raise SystemExit(1)

    updated, not_found, train = asyncio.run(import_train_excel(path))
    print(f"–ì–æ—Ç–æ–≤–æ. –ü–æ–µ–∑–¥ {train}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated}, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {not_found}.")