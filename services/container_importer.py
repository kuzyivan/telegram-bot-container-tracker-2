# services/container_importer.py
from __future__ import annotations

import os
import re
from typing import List, Tuple, Iterable

import pandas as pd
from sqlalchemy import text

from db import SessionLocal
from logger import get_logger

logger = get_logger(__name__)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –£—Ç–∏–ª–∏—Ç—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def extract_train_code_from_filename(filename: str) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –ø–æ–µ–∑–¥–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    –ü—Ä–∏–º–µ—Ä—ã:
      '–ö–ü –ö25-073 –°–µ–ª—è—Ç–∏–Ω–æ.xlsx' -> '–ö25-073'
      '–ö–ü –ö24-101 –ù–∞—Ö–æ–¥–∫–∞.xls'   -> '–ö24-101'
    –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–∞ –ö–î–î-–ù–ù–ù.
    """
    name = os.path.basename(filename)
    m = re.search(r"–ö\d{2}-\d{3}", name, flags=re.IGNORECASE)
    if not m:
        return None
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ö –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    code = m.group(0)
    code = "–ö" + code[1:]  # –Ω–∞ —Å–ª—É—á–∞–π '–∫25-073'
    return code


def normalize_container(value) -> str | None:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –∫ –Ω–æ–º–µ—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
    –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—É—Å—Ç—ã–µ / nan.
    """
    if value is None:
        return None
    s = str(value).strip().upper()
    if not s or s == "NAN":
        return None
    # —á–∞—Å—Ç–∞—è –∑–∞–ø–∏—Å—å —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ ‚Äî —É–±–µ—Ä—ë–º
    s = re.sub(r"\s+", "", s)
    return s


def find_container_column(df: pd.DataFrame) -> str | None:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ —Ä—É—Å/–∞–Ω–≥–ª –∫–ª—é—á–∞–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –ª–∏–±–æ None.
    """
    lowered = {str(c).strip(): str(c).strip().lower() for c in df.columns}
    # –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    keys = [
        "–Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
        "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä",
        "container",
        "container no",
        "container number",
        "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Ññ",
        "‚Ññ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞",
    ]
    for orig, low in lowered.items():
        if any(k in low for k in keys):
            return orig
    return None


async def _collect_containers_from_excel(file_path: str) -> List[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–∑ Excel‚Äë—Ñ–∞–π–ª–∞ (–≤—Å–µ –ª–∏—Å—Ç—ã –ø–æ–¥—Ä—è–¥).
    –ë–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏.
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(file_path)

    xls = pd.ExcelFile(file_path)
    containers: List[str] = []

    for sheet in xls.sheet_names:
        try:
            df = pd.read_excel(file_path, sheet_name=sheet)
        except Exception:
            continue
        col = find_container_column(df)
        if not col:
            continue

        vals = [normalize_container(v) for v in df[col].dropna().tolist()]
        vals = [v for v in vals if v]
        containers.extend(vals)

    # —É–±–µ—Ä—ë–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    seen = set()
    uniq: List[str] = []
    for c in containers:
        if c not in seen:
            seen.add(c)
            uniq.append(c)
    return uniq


def _chunks(seq: Iterable[str], size: int) -> Iterable[List[str]]:
    buf: List[str] = []
    for x in seq:
        buf.append(x)
        if len(buf) >= size:
            yield buf
            buf = []
    if buf:
        yield buf


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ò–º–ø–æ—Ä—Ç Executive summary (Dispatch*/Loaded*) ‚Üí terminal_containers
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def import_loaded_and_dispatch_from_excel(file_path: str) -> Tuple[int, int]:
    """
    –ò–º–ø–æ—Ä—Ç –∏–∑ –æ—Ç—á—ë—Ç–∞ Executive summary:
      - –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –Ω–∞ 'Dispatch' / 'Loaded'
      - –∏—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
      - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ terminal_containers (—Ç–æ–ª—å–∫–æ container_number)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (added_total, processed_sheets)
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(file_path)

    xls = pd.ExcelFile(file_path)
    sheet_names = xls.sheet_names
    target_sheets = [
        s for s in sheet_names
        if str(s).strip().lower().startswith("dispatch")
        or str(s).strip().lower().startswith("loaded")
    ]

    added_total = 0
    processed = 0

    async with SessionLocal() as session:
        for sheet in target_sheets:
            try:
                df = pd.read_excel(file_path, sheet_name=sheet)
                col = find_container_column(df)
                if not col:
                    logger.warning(f"[Executive summary] –ù–∞ –ª–∏—Å—Ç–µ '{sheet}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏.")
                    continue

                values = [normalize_container(v) for v in df[col].dropna().tolist()]
                containers = [v for v in values if v]

                if not containers:
                    processed += 1
                    continue

                # –≤—Å—Ç–∞–≤–∫–∞ –±–µ–∑ –¥—É–±–ª–µ–π
                for cn in containers:
                    res = await session.execute(
                        text("""
                            INSERT INTO terminal_containers (container_number)
                            VALUES (:cn)
                            ON CONFLICT (container_number) DO NOTHING
                        """),
                        {"cn": cn},
                    )
                    # rowcount == 1 –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –≤—Å—Ç–∞–≤–∏–ª–∏
                    try:
                        if res.rowcount and res.rowcount > 0:
                            added_total += 1
                    except Exception:
                        # –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–∞—Ö rowcount –º–æ–∂–µ—Ç –±—ã—Ç—å -1 ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä
                        pass

                await session.commit()
                processed += 1

            except Exception as e:
                logger.exception(f"[Executive summary] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—Å—Ç–∞ '{sheet}': {e}")

    logger.info(f"üì• –ò–º–ø–æ—Ä—Ç Executive summary: –ª–∏—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ={processed}, –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤={added_total}")
    return added_total, processed


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ò–º–ø–æ—Ä—Ç ¬´–ø–æ–µ–∑–¥–Ω—ã—Ö¬ª —Ñ–∞–π–ª–æ–≤ ‚Üí –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ terminal_containers.train
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def import_train_excel(src_file_path: str) -> Tuple[int, int, str]:
    """
    –ò–º–ø–æ—Ä—Ç —Ä—É—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–µ–∑–¥–æ–º.
    - –∫–æ–¥ –ø–æ–µ–∑–¥–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—Ñ–æ—Ä–º–∞—Ç '–ö25-073');
    - –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤;
    - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è UPDATE terminal_containers.train –¥–ª—è —ç—Ç–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (updated_count, containers_total, train_code).
    """
    if not os.path.exists(src_file_path):
        raise FileNotFoundError(src_file_path)

    train_code = extract_train_code_from_filename(src_file_path)
    if not train_code:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–¥ –ø–æ–µ–∑–¥–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω '–ö–î–î-–ù–ù–ù'.")

    containers = await _collect_containers_from_excel(src_file_path)
    total = len(containers)
    if total == 0:
        logger.info(f"[Train] –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {os.path.basename(src_file_path)}")
        return 0, 0, train_code

    updated_sum = 0
    async with SessionLocal() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—á–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        for chunk in _chunks(containers, 500):
            res = await session.execute(
                text("""
                    UPDATE terminal_containers
                       SET train = :train
                     WHERE container_number = ANY(:cn_list)
                """),
                {"train": train_code, "cn_list": chunk},
            )
            try:
                if res.rowcount and res.rowcount > 0:
                    updated_sum += res.rowcount
            except Exception:
                pass

        await session.commit()

    logger.info(f"üöÜ –ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–µ–∑–¥ {train_code}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_sum} –∏–∑ {total} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ "
                f"({os.path.basename(src_file_path)})")
    return updated_sum, total, train_code