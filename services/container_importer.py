import os
import pandas as pd
from datetime import datetime
from sqlalchemy import select
from db import SessionLocal
from model.terminal_container import TerminalContainer
from logger import get_logger

logger = get_logger(__name__)

async def import_loaded_and_dispatch_from_excel(filepath: str):
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–æ–≤ Loaded* –∏ Dispatch* Excel-—Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î.
    """
    logger.info(f"üìä –ò–º–ø–æ—Ä—Ç –∏–∑ Excel: {filepath}")
    sheet_names = pd.ExcelFile(filepath).sheet_names

    async with SessionLocal() as session:
        added_count = 0

        for sheet in sheet_names:
            if not (sheet.lower().startswith("loaded") or sheet.lower().startswith("dispatch")):
                continue

            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: {sheet}")
            try:
                df = pd.read_excel(filepath, sheet_name=sheet)

                for _, row in df.iterrows():
                    container_number = str(row.get("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä")).strip().upper()
                    if not container_number or container_number == "nan":
                        continue

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ
                    exists = await session.execute(
                        select(TerminalContainer).where(TerminalContainer.container_number == container_number)
                    )
                    if exists.scalar_one_or_none():
                        continue  # —É–∂–µ –≤ –±–∞–∑–µ

                    new_record = TerminalContainer(
                        container_number=container_number,
                        terminal=str(row.get("–¢–µ—Ä–º–∏–Ω–∞–ª")).strip(),
                        zone=str(row.get("–ó–æ–Ω–∞")).strip(),
                        inn=str(row.get("–ò–ù–ù")).strip(),
                        short_name=str(row.get("–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")).strip(),
                        client=str(row.get("–ö–ª–∏–µ–Ω—Ç")).strip(),
                        stock=str(row.get("–°—Ç–æ–∫")).strip(),
                        customs_mode=str(row.get("–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")).strip(),
                        destination_station=str(row.get("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")).strip(),
                        note=str(row.get("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ")).strip(),
                        raw_comment=str(row.get("Unnamed: 36")).strip(),
                        status_comment=str(row.get("Unnamed: 37")).strip(),
                        created_at=datetime.utcnow()
                    )

                    session.add(new_record)
                    added_count += 1

                logger.info(f"‚úÖ {sheet}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Å—Ç–∞ {sheet}: {e}")

        await session.commit()
        logger.info(f"üì• –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}")