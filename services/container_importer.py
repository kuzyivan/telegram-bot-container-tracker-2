# services/container_importer.py
import pandas as pd
from datetime import datetime
from sqlalchemy.dialects.postgresql import insert
from db import SessionLocal
from model.terminal_container import TerminalContainer
from logger import get_logger

logger = get_logger(__name__)

def _s(val):
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ: None/NaN -> None, —Å—Ç—Ä–æ–∫–∞ -> .strip()
    if val is None or (isinstance(val, float) and pd.isna(val)) or (isinstance(val, str) and val.strip().lower() == 'nan'):
        return None
    return str(val).strip()

async def import_loaded_and_dispatch_from_excel(filepath: str):
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–æ–≤ Loaded* –∏ Dispatch* Excel-—Ñ–∞–π–ª–∞ –≤ terminal_containers.
    –î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ container_number –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î (ON CONFLICT DO NOTHING).
    """
    logger.info(f"üìä –ò–º–ø–æ—Ä—Ç –∏–∑ Excel: {filepath}")
    xls = pd.ExcelFile(filepath)
    sheet_names = xls.sheet_names

    added_total = 0

    async with SessionLocal() as session:
        for sheet in sheet_names:
            if not (sheet.lower().startswith("loaded") or sheet.lower().startswith("dispatch")):
                continue

            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: {sheet}")
            try:
                df = pd.read_excel(filepath, sheet_name=sheet)

                # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞
                # –ü–æ–¥–ø—Ä–∞–≤—å—Ç–µ, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è:
                col = {
                    "container": "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä",
                    "terminal": "–¢–µ—Ä–º–∏–Ω–∞–ª",
                    "zone": "–ó–æ–Ω–∞",
                    "inn": "–ò–ù–ù",
                    "short_name": "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
                    "client": "–ö–ª–∏–µ–Ω—Ç",
                    "stock": "–°—Ç–æ–∫",
                    "customs_mode": "–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º",
                    "dest": "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                    "note": "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ",
                    "raw_comment": "Unnamed: 36",
                    "status_comment": "Unnamed: 37",
                }

                added_sheet = 0
                for _, row in df.iterrows():
                    cn = _s(row.get(col["container"]))
                    if not cn:
                        continue
                    cn = cn.upper()

                    payload = {
                        "container_number": cn,
                        "terminal": _s(row.get(col["terminal"])),
                        "zone": _s(row.get(col["zone"])),
                        "inn": _s(row.get(col["inn"])),
                        "short_name": _s(row.get(col["short_name"])),
                        "client": _s(row.get(col["client"])),
                        "stock": _s(row.get(col["stock"])),
                        "customs_mode": _s(row.get(col["customs_mode"])),
                        "destination_station": _s(row.get(col["dest"])),
                        "note": _s(row.get(col["note"])),
                        "raw_comment": _s(row.get(col["raw_comment"])),
                        "status_comment": _s(row.get(col["status_comment"])),
                        "created_at": datetime.utcnow(),
                    }

                    # UPSERT: –≤—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏–Ω–∞—á–µ –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                    stmt = (
                        insert(TerminalContainer)
                        .values(**payload)
                        .on_conflict_do_nothing(index_elements=[TerminalContainer.container_number])
                    )
                    res = await session.execute(stmt)
                    # res.rowcount == 1 –µ—Å–ª–∏ –≤—Å—Ç–∞–≤–∏–ª–∏, 0 –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏
                    if getattr(res, "rowcount", 0) == 1:
                        added_sheet += 1
                        added_total += 1

                await session.commit()
                logger.info(f"‚úÖ {sheet}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_sheet} –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")

            except Exception as e:
                # –ù–∞ –≤—Å—è–∫–∏–π –ø–æ–∂–∞—Ä–Ω—ã–π ‚Äî –æ—Ç–∫–∞—Ç –ª–∏—Å—Ç–∞ –∏ –ª–æ–≥
                await session.rollback()
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Å—Ç–∞ {sheet}: {e}", exc_info=True)

    logger.info(f"üì• –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {added_total}")