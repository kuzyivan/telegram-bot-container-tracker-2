# services/train_event_notifier.py
from collections import defaultdict
from sqlalchemy import select, insert, and_, or_
from sqlalchemy.exc import IntegrityError
from typing import List, Dict

from db import SessionLocal
from models import TrainOperationEvent, TerminalContainer
from utils.notify import notify_admin
from logger import get_logger

logger = get_logger(__name__)

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ >>>
TARGET_OPERATIONS = ["–≤—ã–≥—Ä—É–∑–∫–∞", "–±—Ä–æ—Å–∞–Ω–∏–µ", "–≤–∫–ª—é—á–µ–Ω–∏–µ"]

async def _get_trains_for_containers(container_numbers: List[str]) -> Dict[str, str]:
    """–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."""
    if not container_numbers:
        return {}
    
    async with SessionLocal() as session:
        result = await session.execute(
            select(TerminalContainer.container_number, TerminalContainer.train)
            .where(TerminalContainer.container_number.in_(container_numbers))
        )
        return {row.container_number: row.train for row in result if row.train}

async def process_dislocation_for_train_events(records: List[Dict]):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ–µ–∑–¥–∞.
    """
    # 1. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –Ω–∞—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
    target_records = [
        rec for rec in records
        if any(op in rec.get("operation", "").lower() for op in TARGET_OPERATIONS)
    ]
    if not target_records:
        return

    # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    container_to_train = await _get_trains_for_containers([r["container_number"] for r in target_records])

    # 3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É (–ø–æ–µ–∑–¥, –æ–ø–µ—Ä–∞—Ü–∏—è, —Å—Ç–∞–Ω—Ü–∏—è, –¥–∞—Ç–∞)
    unique_events = {}
    for rec in target_records:
        train = container_to_train.get(rec["container_number"])
        if not train:
            continue
        
        event_key = (
            train,
            rec["operation"],
            rec["current_station"],
            rec["operation_date"]
        )
        
        if event_key not in unique_events:
            unique_events[event_key] = rec # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä–∞—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∞ —Å–æ–±—ã—Ç–∏–µ

    if not unique_events:
        logger.info("–ù–∞–π–¥–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–µ–∑–¥–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
        return

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ –∫–∞–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª—è–ª–∏
    async with SessionLocal() as session:
        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
        event_filters = []
        for train, op, station, date in unique_events.keys():
            event_filters.append(
                and_(
                    TrainOperationEvent.train_number == train,
                    TrainOperationEvent.operation == op,
                    TrainOperationEvent.station == station,
                    TrainOperationEvent.operation_date == date
                )
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        if event_filters:
            existing_events_query = select(TrainOperationEvent).where(or_(*event_filters))
            existing_events_result = await session.execute(existing_events_query)
            existing_events = {(e.train_number, e.operation, e.station, e.operation_date) for e in existing_events_result.scalars().all()}
        else:
            existing_events = set()


    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
    new_events_to_notify = []
    for key, record_data in unique_events.items():
        if key not in existing_events:
            new_events_to_notify.append(record_data)
            
    if not new_events_to_notify:
        logger.info("–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –ø–æ–µ–∑–¥–∞–º —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.")
        return

    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(new_events_to_notify)} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –ø–æ–µ–∑–¥–∞–º. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    for rec in new_events_to_notify:
        train = container_to_train.get(rec["container_number"], "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        message = (
            f"üì¶ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä*: `{rec['container_number']}` (–∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ–µ–∑–¥–∞)\n"
            f"üöÇ *–ü–æ–µ–∑–¥*: `{train}`\n\n"
            f"üõ§ *–ú–∞—Ä—à—Ä—É—Ç*:\n`{rec.get('from_station', 'N/A')}` üöÇ ‚Üí `{rec.get('to_station', 'N/A')}`\n\n"
            f"üìç *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è*: {rec.get('current_station', 'N/A')} üõ§Ô∏è ({rec.get('operation_road', 'N/A')})\n"
            f"üìÖ *–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è*:\n{rec.get('operation_date', 'N/A')} ‚Äî _{rec.get('operation', 'N/A')}_"
        )
        await notify_admin(message, silent=False)

    # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async with SessionLocal() as session:
        new_event_rows = [
            {
                "train_number": container_to_train.get(rec["container_number"]),
                "operation": rec["operation"],
                "station": rec["current_station"],
                "operation_date": rec["operation_date"]
            }
            for rec in new_events_to_notify if container_to_train.get(rec["container_number"])
        ]
        if new_event_rows:
            try:
                await session.execute(insert(TrainOperationEvent), new_event_rows)
                await session.commit()
            except IntegrityError:
                logger.warning("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ–µ–∑–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞ –ë–î.")
                await session.rollback()