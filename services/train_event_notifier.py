# services/train_event_notifier.py
from sqlalchemy import select, insert, and_, or_
from sqlalchemy.exc import IntegrityError
from typing import List, Dict

from db import SessionLocal
from models import TrainOperationEvent, TerminalContainer
from utils.notify import notify_admin
from logger import get_logger

logger = get_logger(__name__)

TARGET_OPERATIONS = ["–≤—ã–≥—Ä—É–∑–∫–∞", "–±—Ä–æ—Å–∞–Ω–∏–µ", "–≤–∫–ª—é—á–µ–Ω–∏–µ"]

async def _get_trains_for_containers(container_numbers: List[str]) -> Dict[str, str]:
    """–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ–µ–∑–¥–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."""
    if not container_numbers:
        return {}
    
    async with SessionLocal() as session:
        result = await session.execute(
            select(TerminalContainer.container_number, TerminalContainer.train)
            .where(TerminalContainer.container_number.in_(container_numbers))
        )
        return {row.container_number: row.train for row in result if row.train}

async def process_dislocation_for_train_events(records: List[Dict]):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ–µ–∑–¥–∞.
    """
    target_records = [
        rec for rec in records
        if any(op in rec.get("operation", "").lower() for op in TARGET_OPERATIONS)
    ]
    if not target_records:
        return

    container_to_train = await _get_trains_for_containers([r["container_number"] for r in target_records])

    unique_events = {}
    for rec in target_records:
        train = container_to_train.get(rec["container_number"])
        if not train:
            continue
        
        op_text = rec["operation"].lower()
        op_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if "–≤—ã–≥—Ä—É–∑–∫–∞" in op_text:
            op_type = "–≤—ã–≥—Ä—É–∑–∫–∞"
        elif "–±—Ä–æ—Å–∞–Ω–∏–µ" in op_text:
            op_type = "–±—Ä–æ—Å–∞–Ω–∏–µ"
        elif "–≤–∫–ª—é—á–µ–Ω–∏–µ" in op_text:
            op_type = "–≤–∫–ª—é—á–µ–Ω–∏–µ"

        date_only = rec["operation_date"].split(' ')[0]

        event_key = (train, op_type, rec["current_station"], date_only)
        
        if event_key not in unique_events:
            unique_events[event_key] = rec

    if not unique_events:
        return

    async with SessionLocal() as session:
        event_filters = []
        for train, op, station, date in unique_events.keys():
            event_filters.append(
                and_(
                    TrainOperationEvent.train_number == train,
                    TrainOperationEvent.operation == op,
                    TrainOperationEvent.station == station,
                    TrainOperationEvent.operation_date == date
                )
            )
        
        if event_filters:
            existing_events_query = select(TrainOperationEvent).where(or_(*event_filters))
            existing_events_result = await session.execute(existing_events_query)
            existing_events = {(e.train_number, e.operation, e.station, e.operation_date) for e in existing_events_result.scalars().all()}
        else:
            existing_events = set()

    new_events_to_notify_keys = []
    for key in unique_events.keys():
        if key not in existing_events:
            new_events_to_notify_keys.append(key)
            
    if not new_events_to_notify_keys:
        logger.info("–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –ø–æ–µ–∑–¥–∞–º —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.")
        return

    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(new_events_to_notify_keys)} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –ø–æ–µ–∑–¥–∞–º. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    for key in new_events_to_notify_keys:
        rec = unique_events[key]
        train = key[0]
        
        title = "‚ùóÔ∏èüîî *–ù–û–í–´–ô –°–¢–ê–¢–£–° –ü–û–ï–ó–î–ê* üîî‚ùóÔ∏è\n\n"
        message = (
            title +
            f"üì¶ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä*: `{rec['container_number']}` (–∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ø–æ–µ–∑–¥–∞)\n"
            f"üöÇ *–ü–æ–µ–∑–¥*: `{train}`\n\n"
            f"üõ§ *–ú–∞—Ä—à—Ä—É—Ç*:\n`{rec.get('from_station', 'N/A')}` üöÇ ‚Üí `{rec.get('to_station', 'N/A')}`\n\n"
            f"üìç *–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è*: `{rec.get('current_station', 'N/A')}` üõ§Ô∏è ({rec.get('operation_road', 'N/A')})\n"
            f"üìÖ *–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—è*:\n{rec.get('operation_date', 'N/A')} ‚Äî _{rec.get('operation', 'N/A')}_"
        )
        await notify_admin(message, silent=False) # –í—ã–∑—ã–≤–∞–µ–º –±–µ–∑ parse_mode, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Markdown –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    async with SessionLocal() as session:
        new_event_rows = [
            {"train_number": key[0], "operation": key[1], "station": key[2], "operation_date": key[3]}
            for key in new_events_to_notify_keys
        ]
        if new_event_rows:
            try:
                await session.execute(insert(TrainOperationEvent), new_event_rows)
                await session.commit()
            except IntegrityError:
                logger.warning("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ–µ–∑–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞ –ë–î.")
                await session.rollback()