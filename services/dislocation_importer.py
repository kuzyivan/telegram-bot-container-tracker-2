# services/dislocation_importer.py

import asyncio
import os
import re
import pandas as pd
from typing import Optional
from logger import get_logger
from services.imap_service import ImapService
from services.train_event_notifier import process_dislocation_for_train_events
from db import SessionLocal
from models import Tracking
from config import TRACKING_REPORT_COLUMNS

logger = get_logger(__name__)
imap_service = ImapService()
DOWNLOAD_DIR = 'downloads'

# --- –ö–û–ù–°–¢–ê–ù–¢–´ IMAP ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º REGEX –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏ —Ç–µ–º—ã
SUBJECT_FILTER_DISLOCATION = r'^–û—Ç—á—ë—Ç —Å–ª–µ–∂–µ–Ω–∏—è TrackerBot ‚Ññ'
SENDER_FILTER_DISLOCATION = 'cargolk@gvc.rzd.ru' 
# –ú—è–≥–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (.xlsx –∏–ª–∏ .xls)
FILENAME_PATTERN_DISLOCATION = r'^.*\.(xlsx|xls)$'
# ----------------------

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ---

def _read_excel_data(filepath: str) -> Optional[pd.DataFrame]:
    """–°—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel-—Ñ–∞–π–ª–∞."""
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        df = pd.read_excel(filepath) 
        # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã/–∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        df.columns = [c.strip().lower().replace(' ', '_') for c in df.columns]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.dropna(how='all')
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        required_cols = [c.lower().replace(' ', '_') for c in TRACKING_REPORT_COLUMNS]
        df = df.reindex(columns=required_cols)
        
        return df
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞ {filepath}: {e}", exc_info=True)
        return None

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞ ---

async def process_dislocation_file(filepath: str) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    logger.info(f"[Dislocation Import] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {os.path.basename(filepath)}")
    
    df = await asyncio.to_thread(_read_excel_data, filepath)
    if df is None or df.empty:
        logger.warning(f"[Dislocation Import] –§–∞–π–ª {os.path.basename(filepath)} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return 0

    records_to_insert = df.to_dict('records')
    inserted_count = 0

    async with SessionLocal() as session:
        async with session.begin():
            for record in records_to_insert:
                container_number = record.get('–Ω–æ–º–µ—Ä_–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞') 
                if not container_number:
                    continue

                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï PYLANCE: –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ kwargs
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤ str –∏ —É–¥–∞–ª—è–µ–º NaN/None, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
                cleaned_record = {
                    str(k): v for k, v in record.items() if pd.notna(v)
                }

                # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                await session.merge(Tracking(container_number=str(container_number), **cleaned_record))
                inserted_count += 1
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–µ–∑–¥–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π Tracking)
            try:
                await process_dislocation_for_train_events(records_to_insert)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ {filepath}: {e}", exc_info=True)

            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'tracking' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {inserted_count}.")

    return inserted_count


async def check_and_process_dislocation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á—Ç—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö."""
    
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º REGEX –¥–ª—è —Ç–µ–º—ã
        filepath = await asyncio.to_thread(
            imap_service.download_latest_attachment,
            subject_filter=SUBJECT_FILTER_DISLOCATION,
            sender_filter=SENDER_FILTER_DISLOCATION,
            filename_pattern=FILENAME_PATTERN_DISLOCATION
        )

        if filepath:
            try:
                await process_dislocation_file(filepath)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ {filepath}: {e}", exc_info=True)
            finally:
                if os.path.exists(filepath):
                    os.remove(filepath)
                    logger.info(f"[Dislocation Import] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {os.path.basename(filepath)} —É–¥–∞–ª–µ–Ω.")
        else:
            logger.info("üì¨ [Dislocation] –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        raise e