# services/dislocation_importer.py

import asyncio
import os
import re
import pandas as pd
from typing import Optional
from logger import get_logger
from services.imap_service import ImapService
from services.train_event_notifier import process_dislocation_for_train_events
from db import SessionLocal
from models import Tracking
from sqlalchemy import update, insert 
from config import TRACKING_REPORT_COLUMNS
from datetime import datetime

logger = get_logger(__name__)
imap_service = ImapService()
DOWNLOAD_DIR = 'downloads'

# ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–õ–û–í–ê–†–¨ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø
COLUMN_MAPPING = {
    '–Ω–æ–º–µ—Ä_–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞': 'container_number',
    '—Å—Ç–∞–Ω—Ü–∏—è_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è': 'from_station',
    '—Å—Ç–∞–Ω—Ü–∏—è_–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è': 'to_station',
    '—Å—Ç–∞–Ω—Ü–∏—è_–æ–ø–µ—Ä–∞—Ü–∏–∏': 'current_station',  
    '–æ–ø–µ—Ä–∞—Ü–∏—è': 'operation',
    '–¥–∞—Ç–∞_–∏_–≤—Ä–µ–º—è_–æ–ø–µ—Ä–∞—Ü–∏–∏': 'operation_date',
    '–Ω–æ–º–µ—Ä_–Ω–∞–∫–ª–∞–¥–Ω–æ–π': 'waybill',
    '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ_–æ—Å—Ç–∞–≤—à–µ–µ—Å—è': 'km_left',
    '–Ω–æ–º–µ—Ä_–≤–∞–≥–æ–Ω–∞': 'wagon_number',
    '–¥–æ—Ä–æ–≥–∞_–æ–ø–µ—Ä–∞—Ü–∏–∏': 'operation_road',
}

# --- –ö–û–ù–°–¢–ê–ù–¢–´ IMAP ---
SUBJECT_FILTER_DISLOCATION = r'^–û—Ç—á—ë—Ç —Å–ª–µ–∂–µ–Ω–∏—è TrackerBot ‚Ññ'
SENDER_FILTER_DISLOCATION = 'cargolk@gvc.rzd.ru' 
FILENAME_PATTERN_DISLOCATION = r'^.*\.(xlsx|xls)$'
# ----------------------

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ---

def _read_excel_data(filepath: str) -> Optional[pd.DataFrame]:
    """–°—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel-—Ñ–∞–π–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞—è –ª–∏—à–Ω–∏–µ –≤–µ—Ä—Ö–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏."""
    try:
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 3 —Å—Ç—Ä–æ–∫–∏, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –¥–∞–Ω–Ω—ã–º.
        df = pd.read_excel(filepath, skiprows=3, header=0) 
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã
        df.columns = [c.strip().lower().replace(' ', '_') for c in df.columns]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        df = df.dropna(how='all')
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏
        required_cols = list(COLUMN_MAPPING.keys())
        df = df.reindex(columns=required_cols)
        
        return df
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞ {filepath}: {e}", exc_info=True)
        return None

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞ ---

async def process_dislocation_file(filepath: str) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è UPDATE/INSERT 
    –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π –∑–∞–ø–∏—Å–∏ –ø–æ container_number.
    """
    logger.info(f"[Dislocation Import] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {os.path.basename(filepath)}")
    
    df = await asyncio.to_thread(_read_excel_data, filepath)
    if df is None or df.empty:
        logger.warning(f"[Dislocation Import] –§–∞–π–ª {os.path.basename(filepath)} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return 0

    records_to_insert = df.to_dict('records')
    inserted_count = 0

    async with SessionLocal() as session:
        async with session.begin():
            for record in records_to_insert:
                container_number_raw = record.get('–Ω–æ–º–µ—Ä_–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞') 
                
                # 1. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                if not container_number_raw or pd.isna(container_number_raw):
                    continue

                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ - —Å—Ç—Ä–æ–∫–∞
                container_number = str(container_number_raw).removesuffix('.0')

                # –û—á–∏—â–∞–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                cleaned_record = {}
                for key_ru, value in record.items():
                    if pd.notna(value) and key_ru in COLUMN_MAPPING:
                        
                        mapped_key = COLUMN_MAPPING[key_ru]
                        
                        # ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–ê –î–ê–ù–ù–´–•: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ str
                        if mapped_key in ['wagon_number', 'waybill']:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ/float –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º .0
                            cleaned_record[mapped_key] = str(value).removesuffix('.0')
                        
                        elif isinstance(value, datetime) and value.tzinfo is not None:
                            # –£–¥–∞–ª—è–µ–º timezone –∏–∑ datetime
                            cleaned_record[mapped_key] = value.replace(tzinfo=None)
                            
                        else:
                            # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–∞–∫ –µ—Å—Ç—å
                            cleaned_record[mapped_key] = value


                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SET (–∫—Ä–æ–º–µ container_number, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ WHERE)
                if not cleaned_record:
                    logger.warning(f"[Dislocation Import] –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è {container_number}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
                    continue 

                # 1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                update_stmt = update(Tracking).where(
                    Tracking.container_number == container_number
                ).values(**cleaned_record) 
                
                result = await session.execute(update_stmt)

                if result.rowcount == 0:
                    # 2. –ï—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏ (–Ω–µ –Ω–∞—à–ª–∏), —Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    insert_stmt = insert(Tracking).values(container_number=container_number, **cleaned_record)
                    await session.execute(insert_stmt)
                
                inserted_count += 1
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–µ–∑–¥–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π Tracking)
            try:
                await process_dislocation_for_train_events(records_to_insert)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ {filepath}: {e}", exc_info=True)

            logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'tracking' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ó–∞–ø–∏—Å–µ–π: {inserted_count}.")

    return inserted_count


async def check_and_process_dislocation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á—Ç—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö."""
    
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º REGEX –¥–ª—è —Ç–µ–º—ã
        filepath = await asyncio.to_thread(
            imap_service.download_latest_attachment,
            subject_filter=SUBJECT_FILTER_DISLOCATION,
            sender_filter=SENDER_FILTER_DISLOCATION,
            filename_pattern=FILENAME_PATTERN_DISLOCATION
        )

        if filepath:
            try:
                await process_dislocation_file(filepath)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ {filepath}: {e}", exc_info=True)
            finally:
                if os.path.exists(filepath):
                    os.remove(filepath)
                    logger.info(f"[Dislocation Import] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {os.path.basename(filepath)} —É–¥–∞–ª–µ–Ω.")
        else:
            logger.info("üì¨ [Dislocation] –ù–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        raise e