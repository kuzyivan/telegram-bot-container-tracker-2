# services/imap_service.py

import os
import re
import datetime
from typing import Optional, Union, Iterator
from contextlib import contextmanager

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–û–í: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–¥–º–æ–¥—É–ª–µ–π
from imap_tools.mailbox import MailBox, BaseMailBox # MailBox, BaseMailBox
from imap_tools.query import A, AND               # A, AND

from logger import get_logger

logger = get_logger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö EMAIL –∏ PASSWORD –∏–∑ –≤–∞—à–µ–≥–æ .env
EMAIL = os.getenv("EMAIL")          
PASSWORD = os.getenv("PASSWORD")    
IMAP_SERVER = os.getenv("IMAP_SERVER", "imap.yandex.ru") 
DOWNLOAD_DIR = 'downloads' 

class ImapService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IMAP (–ø–æ—á—Ç–æ–π) –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏–π."""

    def __init__(self):
        if not os.path.exists(DOWNLOAD_DIR):
            os.makedirs(DOWNLOAD_DIR)

    @contextmanager
    def _connect(self) -> Iterator[Optional[MailBox]]:
        # ... (–∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è _connect –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º) ...
        if not all([EMAIL, PASSWORD, IMAP_SERVER]):
            logger.error("[ImapService] EMAIL, PASSWORD –∏–ª–∏ IMAP_SERVER –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env.")
            yield None
            return

        mailbox = MailBox(IMAP_SERVER)
        is_connected = False
        try:
            assert EMAIL and PASSWORD
            
            logger.info(f"[ImapService] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {IMAP_SERVER} –¥–ª—è {EMAIL}...")
            
            mailbox.login(EMAIL, PASSWORD) 
            is_connected = True
            logger.info(f"üü¢ [ImapService] –£—Å–ø–µ—à–Ω—ã–π login.")
            
            mailbox.folder.set("INBOX")  
            logger.info(f"üü¢ [ImapService] –£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ 'INBOX'.")
            
            yield mailbox
            
        except Exception as e:
            logger.error(f"‚ùå [ImapService] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ 'INBOX': {e}", exc_info=True)
            yield None
        finally:
            if is_connected:
                try:
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ msg.uid –≤—Å–µ–≥–¥–∞ str, –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–∞–π–¥–µ–Ω–æ.
                    mailbox.logout()
                    logger.info(f"üü¢ [ImapService] Logout –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                except Exception as e:
                     logger.warning(f"‚ö†Ô∏è [ImapService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ logout: {e}. –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
                     pass


    def download_latest_attachment(self, subject_filter: str, sender_filter: str, filename_pattern: str) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ –≤–ª–æ–∂–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
        """
        logger.info(f"[ImapService] –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: SUBJECT='{subject_filter}', SENDER='{sender_filter}'...")

        with self._connect() as mailbox:
            if mailbox is None:
                return None

            try:
                # 1. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞ IMAP
                criteria_list = [A(from_=sender_filter, seen=False), A(all=True)]
                
                # 2. –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º
                emails = mailbox.fetch(
                    criteria=AND(*criteria_list), 
                    bulk=True, 
                    reverse=True, 
                    limit=50,
                    charset='utf8' 
                )
                
                # 3. –ò—Ç–µ—Ä–∞—Ü–∏—è –∏ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø REGEX –í PYTHON
                for msg in emails:
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é –≤ —Ç–µ–º–µ
                    if not re.search(subject_filter, msg.subject, re.IGNORECASE):
                        logger.info(f"‚ö†Ô∏è [ImapService] –ü–∏—Å—å–º–æ '{msg.subject}' –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç REGEX —à–∞–±–ª–æ–Ω—É —Ç–µ–º—ã.")
                        continue
                        
                    logger.info(f"üü¢ [ImapService] –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–æ: '{msg.subject}' –æ—Ç {msg.date.strftime('%a, %d %b %Y %H:%M:%S %z')}")
                    
                    # 4. –ü–æ–∏—Å–∫ –≤–ª–æ–∂–µ–Ω–∏–π
                    for att in msg.attachments:
                        if re.match(filename_pattern, att.filename, re.IGNORECASE):
                            
                            # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                            filepath = os.path.join(DOWNLOAD_DIR, att.filename)
                            
                            logger.info(f"üü¢ [ImapService] –í–ª–æ–∂–µ–Ω–∏–µ '{att.filename}' —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ {filepath}")
                            
                            with open(filepath, 'wb') as f:
                                f.write(att.payload)
                                
                            logger.info(f"‚úÖ [ImapService] –í–ª–æ–∂–µ–Ω–∏–µ '{att.filename}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

                            # 6. –ü–æ–º–µ—Ç–∫–∞ –ø–∏—Å—å–º–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ.
                            # msg.uid –≤—Å–µ–≥–¥–∞ str, –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ—ç—Ç–æ–º—É Pylance –æ—à–∏–±–∞–µ—Ç—Å—è
                            # –ù–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –æ–±–µ—Ä–Ω–µ–º uid –≤ tuple/list
                            mailbox.flag([msg.uid], 'SEEN', value=True) 
                            
                            return filepath
                            
                    logger.info(f"‚ö†Ô∏è [ImapService] –ü–∏—Å—å–º–æ '{msg.subject}' –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π.")

                logger.info(f"‚ùå [ImapService] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ø–∏—Å–µ–º.")
                return None

            except Exception as e:
                logger.error(f"‚ùå [ImapService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏–π: {e}", exc_info=True)
                return None