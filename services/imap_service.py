# services/imap_service.py
import os
from contextlib import contextmanager
from typing import Iterator, Union, Any
from imap_tools.mailbox import MailBox, BaseMailBox
from imap_tools.message import MailMessage
from logger import get_logger

logger = get_logger(__name__)

EMAIL = os.getenv("EMAIL")
PASSWORD = os.getenv("PASSWORD")
IMAP_SERVER = os.getenv("IMAP_SERVER", "imap.yandex.ru")


class ImapService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—á—Ç–æ–≤—ã–º —è—â–∏–∫–æ–º –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É IMAP.
    """

    @contextmanager
    def _connect(self) -> Iterator[Union[BaseMailBox, None]]:
        """
        –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥-–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É.
        """
        if not all([EMAIL, PASSWORD, IMAP_SERVER]):
            # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger.error("[ImapService] EMAIL, PASSWORD –∏–ª–∏ IMAP_SERVER –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env.")
            yield None
            return

        mailbox = MailBox(IMAP_SERVER)
        try:
            assert EMAIL and PASSWORD
            
            # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∞–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            logger.info(f"[ImapService] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {IMAP_SERVER} –¥–ª—è {EMAIL}...")
            
            # –®–∞–≥ 1: –õ–æ–≥–∏–Ω (–ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ AUTH)
            mailbox.login(EMAIL, PASSWORD) 
            logger.info(f"üü¢ [ImapService] –£—Å–ø–µ—à–Ω—ã–π login.")
            
            # –®–∞–≥ 2: –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ (–ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ SELECTED)
            mailbox.folder.set("INBOX")  
            logger.info(f"üü¢ [ImapService] –£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ 'INBOX'.")
            
            yield mailbox
            
        except Exception as e:
            # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
            logger.error(f"‚ùå [ImapService] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ 'INBOX': {e}", exc_info=True)
            yield None
        finally:
            if mailbox.is_logged_in:
                mailbox.logout()
                # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –í—ã—Ö–æ–¥
                logger.info(f"üü¢ [ImapService] Logout –≤—ã–ø–æ–ª–Ω–µ–Ω.")

    def download_latest_attachment(
        self,
        criteria: Any,
        download_folder: str,
        file_extension: str = ".xlsx"
    ) -> Union[str, None]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ –ø–∏—Å—å–º–æ, —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
        """
        with self._connect() as mailbox:
            if not mailbox:
                return None

            # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º
            logger.info(f"[ImapService] –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: {criteria}...")
            
            messages = mailbox.fetch(criteria, reverse=True)
            try:
                message: Union[MailMessage, None] = next(messages, None)
                if not message:
                    logger.info(f"‚ùå [ImapService] –ü–∏—Å–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                    return None

                # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
                logger.info(f"üü¢ [ImapService] –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–æ: '{message.subject}' –æ—Ç {message.date_str}")
                
                for att in message.attachments:
                    if att.filename and att.filename.lower().endswith(file_extension):
                        os.makedirs(download_folder, exist_ok=True)
                        save_path = os.path.join(download_folder, att.filename)
                        
                        # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                        logger.info(f"üü¢ [ImapService] –í–ª–æ–∂–µ–Ω–∏–µ '{att.filename}' —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ {save_path}")
                        
                        with open(save_path, "wb") as f:
                            f.write(att.payload)
                        logger.info(f"‚úÖ [ImapService] –í–ª–æ–∂–µ–Ω–∏–µ '{att.filename}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
                        return save_path

                logger.warning(f"‚ùå [ImapService] –í –ø–∏—Å—å–º–µ –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º '{file_extension}'.")
                return None
            except Exception as e:
                # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                logger.error(f"‚ùå [ImapService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏—Å–µ–º: {e}", exc_info=True)
                return None