# services/imap_service.py

import os
import re
import datetime
from typing import Optional, Union, Iterator
from contextlib import contextmanager

from imap_tools import MailBox, BaseMailBox, A
from logger import get_logger

logger = get_logger(__name__)

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –≤–∞—à–µ–≥–æ .env
EMAIL = os.getenv("EMAIL")          
PASSWORD = os.getenv("PASSWORD")    
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤ .env –Ω–µ—Ç IMAP_SERVER
IMAP_SERVER = os.getenv("IMAP_SERVER", "imap.yandex.ru") 
DOWNLOAD_DIR = 'downloads' 

class ImapService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IMAP (–ø–æ—á—Ç–æ–π) –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏–π."""

    def __init__(self):
        if not os.path.exists(DOWNLOAD_DIR):
            os.makedirs(DOWNLOAD_DIR)

    @contextmanager
    def _connect(self) -> Iterator[Optional[MailBox]]:
        """
        –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥-–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É.
        """
        if not all([EMAIL, PASSWORD, IMAP_SERVER]):
            # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger.error("[ImapService] EMAIL, PASSWORD –∏–ª–∏ IMAP_SERVER –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env.")
            yield None
            return

        mailbox = MailBox(IMAP_SERVER)
        is_connected = False
        try:
            assert EMAIL and PASSWORD
            
            logger.info(f"[ImapService] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {IMAP_SERVER} –¥–ª—è {EMAIL}...")
            
            # –®–∞–≥ 1: –õ–æ–≥–∏–Ω
            mailbox.login(EMAIL, PASSWORD) 
            is_connected = True
            logger.info(f"üü¢ [ImapService] –£—Å–ø–µ—à–Ω—ã–π login.")
            
            # –®–∞–≥ 2: –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
            mailbox.folder.set("INBOX")  
            logger.info(f"üü¢ [ImapService] –£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ 'INBOX'.")
            
            yield mailbox
            
        except Exception as e:
            # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
            logger.error(f"‚ùå [ImapService] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP –∏–ª–∏ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ 'INBOX': {e}", exc_info=True)
            yield None
        finally:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò: –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–æ–≥–∏–Ω –±—ã–ª —É—Å–ø–µ—à–µ–Ω.
            if is_connected:
                try:
                    mailbox.logout()
                    logger.info(f"üü¢ [ImapService] Logout –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                except Exception as e:
                     logger.warning(f"‚ö†Ô∏è [ImapService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ logout: {e}. –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
                     pass


    def download_latest_attachment(self, subject_filter: str, sender_filter: str, filename_pattern: str) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ –≤–ª–æ–∂–µ–Ω–∏–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
        """
        logger.info(f"[ImapService] –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: SUBJECT='{subject_filter}', SENDER='{sender_filter}'...")

        with self._connect() as mailbox:
            if mailbox is None:
                return None

            try:
                # 1. –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–π A(ALL) –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –ø–∏—Å—å–º–∞–º, –∑–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º
                emails = mailbox.fetch(
                    criteria=A(all=True, subject=subject_filter, from_=sender_filter, seen=False), 
                    bulk=True, 
                    reverse=True, # –°–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤ –Ω–∞—á–∞–ª–µ
                    limit=50 # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                )
                
                # 2. –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ –ø–∏—Å—å–º–∞–º
                for msg in emails:
                    logger.info(f"üü¢ [ImapService] –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–æ: '{msg.subject}' –æ—Ç {msg.date.strftime('%a, %d %b %Y %H:%M:%S %z')}")
                    
                    # 3. –ü–æ–∏—Å–∫ –≤–ª–æ–∂–µ–Ω–∏–π
                    for att in msg.attachments:
                        if re.match(filename_pattern, att.filename, re.IGNORECASE):
                            
                            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                            filepath = os.path.join(DOWNLOAD_DIR, att.filename)
                            
                            logger.info(f"üü¢ [ImapService] –í–ª–æ–∂–µ–Ω–∏–µ '{att.filename}' —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ {filepath}")
                            
                            with open(filepath, 'wb') as f:
                                f.write(att.payload)
                                
                            logger.info(f"‚úÖ [ImapService] –í–ª–æ–∂–µ–Ω–∏–µ '{att.filename}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

                            # 5. –í–∞–∂–Ω–æ: –ü–æ–º–µ—Ç–∫–∞ –ø–∏—Å—å–º–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ.
                            mailbox.flag(msg.uid, 'SEEN', value=True)
                            
                            return filepath
                            
                    logger.info(f"‚ö†Ô∏è [ImapService] –ü–∏—Å—å–º–æ '{msg.subject}' –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π.")

                logger.info(f"‚ùå [ImapService] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ø–∏—Å–µ–º.")
                return None

            except Exception as e:
                logger.error(f"‚ùå [ImapService] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏–π: {e}", exc_info=True)
                return None