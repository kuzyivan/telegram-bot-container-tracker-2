# services/notification_service.py
import asyncio
from datetime import time
from telegram import Bot
from telegram.error import TimedOut, NetworkError, Forbidden

import config
from logger import get_logger
from queries.notification_queries import (
    get_subscriptions_for_time,
    get_tracking_data_for_containers,
)
from utils.send_tracking import create_excel_file, get_vladivostok_filename
from utils.email_sender import send_email
from services.railway_router import get_remaining_distance_on_route

logger = get_logger(__name__)

class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def send_scheduled_notifications(self, target_time: time):
        subscriptions = await get_subscriptions_for_time(target_time)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {target_time.strftime('%H:%M')}.")
        tasks = [self._process_single_subscription(sub) for sub in subscriptions]
        await asyncio.gather(*tasks, return_exceptions=True)

    async def _process_single_subscription(self, subscription):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –ø–æ–¥–ø–∏—Å–∫—É: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–¢ –†–ê–°–°–¢–û–Ø–ù–ò–ï,
        —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
        """
        user_id = subscription.user_telegram_id
        containers = list(subscription.containers)
        sub_name = subscription.subscription_name
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ '{sub_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {containers}")

        report_data_from_db = await get_tracking_data_for_containers(containers)

        if not report_data_from_db:
            try:
                await self.bot.send_message(user_id, f"üìù –ü–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ '{sub_name}' –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º.")
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ '{sub_name}' (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}). –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
            except Forbidden:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω).")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏
        final_report_data = []
        for row in report_data_from_db:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Row –≤ –∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫
            row_list = list(row)
            
            # –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            remaining_distance = await get_remaining_distance_on_route(
                start_station=row.from_station,
                end_station=row.to_station,
                current_station=row.current_station
            )
            
            if remaining_distance is not None:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∏–Ω–¥–µ–∫—Å 7 –≤ –∑–∞–ø—Ä–æ—Å–µ get_tracking_data_for_containers)
                row_list[7] = remaining_distance
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ (–∏–Ω–¥–µ–∫—Å 8)
                forecast = round(remaining_distance / 600 + 1, 1) if remaining_distance > 0 else 0
                row_list[8] = forecast
            
            final_report_data.append(row_list)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        file_path = await asyncio.to_thread(create_excel_file, final_report_data, config.TRACKING_REPORT_COLUMNS)
        filename = get_vladivostok_filename(prefix=sub_name)

        send_tasks = [self._send_telegram_report_with_retry(user_id, file_path, filename, sub_name)]
        if subscription.target_emails:
            for user_email in subscription.target_emails:
                send_tasks.append(self._send_email_report(user_email.email, file_path, sub_name))
        
        await asyncio.gather(*send_tasks)

    async def _send_telegram_report_with_retry(self, user_id: int, file_path: str, filename: str, sub_name: str):
        for i in range(config.TELEGRAM_SEND_ATTEMPTS):
            try:
                with open(file_path, "rb") as f:
                    await self.bot.send_document(
                        chat_id=user_id, document=f, filename=filename,
                        caption=f"–û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ '{sub_name}'",
                        read_timeout=config.TELEGRAM_SEND_TIMEOUT,
                        write_timeout=config.TELEGRAM_SEND_TIMEOUT,
                    )
                logger.info(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (Telegram)")
                return
            except Forbidden:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω).")
                break
            except (TimedOut, NetworkError) as send_err:
                logger.warning(f"–¢–∞–π–º–∞—É—Ç/—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–ø–æ–ø—ã—Ç–∫–∞ {i + 1}/{config.TELEGRAM_SEND_ATTEMPTS}): {send_err}")
                if i < config.TELEGRAM_SEND_ATTEMPTS - 1:
                    await asyncio.sleep(config.TELEGRAM_RETRY_DELAY_SEC * (2 ** i))
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.", exc_info=True)
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
                break

    async def _send_email_report(self, email_address: str, file_path: str, sub_name: str):
        try:
            subject = f"–û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ '{sub_name}'"
            await send_email(to=email_address, subject=subject, attachments=[file_path])
            logger.info(f"üìß Email —Å –æ—Ç—á–µ—Ç–æ–º –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ '{sub_name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email_address}")
        except Exception as email_err:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {email_address}: {email_err}", exc_info=True)