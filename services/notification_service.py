# services/notification_service.py
from datetime import time, datetime
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from telegram import Bot

from db import SessionLocal
from models import Subscription, Tracking
from logger import get_logger

logger = get_logger(__name__)

class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def send_scheduled_notifications(self, target_time: time) -> tuple[int, int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —á—å–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç target_time.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –≤—Å–µ–≥–æ_–∞–∫—Ç–∏–≤–Ω—ã—Ö_–ø–æ–¥–ø–∏—Å–æ–∫).
        """
        sent_count = 0
        total_active_subscriptions = 0

        # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        logger.info(f"[Notification] –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –≤—Ä–µ–º—è {target_time.strftime('%H:%M')}...")
        
        async with SessionLocal() as session:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è
            result = await session.execute(
                select(Subscription)
                .filter(Subscription.is_active == True)
                .filter(Subscription.notification_time == target_time)
                .options(selectinload(Subscription.user)) # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            )
            subscriptions = result.scalars().all()
            total_active_subscriptions = len(subscriptions)
            
            # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            logger.info(f"[Notification] –ù–∞–π–¥–µ–Ω–æ {total_active_subscriptions} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")


            for sub in subscriptions:
                if not sub.user or not sub.containers:
                    logger.warning(f"[Notification] –ü–æ–¥–ø–∏—Å–∫–∞ ID {sub.id} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤).")
                    continue
                
                # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                logger.info(f"[Notification] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub.id} –¥–ª—è user {sub.user.telegram_id} ({sub.subscription_name}).")

                # 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å)
                container_data_list = []
                for ctn in sub.containers:
                    tracking_result = await session.execute(
                        select(Tracking)
                        .filter(Tracking.container_number == ctn)
                        .order_by(Tracking.operation_date.desc())
                        .limit(1)
                    )
                    tracking_info = tracking_result.scalar_one_or_none()
                    if tracking_info:
                        container_data_list.append(tracking_info)
                
                # 2. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä)
                if container_data_list:
                    message_parts = [f"üîî **–û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ: {sub.subscription_name}** üîî"]
                    for info in container_data_list:
                        message_parts.append(f"*{info.container_number}*: {info.operation} –Ω–∞ {info.current_station} ({info.operation_date.strftime('%d.%m %H:%M')})")
                    
                    try:
                        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞
                        await self.bot.send_message(
                            chat_id=sub.user.telegram_id,
                            text="\n".join(message_parts),
                            parse_mode="Markdown"
                        )
                        sent_count += 1
                        # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
                        logger.info(f"üü¢ [Notification] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(container_data_list)} —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user.telegram_id}.")
                        
                    except Exception as e:
                        logger.error(f"‚ùå [Notification] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user.telegram_id}: {e}", exc_info=True)
                else:
                    logger.info(f"[Notification] –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub.id}.")

        # ‚úÖ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        logger.info(f"‚úÖ [Notification] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_count}, –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {total_active_subscriptions}.")
        
        return sent_count, total_active_subscriptions