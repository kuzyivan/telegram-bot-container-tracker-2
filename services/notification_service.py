# services/notification_service.py
import asyncio
from datetime import time
from telegram import Bot
from telegram.error import TimedOut, NetworkError

import config
from logger import get_logger
from queries.notification_queries import (
    get_subscriptions_for_time,
    get_tracking_data_for_containers,
    get_user_for_email,
)
from utils.send_tracking import create_excel_file, get_vladivostok_filename
from utils.email_sender import send_email

logger = get_logger(__name__)

class NotificationService:
    """
    –°–µ—Ä–≤–∏—Å, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤ –æ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    """
    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å –æ–±—ä–µ–∫—Ç–æ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        self.bot = bot

    async def send_scheduled_notifications(self, target_time: time):
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥. –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç
        –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –Ω–∏—Ö.
        """
        subscriptions = await get_subscriptions_for_time(target_time)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ {target_time.strftime('%H:%M')}.")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
        tasks = [self._process_single_subscription(sub) for sub in subscriptions]
        await asyncio.gather(*tasks, return_exceptions=True)

    async def _process_single_subscription(self, subscription):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –ø–æ–¥–ø–∏—Å–∫—É: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ.
        """
        user_id = subscription.user_id
        containers = list(subscription.containers)
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {containers}")

        report_data = await get_tracking_data_for_containers(containers)

        if not report_data:
            try:
                await self.bot.send_message(user_id, f"üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º: {', '.join(containers)}")
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return

        # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–æ–∫–∏—Ä—É—é—â–µ–π, –ø–æ—ç—Ç–æ–º—É
        # –∑–∞–ø—É—Å–∫–∞–µ–º –µ–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å asyncio.
        file_path = await asyncio.to_thread(create_excel_file, report_data, config.TRACKING_REPORT_COLUMNS)
        filename = get_vladivostok_filename()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤ Telegram –∏ –Ω–∞ –ø–æ—á—Ç—É
        await asyncio.gather(
            self._send_telegram_report_with_retry(user_id, file_path, filename),
            self._send_email_report_if_enabled(user_id, file_path)
        )

    async def _send_telegram_report_with_retry(self, user_id: int, file_path: str, filename: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫.
        """
        for i in range(config.TELEGRAM_SEND_ATTEMPTS):
            try:
                with open(file_path, "rb") as f:
                    await self.bot.send_document(
                        chat_id=user_id,
                        document=f,
                        filename=filename,
                        read_timeout=config.TELEGRAM_SEND_TIMEOUT,
                        write_timeout=config.TELEGRAM_SEND_TIMEOUT,
                    )
                logger.info(f"‚úÖ –§–∞–π–ª {filename} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (Telegram)")
                return
            except (TimedOut, NetworkError) as send_err:
                logger.warning(
                    f"–¢–∞–π–º–∞—É—Ç/—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} "
                    f"(–ø–æ–ø—ã—Ç–∫–∞ {i + 1}/{config.TELEGRAM_SEND_ATTEMPTS}): {send_err}"
                )
                if i < config.TELEGRAM_SEND_ATTEMPTS - 1:
                    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 2, 4, 8... —Å–µ–∫—É–Ω–¥
                    await asyncio.sleep(config.TELEGRAM_RETRY_DELAY_SEC * (2 ** i))
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.", exc_info=True)
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
                break # –ù–µ—Ç —Å–º—ã—Å–ª–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö

    async def _send_email_report_if_enabled(self, user_id: int, file_path: str):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è email-—Ä–∞—Å—Å—ã–ª–∫–∞, –∏ –µ—Å–ª–∏ –¥–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç.
        """
        user = await get_user_for_email(user_id)
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ email –Ω–µ —è–≤–ª—è–µ—Ç—Å—è None
        if user and user.email is not None:
            try:
                await send_email(to=user.email, attachments=[file_path])
                logger.info(f"üìß Email —Å —Ñ–∞–π–ª–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user.email}")
            except Exception as email_err:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {user.email}: {email_err}", exc_info=True)
        else:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} email-—Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ email –Ω–µ —É–∫–∞–∑–∞–Ω.")