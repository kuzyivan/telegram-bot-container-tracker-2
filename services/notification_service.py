# services/notification_service.py
from datetime import time, datetime
import asyncio
import os # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from telegram import Bot
from typing import List, Any # –î–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ Excel-–¥–∞–Ω–Ω—ã—Ö

from db import SessionLocal
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SubscriptionEmail –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–µ–π
from models import Subscription, Tracking, SubscriptionEmail 
from logger import get_logger
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel –∏ –ø–æ—á—Ç–æ–π
from utils.send_tracking import create_excel_file
from utils.email_sender import send_email 

logger = get_logger(__name__)

class NotificationService:
    def __init__(self, bot: Bot):
        self.bot = bot

    async def send_scheduled_notifications(self, target_time: time) -> tuple[int, int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —á—å–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç target_time.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ_—Å–æ–æ–±—â–µ–Ω–∏–π_–≤_—Ç–≥, –≤—Å–µ–≥–æ_–∞–∫—Ç–∏–≤–Ω—ã—Ö_–ø–æ–¥–ø–∏—Å–æ–∫).
        """
        sent_count = 0
        total_active_subscriptions = 0

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Excel
        EXCEL_HEADERS = [
             '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
             '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
             '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
             '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        ]

        logger.info(f"[Notification] –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –≤—Ä–µ–º—è {target_time.strftime('%H:%M')}...")
        
        async with SessionLocal() as session:
            # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è, –≤–∫–ª—é—á–∞—è —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ Email.
            result = await session.execute(
                select(Subscription)
                .filter(Subscription.is_active == True)
                .filter(Subscription.notification_time == target_time)
                .options(
                    selectinload(Subscription.user),
                    selectinload(Subscription.target_emails).selectinload(SubscriptionEmail.email)
                ) 
            )
            subscriptions = result.scalars().unique().all()
            total_active_subscriptions = len(subscriptions)
            
            logger.info(f"[Notification] –ù–∞–π–¥–µ–Ω–æ {total_active_subscriptions} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")


            for sub in subscriptions:
                if not sub.user or not sub.containers:
                    logger.warning(f"[Notification] –ü–æ–¥–ø–∏—Å–∫–∞ ID {sub.id} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤).")
                    continue
                
                logger.info(f"[Notification] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub.id} –¥–ª—è user {sub.user.telegram_id} ({sub.subscription_name}).")

                # 2. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å)
                container_data_list = []
                excel_rows: List[List[Any]] = [] 
                
                for ctn in sub.containers:
                    tracking_result = await session.execute(
                        select(Tracking)
                        .filter(Tracking.container_number == ctn)
                        .order_by(Tracking.operation_date.desc())
                        .limit(1)
                    )
                    tracking_info = tracking_result.scalar_one_or_none()
                    if tracking_info:
                        container_data_list.append(tracking_info)
                        
                        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è Excel
                        excel_rows.append([
                             tracking_info.container_number, tracking_info.from_station, tracking_info.to_station,
                             tracking_info.current_station, tracking_info.operation, tracking_info.operation_date,
                             tracking_info.waybill, tracking_info.km_left, tracking_info.forecast_days,
                             tracking_info.wagon_number, tracking_info.operation_road
                        ])
                
                # 3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
                # (–õ–æ–≥–∏–∫–∞ Telegram –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
                if container_data_list:
                    message_parts = [f"üîî **–û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ: {sub.subscription_name}** üîî"]
                    for info in container_data_list:
                        date_str = info.operation_date
                        formatted_date = "–Ω/–¥"
                        if date_str:
                            try:
                                op_dt = datetime.strptime(date_str, '%d.%m.%Y %H:%M')
                                formatted_date = op_dt.strftime('%d.%m %H:%M')
                            except ValueError:
                                logger.warning(f"[Notification] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{date_str}' –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {info.container_number}")
                        
                        message_parts.append(f"*{info.container_number}*: {info.operation} –Ω–∞ {info.current_station} ({formatted_date})")
                    
                    try:
                        await self.bot.send_message(
                            chat_id=sub.user.telegram_id,
                            text="\n".join(message_parts),
                            parse_mode="Markdown"
                        )
                        sent_count += 1
                        logger.info(f"üü¢ [Notification] –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(container_data_list)} —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user.telegram_id}.")
                        
                    except Exception as e:
                        logger.error(f"‚ùå [Notification] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user.telegram_id}: {e}", exc_info=True)

                    
                    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Email/Excel
                    if sub.target_emails and excel_rows:
                        logger.info(f"üì¨ [Notification] –ü–æ–¥–ø–∏—Å–∫–∞ ID {sub.id} –∏–º–µ–µ—Ç {len(sub.target_emails)} email –∞–¥—Ä–µ—Å–æ–≤. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel...")
                        
                        # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ email
                        email_recipients = [se.email.email for se in sub.target_emails if se.email.is_verified]
                        
                        # === –ù–û–í–´–ô –õ–û–ì –î–õ–Ø –û–¢–õ–ê–î–ö–ò ===
                        if sub.target_emails:
                            all_related_emails = [f"{se.email.email} (Verified: {se.email.is_verified})" for se in sub.target_emails]
                            logger.info(f"DEBUG [Email Check] –ü–æ–¥–ø–∏—Å–∫–∞ {sub.id}. –°–≤—è–∑–∞–Ω–Ω—ã–µ Email: {', '.join(all_related_emails)}. –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: {', '.join(email_recipients) if email_recipients else 'NONE'}")
                        # ============================
                        
                        file_path = None
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å
                            if email_recipients:
                                
                                logger.info(f"DEBUG [Excel Gen] –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {sub.id}.") # <-- –ù–û–í–´–ô –õ–û–ì
                                
                                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Ç.–∫. Pandas/openpyxl —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã)
                                file_path = await asyncio.to_thread(
                                    create_excel_file,
                                    excel_rows,
                                    EXCEL_HEADERS
                                )
                                
                                logger.info(f"DEBUG [Email Send] –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É Email —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º: {os.path.basename(file_path)}.") # <-- –ù–û–í–´–ô –õ–û–ì
                                
                                # –û—Ç–ø—Ä–∞–≤–∫–∞ Email –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—Ç.–∫. send_email —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞)
                                await asyncio.to_thread(
                                    send_email,
                                    to=email_recipients,
                                    attachments=[file_path]
                                )
                                logger.info(f"üü¢ [Notification] Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub.id}.")
                            else:
                                logger.warning(f"‚ö†Ô∏è [Notification] –ü–æ–¥–ø–∏—Å–∫–∞ ID {sub.id}: –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π Email. –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                                
                        except Exception as e:
                            logger.error(f"‚ùå [Notification] –û—à–∏–±–∫–∞ Email/Excel –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub.id}: {e}", exc_info=True)
                        finally:
                            if file_path and os.path.exists(file_path):
                                os.remove(file_path)
                                logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω.")
                    
                else:
                    logger.info(f"[Notification] –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ ID {sub.id}.")

        logger.info(f"‚úÖ [Notification] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_count}, –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {total_active_subscriptions}.")
        
        return sent_count, total_active_subscriptions