# alembic/env.py
from __future__ import annotations

from logging.config import fileConfig
from typing import cast
import os
import sys

from alembic import context
from sqlalchemy import pool, create_engine

# --- 0) –ü—Ä–∏–≤–æ–¥–∏–º sys.path –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ ---
#  .../AtermTrackBot/alembic/env.py  -> –∫–æ—Ä–µ–Ω—å: –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)

# --- 1) –ó–∞–≥—Ä—É–∂–∞–µ–º .env (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω python-dotenv) ---
try:
    from dotenv import load_dotenv
    load_dotenv(dotenv_path=os.path.join(PROJECT_ROOT, ".env"))
except Exception:
    pass

# --- 2) URL –ë–î: ALEMBIC_DATABASE_URL (sync) –∏–ª–∏ DATABASE_URL (async) ---
database_url = os.getenv("ALEMBIC_DATABASE_URL") or os.getenv("DATABASE_URL")
if not database_url:
    raise RuntimeError(
        "\n‚ùå DATABASE_URL/ALEMBIC_DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω(—ã).\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "  DATABASE_URL='postgresql+asyncpg://user:pass@host:5432/dbname'\n"
        "  ALEMBIC_DATABASE_URL='postgresql+psycopg2://user:pass@host:5432/dbname'\n"
    )
database_url = cast(str, database_url)

# Alembic —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ ‚Üí –ø–µ—Ä–µ–≤–æ–¥–∏–º asyncpg ‚Üí psycopg2 –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
if database_url.startswith("postgresql+asyncpg"):
    alembic_url = database_url.replace("postgresql+asyncpg", "postgresql+psycopg2")
    print("‚ö°Ô∏è Alembic: –¥—Ä–∞–π–≤–µ—Ä asyncpg ‚Üí psycopg2")
else:
    alembic_url = database_url

# --- 3) –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alembic ---
config = context.config
config.set_main_option("sqlalchemy.url", alembic_url)

# --- 4) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Alembic –∏–∑ alembic.ini ---
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# --- 5) –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Base –∏ –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ–ø–∞–ª–∏ –≤ metadata ---
# –í–∞–∂–Ω–æ: db.py –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "—á–∏—Å—Ç—ã–º" (–±–µ–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π), –∏–Ω–∞—á–µ –±—É–¥—É—Ç —Ü–∏–∫–ª—ã
from db import Base  # declarative_base()

# –Ø–≤–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü, –±–µ–∑ "—Ç—è–∂—ë–ª–æ–π" –ª–æ–≥–∏–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª–µ–π)
from model.terminal_container import TerminalContainer  # noqa: F401
from models import Tracking, User, TrackingSubscription, Stats  # noqa: F401

target_metadata = Base.metadata

# --- 6) –†–µ–∂–∏–º "offline": –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ---
def run_migrations_offline() -> None:
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
    )
    with context.begin_transaction():
        context.run_migrations()

# --- 7) –†–µ–∂–∏–º "online": –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ ---
def run_migrations_online() -> None:
    connectable = create_engine(
        alembic_url,
        poolclass=pool.NullPool,
        future=True,
    )

    # –ü–æ–∫–∞–∂–µ–º, –∫—É–¥–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è (–±–µ–∑ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è)
    try:
        safe_dsn = alembic_url.split("://", 1)[-1]
        if "@" in safe_dsn:
            safe_dsn = safe_dsn.split("@", 1)[-1]
        print(f"üîó Alembic –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫: {safe_dsn}")
    except Exception:
        pass

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
        )
        with context.begin_transaction():
            context.run_migrations()

# --- 8) –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()