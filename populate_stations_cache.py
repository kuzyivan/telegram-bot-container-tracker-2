# populate_stations_cache.py
import asyncio
import re
from sqlalchemy import select
from db import SessionLocal
from models import Tracking
from services.osm_service import fetch_station_coords
from logger import get_logger

logger = get_logger("station_cacher")

# --- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ß–ò–°–¢–ö–ò ---
def simplify_station_name(station_name: str) -> str:
    """–£–ø—Ä–æ—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ OSM."""
    # 1. –£–±–∏—Ä–∞–µ–º –∫–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏
    name = re.sub(r'\s*\(\d+\)$', '', station_name).strip()
    # 2. –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞-—É—Ç–æ—á–Ω–µ–Ω–∏—è
    suffixes_to_remove = [
        "–¢–û–í–ê–†–ù–´–ô", "–ü–ê–°–°–ê–ñ–ò–†–°–ö–ò–ô", "–°–û–†–¢–ò–†–û–í–û–ß–ù–´–ô", "–°–ï–í–ï–†–ù–´–ô", "–Æ–ñ–ù–´–ô",
        "–ó–ê–ü–ê–î–ù–´–ô", "–í–û–°–¢–û–ß–ù–´–ô", "–¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô", "–ì–õ–ê–í–ù–´–ô", "–≠–ö–°–ü–û–†–¢", "–ü–†–ò–°–¢–ê–ù–¨"
    ]
    for suffix in suffixes_to_remove:
        name = re.sub(r'[\s-]+' + suffix, '', name, flags=re.IGNORECASE)
    # 3. –ó–∞–º–µ–Ω—è–µ–º –∞—Ä–∞–±—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–∞ —Ä–∏–º—Å–∫–∏–µ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–π —Ç–∏–ø–∞ "–ö–£–ù–¶–ï–í–û 2" -> "–ö–£–ù–¶–ï–í–û II"
    name = name.replace(" 2", " II").replace(" 1", " I")
    return name.strip()


async def get_unique_stations_from_tracking() -> set[str]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏."""
    unique_stations = set()
    async with SessionLocal() as session:
        from_stations_result = await session.execute(select(Tracking.from_station).distinct())
        to_stations_result = await session.execute(select(Tracking.to_station).distinct())
        current_stations_result = await session.execute(select(Tracking.current_station).distinct())

        for row in from_stations_result.scalars().all():
            if row: unique_stations.add(row)
        for row in to_stations_result.scalars().all():
            if row: unique_stations.add(row)
        for row in current_stations_result.scalars().all():
            if row: unique_stations.add(row)
            
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_stations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ 'tracking'.")
    return unique_stations

async def job_populate_stations_cache():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–º—ë–Ω –∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏."""
    logger.info("--- üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ---")
    
    all_stations = await get_unique_stations_from_tracking()
    stations_to_find = sorted(list(all_stations)) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
    
    if not stations_to_find:
        logger.info("–ù–µ—Ç —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    success_count = 0
    fail_count = 0
    
    # --- –£–õ–£–ß–®–ï–ù–ù–´–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò ---
    for i, original_name in enumerate(stations_to_find):
        logger.info(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{len(stations_to_find)}: '{original_name}' ---")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É "—á–∏—Å—Ç–æ–º—É" –∏–º–µ–Ω–∏
            coords = await fetch_station_coords(original_name)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏
            if not coords:
                simplified = simplify_station_name(original_name)
                if simplified.lower() != original_name.split('(')[0].strip().lower():
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ #2: –ø–æ–∏—Å–∫ –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏ '{simplified}'")
                    coords = await fetch_station_coords(simplified)

            if coords:
                success_count += 1
            else:
                logger.warning(f"‚ùå [Cacher] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏: {original_name}")
                fail_count += 1
            
            # –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –ó–ê–î–ï–†–ñ–ö–£, —á—Ç–æ–±—ã –±—ã—Ç—å "–≤–µ–∂–ª–∏–≤–µ–µ" –∫ —Å–µ—Ä–≤–µ—Ä—É
            await asyncio.sleep(2) 

        except Exception as e:
            logger.error(f"[Cacher] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–Ω—Ü–∏–∏ '{original_name}': {e}", exc_info=True)
            fail_count += 1

    logger.info("--- ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω ---")
    logger.info(f"  - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
    logger.info(f"  - –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: {fail_count}")

if __name__ == "__main__":
    asyncio.run(job_populate_stations_cache())