# populate_stations_cache.py
import asyncio
import re
from sqlalchemy import select, text
from db import SessionLocal
from models import Tracking
from services.osm_service import fetch_station_coords
from logger import get_logger

logger = get_logger("station_cacher")

def simplify_station_name(station_name: str) -> str:
    """
    –£–ø—Ä–æ—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏, —É–±–∏—Ä–∞—è –æ–±—â–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É—è –ø—Ä–æ–±–µ–ª—ã/–¥–µ—Ñ–∏—Å—ã.
    """
    # 1. –£–±–∏—Ä–∞–µ–º –∫–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏ –≤ —Å–∫–æ–±–∫–∞—Ö
    name = re.sub(r'\s*\(\d+\)$', '', station_name).strip()
    
    # 2. –°–ø–∏—Å–æ–∫ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –∏ —Å–ª–æ–≤-—É—Ç–æ—á–Ω–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    suffixes_to_remove = [
        "–¢–û–í–ê–†–ù–´–ô", "–ü–ê–°–°–ê–ñ–ò–†–°–ö–ò–ô", "–°–û–†–¢–ò–†–û–í–û–ß–ù–´–ô", "–°–ï–í–ï–†–ù–´–ô", "–Æ–ñ–ù–´–ô",
        "–ó–ê–ü–ê–î–ù–´–ô", "–í–û–°–¢–û–ß–ù–´–ô", "–¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô", "–ì–õ–ê–í–ù–´–ô", "–≠–ö–°–ü–û–†–¢", "–ü–†–ò–°–¢–ê–ù–¨",
        "–≠–ö–°–ü", "–ü–ê–†–ö"
    ]
    for suffix in suffixes_to_remove:
        name = re.sub(r'[\s-]+' + re.escape(suffix) + r'\b', '', name, flags=re.IGNORECASE)

    # 3. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ —Ü–∏—Ñ—Ä –∏ –¥–µ—Ñ–∏—Å–æ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä, "–î–ê–õ–¨–ù–ï–†–ï–ß–ï–ù–°–ö 2" -> "–î–ê–õ–¨–ù–ï–†–ï–ß–ï–ù–°–ö-2"
    name = re.sub(r'\s+([1-9])$', r'-\1', name)
    
    return name.strip()


async def get_unique_stations_from_tracking() -> set[str]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏."""
    unique_stations = set()
    async with SessionLocal() as session:
        from_stations_result = await session.execute(select(Tracking.from_station).distinct())
        to_stations_result = await session.execute(select(Tracking.to_station).distinct())
        current_stations_result = await session.execute(select(Tracking.current_station).distinct())

        for row in from_stations_result.scalars().all():
            if row: unique_stations.add(row)
        for row in to_stations_result.scalars().all():
            if row: unique_stations.add(row)
        for row in current_stations_result.scalars().all():
            if row: unique_stations.add(row)
            
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_stations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ 'tracking'.")
    return unique_stations

async def job_populate_stations_cache():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–º—ë–Ω –∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏."""
    logger.info("--- üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è) ---")
    
    all_stations = await get_unique_stations_from_tracking()
    stations_to_find = sorted(list(all_stations))
    
    if not stations_to_find:
        logger.info("–ù–µ—Ç —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    success_count = 0
    fail_count = 0
    
    for i, original_name in enumerate(stations_to_find):
        logger.info(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{len(stations_to_find)}: '{original_name}' ---")
        try:
            # –°—Ä–∞–∑—É –∏—â–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏ - —ç—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±
            simplified = simplify_station_name(original_name)
            coords = await fetch_station_coords(simplified)

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ –±–∞–∑–æ–≤–æ–º—É —á–∏—Å—Ç–æ–º—É –∏–º–µ–Ω–∏
            if not coords:
                base_clean_name = re.sub(r'\s*\(\d+\)$', '', original_name).strip()
                if simplified.lower() != base_clean_name.lower():
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ #2: –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–æ–≤–æ–º—É –∏–º–µ–Ω–∏ '{base_clean_name}'")
                    coords = await fetch_station_coords(base_clean_name)

            if coords:
                success_count += 1
            else:
                logger.warning(f"‚ùå [Cacher] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏: {original_name} (–∏—Å–∫–∞–ª–∏ –∫–∞–∫ '{simplified}')")
                fail_count += 1
            
            await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"[Cacher] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–Ω—Ü–∏–∏ '{original_name}': {e}", exc_info=True)
            fail_count += 1

    logger.info("--- ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω ---")
    logger.info(f"  - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
    logger.info(f"  - –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: {fail_count}")

if __name__ == "__main__":
    asyncio.run(job_populate_stations_cache())