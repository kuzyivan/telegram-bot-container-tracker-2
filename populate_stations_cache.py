# populate_stations_cache.py
import asyncio
import re
from sqlalchemy import select
from db import SessionLocal
from models import Tracking, RailwayStation # <--- –î–æ–±–∞–≤–ª—è–µ–º RailwayStation
from services.osm_service import fetch_station_coords, get_canonical_name # <--- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

logger = get_logger("station_cacher")

def generate_name_variations(station_name: str) -> list[str]:
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    name = re.sub(r'\s*\(\d+\)$', '', station_name).strip()
    suffixes_to_remove = ["–¢–û–í–ê–†–ù–´–ô", "–ü–ê–°–°–ê–ñ–ò–†–°–ö–ò–ô", "–°–û–†–¢–ò–†–û–í–û–ß–ù–´–ô", "–°–ï–í–ï–†–ù–´–ô", "–Æ–ñ–ù–´–ô", "–ó–ê–ü–ê–î–ù–´–ô", "–í–û–°–¢–û–ß–ù–´–ô", "–¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô", "–ì–õ–ê–í–ù–´–ô", "–≠–ö–°–ü–û–†–¢", "–ü–†–ò–°–¢–ê–ù–¨", "–≠–ö–°–ü", "–ü–ê–†–ö"]
    base_name = name
    for suffix in suffixes_to_remove:
        base_name = re.sub(r'[\s-]+' + re.escape(suffix) + r'\b', '', base_name, flags=re.IGNORECASE)
    base_name = base_name.strip()
    variations = {base_name}
    match = re.search(r'(.+?)[\s-]*((?:[IVX]+)|(?:[0-9]+))$', base_name)
    if match:
        name_part, num_part = match.group(1).strip(), match.group(2)
        arabic, roman = "", ""
        if num_part.isdigit():
            arabic = num_part
            roman_map = {'1': 'I', '2': 'II', '3': 'III', '4': 'IV'}
            roman = roman_map.get(arabic, "")
        else:
            roman = num_part
            roman_map_rev = {'I': '1', 'II': '2', 'III': '3', 'IV': '4'}
            arabic = roman_map_rev.get(roman, "")
        variations.add(name_part)
        if arabic:
            variations.add(f"{name_part}-{arabic}")
            variations.add(f"{name_part} {arabic}")
        if roman:
            variations.add(f"{name_part}-{roman}")
            variations.add(f"{name_part} {roman}")
    return sorted(list(variations), key=len, reverse=True)


async def get_unique_stations_from_tracking() -> set[str]:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    # ...
    pass # –ó–∞–≥–ª—É—à–∫–∞

async def job_populate_stations_cache():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–µ—à–∞."""
    logger.info("--- üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–µ—à–∞) ---")
    
    all_stations_from_db = await get_unique_stations_from_tracking()
    
    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê ---
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –∫–µ—à–µ
    async with SessionLocal() as session:
        result = await session.execute(select(RailwayStation.name))
        stations_in_cache = {row[0] for row in result}
    logger.info(f"–í –∫–µ—à–µ —É–∂–µ –µ—Å—Ç—å {len(stations_in_cache)} —Å—Ç–∞–Ω—Ü–∏–π.")

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å
    stations_to_find = []
    for station_name in all_stations_from_db:
        canonical_name = get_canonical_name(station_name)
        if canonical_name not in stations_in_cache:
            stations_to_find.append(station_name)
    
    logger.info(f"–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ {len(stations_to_find)} –Ω–æ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π.")
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    if not stations_to_find:
        logger.info("–ù–µ—Ç —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    success_count = 0
    fail_count = 0
    
    stations_to_find_sorted = sorted(stations_to_find)
    for i, original_name in enumerate(stations_to_find_sorted):
        logger.info(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{len(stations_to_find_sorted)}: '{original_name}' ---")
        
        name_variations = generate_name_variations(original_name)
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã: {name_variations}")
        
        coords = None
        for name_variant in name_variations:
            # –ü–µ—Ä–µ–¥–∞–µ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞, –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            coords = await fetch_station_coords(name_variant, original_name)
            if coords:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É: '{name_variant}'")
                break 
            await asyncio.sleep(1)
        
        if coords:
            success_count += 1
        else:
            logger.warning(f"‚ùå [Cacher] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏: {original_name}")
            fail_count += 1
        
        await asyncio.sleep(2)

    logger.info("--- ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω ---")
    logger.info(f"  - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
    logger.info(f"  - –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: {fail_count}")

if __name__ == "__main__":
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    # ...
    pass # –ó–∞–≥–ª—É—à–∫–∞