# populate_stations_cache.py
import asyncio
from sqlalchemy import select, func
from db import SessionLocal
from models import Tracking
from services.osm_service import fetch_station_coords
from logger import get_logger

logger = get_logger("station_cacher")

async def get_unique_stations_from_tracking() -> set[str]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏."""
    unique_stations = set()
    async with SessionLocal() as session:
        # distinct() –∑–¥–µ—Å—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å —Å async, –¥–µ–ª–∞–µ–º –≤—Ä—É—á–Ω—É—é
        from_stations_result = await session.execute(select(Tracking.from_station))
        to_stations_result = await session.execute(select(Tracking.to_station))
        current_stations_result = await session.execute(select(Tracking.current_station))

        for row in from_stations_result.scalars().all():
            if row: unique_stations.add(row)
        for row in to_stations_result.scalars().all():
            if row: unique_stations.add(row)
        for row in current_stations_result.scalars().all():
            if row: unique_stations.add(row)
            
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_stations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ 'tracking'.")
    return unique_stations

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logger.info("--- üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π ---")
    
    stations_to_find = await get_unique_stations_from_tracking()
    
    if not stations_to_find:
        logger.info("–ù–µ—Ç —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    success_count = 0
    fail_count = 0

    for station_name in stations_to_find:
        try:
            # fetch_station_coords —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É '–Ω–µ –∏—Å–∫–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–µ—à–µ'
            coords = await fetch_station_coords(station_name)
            if coords:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ (–∏–ª–∏ —É–∂–µ –≤ –∫–µ—à–µ) —Å—Ç–∞–Ω—Ü–∏—è: {station_name}")
                success_count += 1
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏: {station_name}")
                fail_count += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Overpass API
            await asyncio.sleep(1)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–Ω—Ü–∏–∏ '{station_name}': {e}", exc_info=True)
            fail_count += 1

    logger.info("--- ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω ---")
    logger.info(f"  - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
    logger.info(f"  - –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: {fail_count}")

if __name__ == "__main__":
    asyncio.run(main())