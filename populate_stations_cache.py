# populate_stations_cache.py
import asyncio
from sqlalchemy import select, func, distinct
from sqlalchemy.dialects.postgresql import insert

from db import SessionLocal
# ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç RailwayStation -> StationsCache
from models import Tracking, StationsCache 
from services.osm_service import OsmService
from logger import get_logger
import config

logger = get_logger(__name__)

async def get_unique_stations_from_tracking() -> set[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —Ç–µ–∫—É—â–∏–µ) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tracking."""
    unique_stations = set()
    async with SessionLocal() as session:
        # –í—ã–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç—Ä–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
        columns_to_check = [Tracking.from_station, Tracking.to_station, Tracking.current_station]
        for column in columns_to_check:
            result = await session.execute(select(distinct(column)).where(column != None, column != ''))
            stations = result.scalars().all()
            unique_stations.update(stations)
    # –£–±–∏—Ä–∞–µ–º None –∏–ª–∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∫–∞–∫-—Ç–æ –ø–æ–ø–∞–ª–∏
    unique_stations = {s for s in unique_stations if s} 
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_stations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ 'tracking'.")
    return unique_stations

async def get_existing_cached_stations() -> set[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Å—Ç–∞–Ω—Ü–∏–π, —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –∫–µ—à–µ."""
    async with SessionLocal() as session:
        result = await session.execute(select(StationsCache.original_name)) # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º StationsCache
        existing_names = set(result.scalars().all())
        logger.info(f"–í –∫–µ—à–µ —É–∂–µ –µ—Å—Ç—å {len(existing_names)} —Å—Ç–∞–Ω—Ü–∏–π.")
        return existing_names

async def populate_stations_cache_job():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –Ω–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –∫–µ—à–∏—Ä—É–µ—Ç –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ OSM."""
    logger.info("--- üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π ---")

    try:
        unique_station_names = await get_unique_stations_from_tracking()
        existing_cached_names = await get_existing_cached_stations()

        new_station_names = list(unique_station_names - existing_cached_names)

        if not new_station_names:
            logger.info("--- ‚úÖ –ù–æ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ---")
            return

        logger.info(f"–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ {len(new_station_names)} –Ω–æ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π.")

        osm_service = OsmService()
        processed_count = 0
        not_found_count = 0

        async with SessionLocal() as session:
            for i, station_name in enumerate(new_station_names):
                logger.info(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{len(new_station_names)}: '{station_name}' ---")

                coords = await osm_service.get_station_coordinates(station_name) # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –∫–µ—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç

                if coords:
                    processed_count += 1
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞, –µ—Å–ª–∏ get_station_coordinates –Ω–µ —Å–¥–µ–ª–∞–ª–∞ —ç—Ç–æ
                    # (—Ö–æ—Ç—è –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞)
                    insert_stmt = insert(StationsCache).values( # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º StationsCache
                        original_name=station_name,
                        # found_name - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ get_station_coordinates
                        latitude=coords.lat,
                        longitude=coords.lon
                    ).on_conflict_do_nothing(index_elements=['original_name']) # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
                    await session.execute(insert_stmt)

                else:
                    not_found_count += 1
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–µ—à–µ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, —á—Ç–æ–±—ã –Ω–µ –∏—Å–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    insert_stmt = insert(StationsCache).values( # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º StationsCache
                        original_name=station_name,
                        found_name=None,
                        latitude=None,
                        longitude=None
                    ).on_conflict_do_nothing(index_elements=['original_name'])
                    await session.execute(insert_stmt)
                    logger.warning(f"   -> –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è '{station_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

                await session.commit() # –ö–æ–º–º–∏—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
                await asyncio.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞

        logger.info("--- ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω ---")
        logger.info(f"   - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}")
        logger.info(f"   - –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: {not_found_count}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π: {e}", exc_info=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ scheduler.py
async def job_populate_stations_cache():
    if config.STATIONS_CACHE_CRON_SCHEDULE: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
         await populate_stations_cache_job()
    else:
        logger.info("–ü–ª–∞–Ω–æ–≤–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")

# # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:
# if __name__ == "__main__":
#     asyncio.run(populate_stations_cache_job())