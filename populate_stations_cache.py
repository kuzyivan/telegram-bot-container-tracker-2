# populate_stations_cache.py
import asyncio
import re
from sqlalchemy import select
from db import SessionLocal
from models import Tracking, RailwayStation
from services.osm_service import fetch_station_coords, get_canonical_name
from logger import get_logger # <--- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∏–º–ø–æ—Ä—Ç

logger = get_logger("station_cacher")

def generate_name_variations(station_name: str) -> list[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ OSM.
    """
    # 1. –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –∫–æ–¥–∞ –∏ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
    name = re.sub(r'\s*\(\d+\)$', '', station_name).strip()
    suffixes_to_remove = [
        "–¢–û–í–ê–†–ù–´–ô", "–ü–ê–°–°–ê–ñ–ò–†–°–ö–ò–ô", "–°–û–†–¢–ò–†–û–í–û–ß–ù–´–ô", "–°–ï–í–ï–†–ù–´–ô", "–Æ–ñ–ù–´–ô",
        "–ó–ê–ü–ê–î–ù–´–ô", "–í–û–°–¢–û–ß–ù–´–ô", "–¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô", "–ì–õ–ê–í–ù–´–ô", "–≠–ö–°–ü–û–†–¢", "–ü–†–ò–°–¢–ê–ù–¨",
        "–≠–ö–°–ü", "–ü–ê–†–ö"
    ]
    base_name = name
    for suffix in suffixes_to_remove:
        base_name = re.sub(r'[\s-]+' + re.escape(suffix) + r'\b', '', base_name, flags=re.IGNORECASE)
    base_name = base_name.strip()

    variations = {base_name} # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏

    # 2. –ò—â–µ–º —á–∏—Å–ª–æ –∏–ª–∏ —Ä–∏–º—Å–∫—É—é —Ü–∏—Ñ—Ä—É –≤ –∫–æ–Ω—Ü–µ
    match = re.search(r'(.+?)[\s-]*((?:[IVX]+)|(?:[0-9]+))$', base_name)
    if match:
        name_part, num_part = match.group(1).strip(), match.group(2)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä–∞–±—Å–∫—É—é –∏ —Ä–∏–º—Å–∫—É—é –≤–µ—Ä—Å–∏–∏
        arabic = ""
        roman = ""
        if num_part.isdigit():
            arabic = num_part
            roman_map = {'1': 'I', '2': 'II', '3': 'III', '4': 'IV'}
            roman = roman_map.get(arabic, "")
        else: # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∏–º—Å–∫–∞—è
            roman = num_part
            roman_map_rev = {'I': '1', 'II': '2', 'III': '3', 'IV': '4'}
            arabic = roman_map_rev.get(roman, "")

        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        variations.add(name_part) # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –±–µ–∑ —Ü–∏—Ñ—Ä—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if arabic:
            variations.add(f"{name_part}-{arabic}")
            variations.add(f"{name_part} {arabic}")
        if roman:
            variations.add(f"{name_part}-{roman}")
            variations.add(f"{name_part} {roman}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫, –≥–¥–µ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
    return sorted(list(variations), key=len, reverse=True)


async def get_unique_stations_from_tracking() -> set[str]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏."""
    unique_stations = set()
    async with SessionLocal() as session:
        from_stations_result = await session.execute(select(Tracking.from_station).distinct())
        to_stations_result = await session.execute(select(Tracking.to_station).distinct())
        current_stations_result = await session.execute(select(Tracking.current_station).distinct())

        for row in from_stations_result.scalars().all():
            if row: unique_stations.add(row)
        for row in to_stations_result.scalars().all():
            if row: unique_stations.add(row)
        for row in current_stations_result.scalars().all():
            if row: unique_stations.add(row)
            
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_stations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ 'tracking'.")
    return unique_stations

async def job_populate_stations_cache():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–µ—à–∞."""
    logger.info("--- üèÅ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–µ—à–∞) ---")
    
    all_stations_from_db = await get_unique_stations_from_tracking()
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞–Ω—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –∫–µ—à–µ
    async with SessionLocal() as session:
        result = await session.execute(select(RailwayStation.name))
        stations_in_cache = {row[0] for row in result}
    logger.info(f"–í –∫–µ—à–µ —É–∂–µ –µ—Å—Ç—å {len(stations_in_cache)} —Å—Ç–∞–Ω—Ü–∏–π.")

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å
    stations_to_find = []
    for station_name in all_stations_from_db:
        canonical_name = get_canonical_name(station_name)
        if canonical_name not in stations_in_cache:
            stations_to_find.append(station_name)
    
    logger.info(f"–ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ {len(stations_to_find)} –Ω–æ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π.")

    if not stations_to_find:
        logger.info("–ù–µ—Ç —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    success_count = 0
    fail_count = 0
    
    stations_to_find_sorted = sorted(stations_to_find)
    for i, original_name in enumerate(stations_to_find_sorted):
        logger.info(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{len(stations_to_find_sorted)}: '{original_name}' ---")
        
        name_variations = generate_name_variations(original_name)
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç—ã: {name_variations}")
        
        coords = None
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
        for name_variant in name_variations:
            # –ü–µ—Ä–µ–¥–∞–µ–º –∏ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞, –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            coords = await fetch_station_coords(name_variant, original_name)
            if coords:
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É: '{name_variant}'")
                break 
            await asyncio.sleep(1)
        
        if coords:
            success_count += 1
        else:
            logger.warning(f"‚ùå [Cacher] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏: {original_name} (–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)")
            fail_count += 1
        
        await asyncio.sleep(2) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π

    logger.info("--- ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω ---")
    logger.info(f"  - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
    logger.info(f"  - –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: {fail_count}")

# –≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if __name__ == "__main__":
    asyncio.run(job_populate_stations_cache())