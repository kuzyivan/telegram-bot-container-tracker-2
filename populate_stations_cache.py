# populate_stations_cache.py
import asyncio
from sqlalchemy import select
from db import SessionLocal
from models import Tracking
from services.osm_service import fetch_station_coords
from logger import get_logger

logger = get_logger("station_cacher")

async def get_unique_stations_from_tracking() -> set[str]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏."""
    unique_stations = set()
    async with SessionLocal() as session:
        from_stations_result = await session.execute(select(Tracking.from_station).distinct())
        to_stations_result = await session.execute(select(Tracking.to_station).distinct())
        current_stations_result = await session.execute(select(Tracking.current_station).distinct())

        for row in from_stations_result.scalars().all():
            if row: unique_stations.add(row)
        for row in to_stations_result.scalars().all():
            if row: unique_stations.add(row)
        for row in current_stations_result.scalars().all():
            if row: unique_stations.add(row)
            
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_stations)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ 'tracking'.")
    return unique_stations

async def job_populate_stations_cache():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    logger.info("--- üèÅ [Scheduler] –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π ---")
    
    stations_to_find = await get_unique_stations_from_tracking()
    
    if not stations_to_find:
        logger.info("[Scheduler] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    success_count = 0
    fail_count = 0

    for station_name in stations_to_find:
        try:
            coords = await fetch_station_coords(station_name)
            if coords:
                success_count += 1
            else:
                logger.warning(f"‚ùå [Cacher] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏: {station_name}")
                fail_count += 1
            await asyncio.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        except Exception as e:
            logger.error(f"[Cacher] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–Ω—Ü–∏–∏ '{station_name}': {e}", exc_info=True)
            fail_count += 1

    logger.info("--- ‚úÖ [Scheduler] –ó–∞–¥–∞—á–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
    logger.info(f"  - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –≤ –∫–µ—à–µ): {success_count}")
    logger.info(f"  - –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏: {fail_count}")

# –≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if __name__ == "__main__":
    asyncio.run(job_populate_stations_cache())