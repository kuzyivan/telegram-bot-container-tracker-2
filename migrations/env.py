from __future__ import annotations

from logging.config import fileConfig
import os
from typing import cast

from alembic import context
from sqlalchemy import create_engine, pool

# 1) –ó–∞–≥—Ä—É–∂–∞–µ–º .env (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω python-dotenv)
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

# 2) –ë–µ—Ä—ë–º URL: —Å–Ω–∞—á–∞–ª–∞ ALEMBIC_DATABASE_URL (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π),
#    –∏–Ω–∞—á–µ DATABASE_URL (–º–æ–∂–µ—Ç –±—ã—Ç—å async), –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏–º –Ω–∞ psycopg2
database_url = os.getenv("ALEMBIC_DATABASE_URL") or os.getenv("DATABASE_URL")
if not database_url:
    raise RuntimeError(
        "‚ùå –ù–µ –∑–∞–¥–∞–Ω ALEMBIC_DATABASE_URL/DATABASE_URL –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏–ª–∏ .env"
    )
database_url = cast(str, database_url)

# –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω asyncpg ‚Äî –ø–æ–¥–º–µ–Ω—è–µ–º –Ω–∞ psycopg2 –¥–ª—è Alembic (–æ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
if database_url.startswith("postgresql+asyncpg"):
    alembic_url = database_url.replace("postgresql+asyncpg", "postgresql+psycopg2")
    print("‚ö° Alembic: asyncpg ‚Üí psycopg2 (–¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π)")
else:
    alembic_url = database_url

# 3) –ö–æ–Ω—Ñ–∏–≥ Alembic
config = context.config
config.set_main_option("sqlalchemy.url", alembic_url)

# 4) –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Alembic –∏–∑ alembic.ini
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# 5) –í–ê–ñ–ù–û: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Base –∏ –º–æ–¥–µ–ª–∏ –ù–ï –∏–∑ db.py, –∞ –ø—Ä—è–º–æ –∏–∑ models
#    —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–≤–∏–∂–æ–∫/—Å–µ—Å—Å–∏—é –∏ –Ω–µ —Ç—è–Ω—É—Ç—å TELEGRAM_TOKEN –∏ –ø—Ä–æ—á–µ–µ
from models import Base  # –∑–¥–µ—Å—å declarative_base()
import models  # stats, tracking, tracking_subscriptions, users
from model.terminal_container import TerminalContainer  # –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞

target_metadata = Base.metadata


def run_migrations_offline() -> None:
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)."""
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
    )
    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ –æ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ)."""
    # —Å–æ–∑–¥–∞—ë–º –°–ò–ù–•–†–û–ù–ù–´–ô –¥–≤–∏–∂–æ–∫
    connectable = create_engine(
        alembic_url,
        poolclass=pool.NullPool,
        future=True,
    )

    # –ü—Ä–æ—Å—Ç–æ –∫—Ä–∞—Å–∏–≤–æ –ø–µ—á–∞—Ç–∞–µ–º DSN –±–µ–∑ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è
    try:
        safe_dsn = alembic_url.split("://", 1)[-1]
        if "@" in safe_dsn:
            safe_dsn = safe_dsn.split("@", 1)[-1]
        print(f"üîó Alembic –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫: {safe_dsn}")
    except Exception:
        pass

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
        )
        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()