# bot/handlers.py

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∏–∑ 'core' –∏ UI-—ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ 'ui'
from core.calculator import calculate_distance
from core.data_parser import search_station_names, normalize_station_name
from .ui import (
    MAIN_MENU_CHOICE, ASKING_FROM_STATION, ASKING_TO_STATION,
    BUTTON_DISTANCE_CALC, BUTTON_TARIFF_CALC
)

logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é."""
    reply_keyboard = [[BUTTON_DISTANCE_CALC, BUTTON_TARIFF_CALC]]
    
    await update.message.reply_html(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö.\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é..."
        )
    )
    return MAIN_MENU_CHOICE

async def handle_main_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Reply-–º–µ–Ω—é."""
    text = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª: '{text}'")

    if text == BUTTON_DISTANCE_CALC:
        await update.message.reply_html(
            "–û—Ç–ª–∏—á–Ω–æ! <b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ASKING_FROM_STATION
        
    elif text == BUTTON_TARIFF_CALC:
        await update.message.reply_text(
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. üë∑‚Äç‚ôÇÔ∏è",
            reply_markup=ReplyKeyboardRemove()
        )
        return await start(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return MAIN_MENU_CHOICE

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""
    await update.message.reply_html(
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "  /start - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "  /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞—Å—á–µ—Ç\n\n"
        "–ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —è –ø–æ–Ω–∏–º–∞—é —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, <i>–ö—É–Ω—Ü–µ–≤–æ-2</i>, <i>–ö—É–Ω—Ü–µ–≤–æ II</i>)."
    )

async def ask_from_station(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."""
    df_stations = context.bot_data['df_stations']
    station_a_raw = ""
    if update.message:
        station_a_raw = update.message.text.strip()
    elif update.callback_query:
        await update.callback_query.answer()
        station_a_raw = update.callback_query.data
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.callback_query.message.message_id)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: '{station_a_raw}'")

    normalized_a = normalize_station_name(station_a_raw)
    match_a = df_stations[df_stations['normalized_name'] == normalized_a]
    
    if match_a.empty:
        logger.warning(f"–°—Ç–∞–Ω—Ü–∏—è '{station_a_raw}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã.")
        similar = search_station_names(station_a_raw, df_stations, limit=5)
        if similar:
            keyboard = [[InlineKeyboardButton(name, callback_data=name)] for name in similar]
            reply_markup = InlineKeyboardMarkup(keyboard)
            response = (f"‚ùå –°—Ç–∞–Ω—Ü–∏—è <b>'{station_a_raw}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                        f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤?")
            await update.effective_message.reply_html(response, reply_markup=reply_markup)
        else:
            response = (f"‚ùå –°—Ç–∞–Ω—Ü–∏—è <b>'{station_a_raw}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.")
            await update.effective_message.reply_html(response)
        return ASKING_FROM_STATION

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏ ---
    station_info = match_a.iloc[0]
    context.user_data['from_station_info'] = {
        'name': station_info['station_name'],
        'code': station_info['station_code'],
        'railway': station_info['railway']
    }
    # ----------------------------------------------------

    await update.effective_message.reply_html(
        f"‚úÖ –°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <b>{station_info['station_name']}</b>\n"
        f"<code>({station_info['station_code']}, {station_info['railway']})</code>\n\n"
        "<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:</b>"
    )
    return ASKING_TO_STATION

async def ask_to_station(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç."""
    df_stations = context.bot_data['df_stations']
    transit_matrices = context.bot_data['transit_matrices']
    station_b_raw = ""
    if update.message:
        station_b_raw = update.message.text.strip()
    elif update.callback_query:
        await update.callback_query.answer()
        station_b_raw = update.callback_query.data
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.callback_query.message.message_id)

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: '{station_b_raw}'")

    normalized_b = normalize_station_name(station_b_raw)
    match_b = df_stations[df_stations['normalized_name'] == normalized_b]

    if match_b.empty:
        logger.warning(f"–°—Ç–∞–Ω—Ü–∏—è '{station_b_raw}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã.")
        similar = search_station_names(station_b_raw, df_stations, limit=5)
        if similar:
            keyboard = [[InlineKeyboardButton(name, callback_data=name)] for name in similar]
            reply_markup = InlineKeyboardMarkup(keyboard)
            response = (f"‚ùå –°—Ç–∞–Ω—Ü–∏—è <b>'{station_b_raw}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                        f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤?")
            await update.effective_message.reply_html(response, reply_markup=reply_markup)
        else:
            response = (f"‚ùå –°—Ç–∞–Ω—Ü–∏—è <b>'{station_b_raw}'</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                        f"–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.")
            await update.effective_message.reply_html(response)
        return ASKING_TO_STATION

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏ ---
    from_station_info = context.user_data['from_station_info']
    to_station_info = {
        'name': match_b.iloc[0]['station_name'],
        'code': match_b.iloc[0]['station_code'],
        'railway': match_b.iloc[0]['railway']
    }
    # ----------------------------------------------------
    
    await update.effective_message.reply_html(
        f"‚úÖ –°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: <b>{to_station_info['name']}</b>\n"
        f"<code>({to_station_info['code']}, {to_station_info['railway']})</code>\n\n"
        f"–ò—â—É –º–∞—Ä—à—Ä—É—Ç..."
    )
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—á–µ—Ç –¥–ª—è '{from_station_info['name']}' -> '{to_station_info['name']}'")

    result = calculate_distance(from_station_info['name'], to_station_info['name'], df_stations, transit_matrices)
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ calculate_distance: {result['status']}")

    if result['status'] == 'success':
        route = result['route']
        if route.get('is_same_station'):
            response = (f"‚úÖ –°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç: <b>{from_station_info['name']}</b>.\n"
                        f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{route['total_distance']} –∫–º</b>.")
        else:
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç ---
            response = (
                f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω:\n\n"
                f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                f"<code>{from_station_info['name']} ({from_station_info['code']}, {from_station_info['railway']})</code>\n\n"
                f"<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b>\n"
                f"<code>{to_station_info['name']} ({to_station_info['code']}, {to_station_info['railway']})</code>\n\n"
                f"------------------------------\n"
                f"1. {route['from']} ‚Üí {route['tpa_name']}: {route['distance_a_to_tpa']} –∫–º\n"
                f"2. {route['tpa_name']} ‚Üí {route['tpb_name']}: {route['distance_tpa_to_tpb']} –∫–º\n"
                f"3. {route['tpb_name']} ‚Üí {route['to']}: {route['distance_tpb_to_b']} –∫–º\n"
                f"------------------------------\n"
                f"<b>–ò–¢–û–ì–û–í–û–ï –¢–ê–†–ò–§–ù–û–ï –†–ê–°–°–¢–û–Ø–ù–ò–ï: {route['total_distance']} –∫–º</b>"
            )
            # --------------------------------------------
        logger.info(f"–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω.")
    else:
        response = f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {result['message']}"
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∞: {result['message']}.")

    await update.effective_message.reply_html(response)
    context.user_data.clear()

    reply_keyboard = [[BUTTON_DISTANCE_CALC, BUTTON_TARIFF_CALC]]
    await update.effective_message.reply_html(
        "------------------------------\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é..."
        )
    )
    return MAIN_MENU_CHOICE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    context.user_data.clear()
    
    # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
    
    await update.effective_message.reply_text(
        "–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=ReplyKeyboardRemove()
    )
    return await start(update, context)