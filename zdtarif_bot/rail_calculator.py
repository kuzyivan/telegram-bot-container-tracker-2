# zdtarif_bot/rail_calculator.py
import os
import sys
import logging

# --- –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ü–ê–ü–ö–ï –ü–†–û–ï–ö–¢–ê ---
current_file_path = os.path.abspath(__file__)
zdtarif_bot_dir = os.path.dirname(current_file_path)
project_root_dir = os.path.dirname(zdtarif_bot_dir)
if project_root_dir not in sys.path:
    sys.path.insert(0, project_root_dir)

# ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –§–£–ù–ö–¶–ò–ò
from zdtarif_bot.core.data_loader import load_kniga_2_rp, load_kniga_3_matrices
# ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculate_distance
from zdtarif_bot.core.calculator import calculate_distance

# --- Basic Logging Setup ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
stations_data = None
distance_matrices_data = None
initialization_error = None

try:
    data_dir_path = os.path.join(zdtarif_bot_dir, 'data')
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –∏ –º–∞—Ç—Ä–∏—Ü –∏–∑: {data_dir_path}")

    stations_data = load_kniga_2_rp(data_dir_path)
    distance_matrices_data = load_kniga_3_matrices(data_dir_path)

    if stations_data is None or not distance_matrices_data:
        initialization_error = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–π –∏–ª–∏ –º–∞—Ç—Ä–∏—Ü."
        logger.error(f"üí• CRITICAL: {initialization_error}")
    else:
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–π –∏ –º–∞—Ç—Ä–∏—Ü —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

except FileNotFoundError as e:
    initialization_error = f"–ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}"
    logger.error(f"üí• CRITICAL: {initialization_error}", exc_info=True)
    logger.error(f"   –ü—Ä–æ–≤–µ—Ä—è–ª—Å—è –ø—É—Ç—å: {data_dir_path}")
except Exception as e:
    initialization_error = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}"
    logger.error(f"üí• CRITICAL: {initialization_error}", exc_info=True)


# --- Main Function for External Use ---
def get_distance_sync(station_code_1: str, station_code_2: str) -> int | None:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏—é calculate_distance.
    """
    if initialization_error:
        logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({initialization_error}), —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return None
    if stations_data is None or not distance_matrices_data:
         logger.error("‚ùå –î–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–π –∏–ª–∏ –º–∞—Ç—Ä–∏—Ü –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
         return None

    if not station_code_1 or not station_code_2:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏. –†–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return None

    try:
        # ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é calculate_distance, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–π –¥–∞–Ω–Ω—ã–µ
        distance = calculate_distance(
            station_code_1=str(station_code_1),
            station_code_2=str(station_code_2),
            stations_df=stations_data, # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π DataFrame —Å—Ç–∞–Ω—Ü–∏–π
            distance_matrices=distance_matrices_data # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã
        )

        if distance is not None:
            distance_int = int(distance)
            if distance_int > 0:
                logger.debug(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ: {station_code_1} -> {station_code_2} = {distance_int} –∫–º")
                return distance_int
            else:
                logger.info(f"–§—É–Ω–∫—Ü–∏—è calculate_distance –≤–µ—Ä–Ω—É–ª–∞ 0 –∏–ª–∏ <0 –¥–ª—è {station_code_1} -> {station_code_2}.")
                return None
        else:
            logger.info(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–µ–π calculate_distance –¥–ª—è {station_code_1} -> {station_code_2}.")
            return None

    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ calculate_distance –¥–ª—è {station_code_1}-{station_code_2}: {e}", exc_info=True)
        return None

# --- Example Usage (Optional) ---
if __name__ == '__main__':
    if not initialization_error:
        logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤...")
        code1 = "181102" # –°–µ–ª—è—Ç–∏–Ω–æ
        code2 = "850007" # –ò–Ω—Å–∫–∞—è
        dist = get_distance_sync(code1, code2)
        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ ...
    else:
        logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: {initialization_error}")