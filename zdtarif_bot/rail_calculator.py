# zdtarif_bot/rail_calculator.py
import os
import sys 
import logging

# --- –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ü–ê–ü–ö–ï –ü–†–û–ï–ö–¢–ê (AtermTrackBot), —á—Ç–æ–±—ã Python –Ω–∞—à–µ–ª zdtarif_bot ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É
current_file_path = os.path.abspath(__file__)
# –ù–∞—Ö–æ–¥–∏–º –ø–∞–ø–∫—É zdtarif_bot
zdtarif_bot_dir = os.path.dirname(current_file_path)
# –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–ø–∞–ø–∫—É –≤—ã—à–µ zdtarif_bot)
project_root_dir = os.path.dirname(zdtarif_bot_dir)
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
if project_root_dir not in sys.path:
    sys.path.insert(0, project_root_dir)
    # logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω {project_root_dir} –≤ sys.path") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

# ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ê–ë–°–û–õ–Æ–¢–ù–´–ï –∏–º–ø–æ—Ä—Ç—ã –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
from zdtarif_bot.core.data_loader import load_kniga_2_rp, load_kniga_3_matrices 
from zdtarif_bot.core.calculator import Calculator 

# --- Basic Logging Setup ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- Global Calculator Initialization ---
calculator = None

try:
    # –ü—É—Ç—å –∫ 'data' —Ç–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≠–¢–û–ì–û —Ñ–∞–π–ª–∞
    data_dir_path = os.path.join(zdtarif_bot_dir, 'data') 
    logger.info(f"Initializing DataLoader with data path: {data_dir_path}")

    stations_df = load_kniga_2_rp(data_dir_path)
    distance_matrices = load_kniga_3_matrices(data_dir_path)

    if stations_df is not None and distance_matrices:
        calculator = Calculator(stations_df, distance_matrices) 
        logger.info("‚úÖ Calculator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
    else:
        logger.error("üí• CRITICAL: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–π –∏–ª–∏ –º–∞—Ç—Ä–∏—Ü.")
        calculator = None 

except FileNotFoundError as e:
    logger.error(f"üí• CRITICAL: –ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}", exc_info=True)
    logger.error(f"   –ü—Ä–æ–≤–µ—Ä—è–ª—Å—è –ø—É—Ç—å: {data_dir_path}")
    calculator = None 
except Exception as e:
    logger.error(f"üí• CRITICAL: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {e}", exc_info=True)
    calculator = None

# --- Main Function for External Use ---
def get_distance_sync(station_code_1: str, station_code_2: str) -> int | None:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞.
    """
    if not calculator: 
        logger.error("‚ùå –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return None

    if not station_code_1 or not station_code_2:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–¥ —Å—Ç–∞–Ω—Ü–∏–∏. –†–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return None

    try:
        distance = calculator.get_distance(str(station_code_1), str(station_code_2))

        if distance is not None:
            distance_int = int(distance)
            if distance_int > 0:
                logger.debug(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ: {station_code_1} -> {station_code_2} = {distance_int} –∫–º")
                return distance_int
            else:
                logger.info(f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª 0 –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è {station_code_1} -> {station_code_2}.")
                return None 
        else:
            logger.info(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –¥–ª—è {station_code_1} -> {station_code_2}.")
            return None

    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {station_code_1}-{station_code_2}: {e}", exc_info=True)
        return None

# --- Example Usage (Optional) ---
if __name__ == '__main__':
    if calculator:
        pass # –ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤           
    else:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã, —Ç–∞–∫ –∫–∞–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")