import asyncio
from logger import get_logger
logger = get_logger(__name__)

from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ConversationHandler
)
from telegram import BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from dotenv import load_dotenv
load_dotenv()

from config import TOKEN, ADMIN_CHAT_ID
from mail_reader import start_mail_checking
from scheduler import start_scheduler

from handlers.user_handlers import (
    start, handle_sticker, handle_message, show_menu,
    menu_button_handler, reply_keyboard_handler, dislocation_inline_callback_handler,
    set_email_command, process_email, cancel_email
)
from handlers.admin_handlers import stats, exportstats, tracking, test_notify
from db import SessionLocal
from handlers.tracking_handlers import (
    tracking_conversation_handler,
    cancel,
    cancel_tracking_confirm
)
from handlers.broadcast import broadcast_conversation_handler

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ===
async def error_handler(update, context):
    logger.error("‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", context.error, exc_info=True)

# === –£–°–¢–ê–ù–û–í–ö–ê –ö–û–ú–ê–ù–î ===
async def set_bot_commands(application):
    try:
        user_commands = [
            BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("canceltracking", "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Å–ª–µ–∂–µ–Ω–∏—è"),
            BotCommand("set_email", "–£–∫–∞–∑–∞—Ç—å e-mail –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤"),
            BotCommand("email_off", "–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ e-mail"),
        ]
        await application.bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        admin_commands = user_commands + [
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)"),
            BotCommand("exportstats", "–í—ã–≥—Ä—É–∑–∫–∞ (–∞–¥–º–∏–Ω)"),
            BotCommand("testnotify", "–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–∞–¥–º–∏–Ω)"),
            BotCommand("tracking", "–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–∞–¥–º–∏–Ω)"),
            BotCommand("broadcast", "–†–∞—Å—Å—ã–ª–∫–∞ (–∞–¥–º–∏–Ω)"),
        ]
        await application.bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=ADMIN_CHAT_ID))
        logger.info(f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ (ID: {ADMIN_CHAT_ID}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: %s", e)

# === –¢–û–ß–ö–ê –ó–ê–ü–£–°–ö–ê ===
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    try:
        if not TOKEN:
            raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å config.py")

        logger.info("‚úÖ TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω. –°–æ–∑–¥–∞—ë–º Application...")
        application = Application.builder().token(TOKEN).build()

        # --- ConversationHandler –¥–ª—è /set_email ---
        SET_EMAIL = range(1)
        set_email_conv_handler = ConversationHandler(
            entry_points=[CommandHandler("set_email", set_email_command)],
            states={SET_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_email)]},
            fallbacks=[CommandHandler("cancel", cancel_email)],
        )
        application.add_handler(set_email_conv_handler)

        # --- post_init ---
        async def post_init(application):
            try:
                logger.info("‚öôÔ∏è post_init: –ó–∞–ø—É—Å–∫–∞–µ–º start_mail_checking –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...")
                await start_mail_checking()
                logger.info("üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∑–∞–ø—É—â–µ–Ω–∞.")
                start_scheduler(application.bot)
                logger.info("üìÜ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω.")
                await set_bot_commands(application)
                logger.info("‚öôÔ∏è post_init –∑–∞–≤–µ—Ä—à—ë–Ω.")
            except Exception as e:
                logger.exception("‚ùå –û—à–∏–±–∫–∞ –≤ post_init: %s", e)

        application.post_init = post_init

        # --- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã ---
        logger.info("üì¶ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã...")
        application.add_handler(broadcast_conversation_handler)
        application.add_handler(tracking_conversation_handler())
        application.add_handler(CallbackQueryHandler(menu_button_handler, pattern="^(start|dislocation|track_request)$"))
        application.add_handler(CallbackQueryHandler(dislocation_inline_callback_handler, pattern="^dislocation_inline$"))
        application.add_handler(CommandHandler("menu", show_menu))
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("canceltracking", cancel))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CommandHandler("exportstats", exportstats))
        application.add_handler(CommandHandler("tracking", tracking))
        application.add_handler(CommandHandler("testnotify", test_notify))
        application.add_handler(CallbackQueryHandler(cancel_tracking_confirm, pattern="^cancel_tracking_"))
        application.add_handler(MessageHandler(
            filters.Regex("^(üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è|üîî –ó–∞–¥–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ|‚ùå –û—Ç–º–µ–Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è)$"),
            reply_keyboard_handler
        ))
        application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
        application.add_error_handler(error_handler)

        logger.info("‚úÖ –í—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º polling...")

        await application.run_polling()
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

    except Exception as e:
        logger.critical("üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", e, exc_info=True)

if __name__ == "__main__":
    asyncio.run(main())
