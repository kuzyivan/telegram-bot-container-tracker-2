# bot.py
from logger import get_logger
logger = get_logger(__name__)

from telegram import BotCommand, BotCommandScopeDefault, BotCommandScopeChat, Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ConversationHandler, ContextTypes
)
from telegram.request import HTTPXRequest
from dotenv import load_dotenv
load_dotenv()

from config import TOKEN, ADMIN_CHAT_ID
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º 'check_mail' –≤–º–µ—Å—Ç–æ 'start_mail_checking'
from mail_reader import check_mail
from scheduler import start_scheduler

# --- —Ä–∞–∑–Ω–µ—Å—ë–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---
from handlers.email_handlers import set_email_command, process_email, cancel_email, SET_EMAIL
from handlers.menu_handlers import (
    start, show_menu, reply_keyboard_handler,
    menu_button_handler, dislocation_inline_callback_handler, handle_sticker
)
from handlers.dislocation_handlers import handle_message
from handlers.admin_handlers import stats, exportstats, tracking, test_notify
from handlers.tracking_handlers import (
    tracking_conversation_handler,
    cancel_tracking_start,
    cancel_tracking_confirm,
)
from handlers.misc_handlers import cancel_my_tracking
from handlers.broadcast import broadcast_conversation_handler
from handlers.train_handlers import upload_train_help, handle_train_excel
from handlers.train import setup_handlers as setup_train_handlers


async def error_handler(update, context):
    logger.error("‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", context.error, exc_info=True)


async def debug_all_updates(update: Update, context):
    try:
        uid = update.effective_user.id if update.effective_user else "‚Äî"
        uname = update.effective_user.username if update.effective_user else "‚Äî"
        txt = getattr(getattr(update, "message", None), "text", None)
        logger.info(f"[DEBUG UPDATE] from {uid} (@{uname}) type={type(update).__name__} text={txt}")
    except Exception:
        logger.exception("[DEBUG UPDATE] failed to log update")


async def set_bot_commands(application):
    user_commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("canceltracking", "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Å–ª–µ–∂–µ–Ω–∏—è"),
        BotCommand("set_email", "–£–∫–∞–∑–∞—Ç—å e-mail –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤"),
        BotCommand("email_off", "–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ e-mail"),
        BotCommand("upload_train", "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Å –ø–æ–µ–∑–¥–∞–º–∏"),
    ]
    await application.bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    admin_commands = user_commands + [
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand("exportstats", "–í—ã–≥—Ä—É–∑–∫–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand("testnotify", "–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand("tracking", "–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–∞–¥–º–∏–Ω)"),
        BotCommand("broadcast", "–†–∞—Å—Å—ã–ª–∫–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand("train", "–û—Ç—á—ë—Ç –ø–æ –ø–æ–µ–∑–¥—É (–∞–¥–º–∏–Ω)"),
    ]
    await application.bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=ADMIN_CHAT_ID))
    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ (ID: {ADMIN_CHAT_ID}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


def main():
    logger.info("üö¶ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞!")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if not TOKEN:
        logger.critical("üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç

    try:
        request = HTTPXRequest(
            connect_timeout=20.0,
            read_timeout=60.0,
            write_timeout=60.0,
            pool_timeout=20.0,
            connection_pool_size=50,
        )
        application = Application.builder().token(TOKEN).request(request).build()

        set_email_conv_handler = ConversationHandler(
            entry_points=[CommandHandler("set_email", set_email_command)],
            states={SET_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_email)]},
            fallbacks=[CommandHandler("cancel", cancel_email)],
        )
        application.add_handler(set_email_conv_handler)
        
        application.add_handler(broadcast_conversation_handler)
        application.add_handler(tracking_conversation_handler())

        application.add_handler(CallbackQueryHandler(menu_button_handler, pattern="^(start|dislocation|track_request)$"))
        application.add_handler(CallbackQueryHandler(dislocation_inline_callback_handler, pattern="^dislocation_inline$"))
        application.add_handler(CallbackQueryHandler(cancel_tracking_start, pattern=r"^cancel_tracking$"))
        application.add_handler(CallbackQueryHandler(cancel_tracking_confirm, pattern=r"^cancel_tracking_(yes|no)$"))

        application.add_handler(CommandHandler("menu", show_menu))
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("canceltracking", cancel_my_tracking))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CommandHandler("exportstats", exportstats))
        application.add_handler(CommandHandler("tracking", tracking))
        application.add_handler(CommandHandler("testnotify", test_notify))
        setup_train_handlers(application)
        logger.info("‚úÖ /train –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (handlers.train)")

        application.add_handler(CommandHandler("upload_train", upload_train_help))
        application.add_handler(MessageHandler(filters.Document.ALL, handle_train_excel))
        application.add_handler(MessageHandler(
            filters.Regex("^(üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è|üîî –ó–∞–¥–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ|‚ùå –û—Ç–º–µ–Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è)$"),
            reply_keyboard_handler
        ))
        application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(MessageHandler(filters.ALL, debug_all_updates))

        application.add_error_handler(error_handler)

        async def post_init(app):
            logger.info("‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...")

            try:
                await app.bot.send_message(ADMIN_CHAT_ID, "ü§ñ –ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –∏ —Å–ª—É—à–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã (polling).")
                me = await app.bot.get_me()
                logger.info(f"getMe: @{me.username} (id={me.id})")
            except Exception as e:
                logger.error(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}", exc_info=True)

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1 (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ): –í—ã–∑—ã–≤–∞–µ–º 'check_mail'
            await check_mail()
            start_scheduler(app.bot)
            await set_bot_commands(app)
            logger.info("‚úÖ post_init –∑–∞–≤–µ—Ä—à—ë–Ω.")

        application.post_init = post_init

        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É. –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        application.run_polling(
            allowed_updates=None,
            drop_pending_updates=False,
            stop_signals=None,
            close_loop=False
        )
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

    except Exception as e:
        logger.critical("üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", e, exc_info=True)


if __name__ == "__main__":
    main()