import os
import sqlite3
import re
import asyncio
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from mail_reader import start_mail_checking
from backup_db import start_backup_scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
PORT = int(os.getenv('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
DB_FILE = 'tracking.db'

if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º üöõ")

# –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
async def find_container(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip().upper()

    if not re.match(r'^[A-Z]{4}\d{7}$', query):
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, MSKU1234567).")
        return

    waiting_message = await update.message.reply_text("üîç –ò—â—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    await asyncio.sleep(1)

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM tracking WHERE container_number = ?", (query,))
    rows = cursor.fetchall()
    conn.close()

    await waiting_message.delete()

    if not rows:
        await update.message.reply_text("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        messages = []
        for row in rows:
            message = (f"\U0001F69A –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row[1]}\n"
                       f"–û—Ç–∫—É–¥–∞: {row[2]}\n"
                       f"–ö—É–¥–∞: {row[3]}\n"
                       f"–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {row[4]}\n"
                       f"–û–ø–µ—Ä–∞—Ü–∏—è: {row[5]}\n"
                       f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {row[6]}\n"
                       f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row[7]}\n"
                       f"–û—Å—Ç–∞–ª–æ—Å—å –∫–º: {row[8]}")
            messages.append(message)
        await update.message.reply_text('\n\n'.join(messages))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    start_mail_checking()
    start_backup_scheduler()

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), find_container))

    logger.info("‚ú® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    if WEBHOOK_URL:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
        app.run_webhook(listen="0.0.0.0", port=PORT, webhook_url=WEBHOOK_URL)
    else:
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling —Ä–µ–∂–∏–º.")
        app.run_polling()
