import os
import re
import sqlite3
import logging
import pandas as pd
from datetime import datetime
from telegram import Update, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from mail_reader import start_mail_checking, ensure_database_exists as ensure_db_mail_reader

TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def ensure_database():
    """
    –°–æ–∑–¥–∞—ë—Ç –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã:
    - tracking (–∏–∑ mail_reader.ensure_database_exists)
    - stats   (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    """
    # —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É tracking —á–µ—Ä–µ–∑ mail_reader
    ensure_db_mail_reader()
    # –¥–æ–ø–æ–ª–Ω—è–µ–º stats
    conn = sqlite3.connect("tracking.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            container_number TEXT,
            user_id INTEGER,
            username TEXT,
            timestamp TEXT
        )
    """)
    conn.commit()
    conn.close()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker_id = (
        "CAACAgIAAxkBAAIC6mgUWmOtztmC0dnqI3C2l4wcikA-AAJvbAACa_OZSGYOhHaiIb7mNgQ"
    )
    await update.message.reply_sticker(sticker_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    container_numbers = [
        c.strip().upper()
        for c in re.split(r'[\s,\n.]+', text)
        if c.strip()
    ]

    conn = sqlite3.connect("tracking.db")
    cursor = conn.cursor()

    found = []
    not_found = []
    for cn in container_numbers:
        cursor.execute("""
            SELECT container_number, from_station, to_station, current_station,
                   operation, operation_date, waybill, km_left, forecast_days,
                   wagon_number, operation_road
            FROM tracking WHERE container_number = ?
        """, (cn,))
        row = cursor.fetchone()
        if row:
            found.append(row)
            cursor.execute("""
                INSERT INTO stats (container_number, user_id, username, timestamp)
                VALUES (?, ?, ?, datetime('now', 'localtime'))
            """, (
                cn,
                update.effective_user.id,
                update.effective_user.username or "‚Äî"
            ))
            conn.commit()
        else:
            not_found.append(cn)
    conn.close()

    if not found:
        return await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ ‚Äî Excel
    if len(found) > 1:
        df = pd.DataFrame(found, columns=[
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞','–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è','–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏','–û–ø–µ—Ä–∞—Ü–∏—è','–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π','–û—Å—Ç–∞–ª–æ—Å—å –∫–º','–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω.)',
            '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞','–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        ])
        fname = f"/tmp/containers_{datetime.now():%H%M}.xlsx"
        df.to_excel(fname, index=False)
        await update.message.reply_document(
            document=open(fname, "rb"),
            filename=os.path.basename(fname)
        )
        if not_found:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
        return

    # –æ–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Äî —Ç–µ–∫—Å—Ç
    row = found[0]
    wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if row[9].startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
    reply = (
        f"üöõ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row[0]}\n"
        f"üöá –í–∞–≥–æ–Ω: {row[9]} ({wagon_type})\n"
        f"üìç –î–∏—Å–ª–æ–∫–∞—Ü–∏—è: {row[3]} {row[10]}\n"
        f"üèó –û–ø–µ—Ä–∞—Ü–∏—è: {row[4]} ‚Äî {row[5]}\n\n"
        f"–û—Ç–∫—É–¥–∞: {row[1]}\n"
        f"–ö—É–¥–∞: {row[2]}\n\n"
        f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row[6]}\n"
        f"üõ£ –û—Å—Ç–∞–ª–æ—Å—å –∫–º: {row[7]}\n"
        f"‚è≥ –ü—Ä–æ–≥–Ω–æ–∑: {row[8]} –¥–Ω."
    )
    await update.message.reply_text(reply)


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_chat.id) != ADMIN_CHAT_ID:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    conn = sqlite3.connect("tracking.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT user_id, COALESCE(username,'‚Äî'), COUNT(*), GROUP_CONCAT(DISTINCT container_number)
          FROM stats
      GROUP BY user_id
      ORDER BY COUNT(*) DESC
    """)
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        return await update.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"]
    for uid, uname, cnt, cnts in rows:
        lines.append(f"üë§ {uname} (ID:{uid}) ‚Äî {cnt} –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {cnts}")
    await update.message.reply_text("\n".join(lines))


async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_chat.id) != ADMIN_CHAT_ID:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    conn = sqlite3.connect("tracking.db")
    df = pd.read_sql_query("SELECT * FROM stats", conn)
    conn.close()
    if df.empty:
        return await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    path = f"/tmp/stats_{datetime.now():%H%M}.xlsx"
    df.to_excel(path, index=False)
    await update.message.reply_document(document=open(path, "rb"), filename=os.path.basename(path))


async def set_commands(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("stats", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–¥–º–∏–Ω)"),
        BotCommand("exportstats", "–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∞–¥–º–∏–Ω)"),
    ])


# ‚Äî‚Äî‚Äî‚Äî‚Äî —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî
async def auto_ping(context: ContextTypes.DEFAULT_TYPE):
    try:
        await context.bot.get_me()
        logger.info("üì° Auto-ping OK")
    except Exception as e:
        logger.warning("‚ö† Auto-ping failed: %s", e)


async def keep_alive(context: ContextTypes.DEFAULT_TYPE):
    logger.info("üü¢ Heartbeat")


def main():
    ensure_database()
    start_mail_checking()

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("exportstats", exportstats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.post_init = set_commands

    # –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ JobQueue
    jq = app.job_queue
    jq.run_repeating(auto_ping, interval=5*60, first=0)
    jq.run_repeating(keep_alive, interval=60, first=0)

    # webhook
    logger.info("‚ú® –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç")
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        url_path=TOKEN,
        webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )


if __name__ == "__main__":
    main()
