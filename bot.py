import os
import logging
import threading
import time
import tempfile
import pandas as pd
import psycopg2
from telegram import Update, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from mail_reader import start_mail_checking, ensure_database_exists

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))


def get_pg_connection():
    return psycopg2.connect(
        host=os.getenv("POSTGRES_HOST"),
        port=int(os.getenv("POSTGRES_PORT", 5432)),
        dbname=os.getenv("POSTGRES_DB"),
        user=os.getenv("POSTGRES_USER"),
        password=os.getenv("POSTGRES_PASSWORD")
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
    )


async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤: –≤—ã–≤–æ–¥ –∏—Ö file_id"""
    sticker_id = update.message.sticker.file_id
    await update.message.reply_text(
        f"üÜî ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker_id}`",
        parse_mode='Markdown'
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–∏—Å–∫ –≤ –ë–î –∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    text = update.message.text.strip().upper()
    numbers = [t for t in text.split() if t]

    conn = get_pg_connection()
    cur = conn.cursor()

    results = []
    not_found = []
    for num in numbers:
        cur.execute(
            "SELECT * FROM tracking WHERE container_number = %s", (num,)
        )
        row = cur.fetchone()
        if row:
            results.append(row)
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ stats
            cur.execute(
                "INSERT INTO stats(container_number, user_id, username) VALUES(%s, %s, %s)",
                (num, update.effective_user.id, update.effective_user.username)
            )
            conn.commit()
        else:
            not_found.append(num)
    conn.close()

    if not results:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.")
        return

    # –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî XLSX
    if len(results) > 1:
        df = pd.DataFrame(results, columns=[
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞','–û—Ç–∫—É–¥–∞','–ö—É–¥–∞','–ì–¥–µ','–û–ø–µ—Ä–∞—Ü–∏—è','–ö–æ–≥–¥–∞',
            '–ù–∞–∫–ª–∞–¥–Ω–∞—è','–ö–º','–ü—Ä–æ–≥–Ω–æ–∑','–í–∞–≥–æ–Ω','–î–æ—Ä–æ–≥–∞'
        ])
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
            df.to_excel(tmp.name, index=False)
            await update.message.reply_document(open(tmp.name, 'rb'))
        if not_found:
            await update.message.reply_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found)
            )
        return

    # –æ–¥–∏–Ω–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
    row = results[0]
    msg = (
        f"üöõ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row[0]}\n"
        f"üìç {row[3]} ‚Äî {row[4]} ({row[5]})\n"
        f"–û—Ç–∫—É–¥–∞: {row[1]}, –ö—É–¥–∞: {row[2]}\n"
        f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row[6]}, –û—Å—Ç–∞–ª–æ—Å—å –∫–º: {row[7]}, –ü—Ä–æ–≥–Ω–æ–∑: {row[8]} –¥–Ω."
    )
    await update.message.reply_text(msg)


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    if update.effective_user.id != ADMIN_CHAT_ID:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    conn = get_pg_connection()
    cur = conn.cursor()
    cur.execute(
        """
        SELECT user_id, username, COUNT(*) AS cnt
        FROM stats GROUP BY user_id, username ORDER BY cnt DESC
        """
    )
    rows = cur.fetchall()
    conn.close()
    if not rows:
        return await update.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    for u, name, cnt in rows:
        text += f"üë§ {name or u}: {cnt}\n"
    await update.message.reply_text(text)


async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ XLSX (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    if update.effective_user.id != ADMIN_CHAT_ID:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    conn = get_pg_connection()
    df = pd.read_sql("SELECT * FROM stats", conn)
    conn.close()
    if df.empty:
        return await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
    with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
        df.to_excel(tmp.name, index=False)
        await update.message.reply_document(open(tmp.name, 'rb'))


async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id != ADMIN_CHAT_ID:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    if not context.args:
        return await update.message.reply_text(
            "‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /broadcast"
        )
    text = " ".join(context.args)
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=f"üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{text}\n\n/‚Äãbroadcast_confirm –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
    )
    context.bot_data['pending'] = text


async def broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (–∞–¥–º–∏–Ω)"""
    if update.effective_user.id != ADMIN_CHAT_ID:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    text = context.bot_data.get('pending')
    if not text:
        return await update.message.reply_text("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    conn = get_pg_connection()
    cur = conn.cursor()
    cur.execute("SELECT DISTINCT user_id FROM stats")
    ids = [r[0] for r in cur.fetchall()]
    conn.close()
    ok, fail = 0, 0
    for uid in ids:
        try:
            await context.bot.send_message(uid, text)
            ok += 1
        except Exception:
            fail += 1
    await update.message.reply_text(
        f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ‚úÖ{ok}  ‚ùå{fail}"
    )
    context.bot_data.pop('pending', None)


async def set_bot_commands(application: Application):
    public = [BotCommand('start','–ù–∞—á–∞—Ç—å')]
    await application.bot.set_my_commands(public, scope=BotCommandScopeDefault())
    admin = [
        BotCommand('stats','–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        BotCommand('exportstats','–í—ã–≥—Ä—É–∑–∫–∞ XLSX'),
        BotCommand('broadcast','–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏'),
        BotCommand('broadcast_confirm','–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    ]
    await application.bot.set_my_commands(admin, scope=BotCommandScopeChat(chat_id=ADMIN_CHAT_ID))


def keep_alive():
    """–ü–∏–Ω–≥ Render, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞–ª"""
    def ping():
        url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}"
        while True:
            try:
                requests.get(url)
            except:
                pass
            time.sleep(600)
    threading.Thread(target=ping,daemon=True).start()


def main():
    ensure_database_exists()
    start_mail_checking()
    keep_alive()
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('stats', stats))
    app.add_handler(CommandHandler('exportstats', exportstats))
    app.add_handler(CommandHandler('broadcast', broadcast))
    app.add_handler(CommandHandler('broadcast_confirm', broadcast_confirm))
    app.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.post_init = set_bot_commands
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_webhook(
        listen='0.0.0.0',
        port=int(os.environ.get('PORT',10000)),
        url_path=TOKEN,
        webhook_url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )


if __name__ == '__main__':
    main()
