import os
import logging
import threading
import time
import tempfile
import pandas as pd
import psycopg2
from telegram import Update, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from mail_reader import start_mail_checking, ensure_database_exists
from datetime import datetime, timedelta
from flask import Flask
from threading import Thread
from openpyxl.styles import PatternFill

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∏–Ω–≥–∞ Render
ping_app = Flask('ping')
@ping_app.route('/')
def ping_root():
    return 'OK', 200
Thread(target=lambda: ping_app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000))), daemon=True).start()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
TOKEN = os.getenv('TELEGRAM_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '0'))

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_pg_connection():
    return psycopg2.connect(
        host=os.getenv('POSTGRES_HOST'),
        port=int(os.getenv('POSTGRES_PORT', 5432)),
        dbname=os.getenv('POSTGRES_DB'),
        user=os.getenv('POSTGRES_USER'),
        password=os.getenv('POSTGRES_PASSWORD')
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.')

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sid = update.message.sticker.file_id
    await update.message.reply_text(f'üÜî ID —Å—Ç–∏–∫–µ—Ä–∞:\n`{sid}`', parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–¥—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,\.]+', update.message.text.strip()) if c]
    if not container_numbers:
        return await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.')

    conn = get_pg_connection(); cur = conn.cursor()
    found_rows, not_found = [], []
    for num in container_numbers:
        cur.execute(
            'SELECT container_number, from_station, to_station, current_station, '
            'operation, operation_date, waybill, km_left, forecast_days, wagon_number, operation_road '
            'FROM tracking WHERE container_number = %s',
            (num,)
        )
        row = cur.fetchone()
        if row:
            found_rows.append(row)
            cur.execute(
                'INSERT INTO stats(container_number,user_id,username) VALUES(%s,%s,%s)',
                (num, update.effective_user.id, update.effective_user.username)
            )
            conn.commit()
        else:
            not_found.append(num)
    conn.close()

    # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ -> Excel
    if len(found_rows) > 1:
        df = pd.DataFrame(found_rows, columns=[
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞','–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è','–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
            '–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è','–û–ø–µ—Ä–∞—Ü–∏—è','–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏','–ù–∞–∫–ª–∞–¥–Ω–∞—è',
            '–û—Å—Ç–∞–ª–æ—Å—å –∫–º','–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω)','–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞','–î–æ—Ä–æ–≥–∞'
        ])
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
            with pd.ExcelWriter(tmp.name, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name='–î–∏—Å–ª–æ–∫–∞—Ü–∏—è')
                ws = writer.sheets['–î–∏—Å–ª–æ–∫–∞—Ü–∏—è']
                # –ó–∞–ª–∏–≤–∫–∞ —à–∞–ø–∫–∏
                fill = PatternFill(fill_type='solid', start_color='87CEEB', end_color='87CEEB')
                for cell in ws[1]: cell.fill = fill
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞
                for col in ws.columns:
                    max_len = max(len(str(cell.value)) for cell in col)
                    ws.column_dimensions[col[0].column_letter].width = max_len + 2
            # –ò–º—è —Ñ–∞–π–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞
            vtime = datetime.utcnow() + timedelta(hours=10)
            fname = f'Dislocation_{vtime:%H-%M}.xlsx'
            await update.message.reply_document(open(tmp.name,'rb'), filename=fname)
        if not_found:
            await update.message.reply_text('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: ' + ', '.join(not_found))
        return

    # –û–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç -> —Ç–µ–∫—Å—Ç
    if found_rows:
        row = found_rows[0]
        wagon = '–ø–æ–ª—É–≤–∞–≥–æ–Ω' if row[9].startswith('6') else '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞'
        text = (
            f'üöõ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {row[0]} –≤ –≤–∞–≥–æ–Ω–µ {row[9]} ({wagon})\n'
            f'üìç {row[3]} ({row[10]})\n'
            f'üèó {row[4]} ‚Äî {row[5]}\n'
            f'–û—Ç–∫—É–¥–∞: {row[1]}, –ö—É–¥–∞: {row[2]}\n'
            f'–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row[6]}, km left: {row[7]}, –ø—Ä–æ–≥–Ω–æ–∑: {row[8]} –¥–Ω'
        )
        await update.message.reply_text(text)
    else:
        await update.message.reply_text('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.')

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return await update.message.reply_text('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
    conn = get_pg_connection(); cur = conn.cursor()
    cur.execute("SELECT user_id, username, COUNT(*) FROM stats GROUP BY 1,2 ORDER BY 3 DESC")
    rows = cur.fetchall(); conn.close()
    if not rows: return await update.message.reply_text('–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.')
    msg = 'üìä Stats:\n' + ''.join(f'{u} ({n}): {cnt}\n' for u,n,cnt in rows)
    await update.message.reply_text(msg)

async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return await update.message.reply_text('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
    conn = get_pg_connection()
    df = pd.read_sql('SELECT * FROM stats', conn); conn.close()
    if df.empty: return await update.message.reply_text('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.')
    with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as tmp:
        df.to_excel(tmp.name, index=False)
        await update.message.reply_document(open(tmp.name,'rb'))

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return await update.message.reply_text('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
    if not context.args:
        return await update.message.reply_text('‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /broadcast')
    text = ' '.join(context.args)
    await context.bot.send_message(ADMIN_CHAT_ID, f'üîç Preview:\n{text}')
    context.bot_data['pending'] = text

async def broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        return await update.message.reply_text('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.')
    text = context.bot_data.get('pending')
    if not text: return await update.message.reply_text('‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.')
    conn = get_pg_connection(); cur = conn.cursor()
    cur.execute('SELECT DISTINCT user_id FROM stats'); ids = [r[0] for r in cur.fetchall()]; conn.close()
    ok,fail=0,0
    for uid in ids:
        try: await context.bot.send_message(uid, text); ok+=1
        except: fail+=1
    await update.message.reply_text(f'üì§ Sent: ‚úÖ{ok} ‚ùå{fail}')
    context.bot_data.pop('pending', None)

async def set_bot_commands(application: Application):
    public = [BotCommand('start','–ù–∞—á–∞—Ç—å')]
    await application.bot.set_my_commands(public, scope=BotCommandScopeDefault())
    admin = [
        BotCommand('stats','–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        BotCommand('exportstats','Export XLSX'),
        BotCommand('broadcast','Preview broadcast'),
        BotCommand('broadcast_confirm','Confirm broadcast')
    ]
    await application.bot.set_my_commands(admin, scope=BotCommandScopeChat(chat_id=ADMIN_CHAT_ID))

def main():
    ensure_database_exists()
    start_mail_checking()
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('stats', stats))
    app.add_handler(CommandHandler('exportstats', exportstats))
    app.add_handler(CommandHandler('broadcast', broadcast))
    app.add_handler(CommandHandler('broadcast_confirm', broadcast_confirm))
    app.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.post_init = set_bot_commands
    logger.info('Bot started')
    app.run_webhook(
        listen='0.0.0.0',
        port=int(os.getenv('PORT',10000)),
        url_path=TOKEN,
        webhook_url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )

if __name__ == '__main__':
    main()
