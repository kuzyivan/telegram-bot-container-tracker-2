import os
import sqlite3
import logging
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup, BotCommand, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from mail_reader import start_mail_checking, ensure_database_exists
from collections import defaultdict
import re
import tempfile

TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker_id = "CAACAgIAAxkBAAIC6mgUWmOtztmC0dnqI3C2l4wcikA-AAJvbAACa_OZSGYOhHaiIb7mNgQ"
    await update.message.reply_sticker(sticker_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker = update.message.sticker
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker.file_id}`", parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,\n.]+' , user_input.strip()) if c]

    conn = sqlite3.connect("tracking.db")
    cursor = conn.cursor()

    found_rows = []
    not_found = []

    for number in container_numbers:
        cursor.execute("""
            SELECT container_number, from_station, to_station, current_station,
                   operation, operation_date, waybill, km_left, forecast_days,
                   wagon_number, operation_road
            FROM tracking WHERE container_number = ?
        """, (number,))
        row = cursor.fetchone()
        if row:
            found_rows.append(row)

            cursor.execute("""
                CREATE TABLE IF NOT EXISTS stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    container_number TEXT,
                    user_id INTEGER,
                    username TEXT,
                    timestamp TEXT
                )
            """)
            cursor.execute("""
                INSERT INTO stats (container_number, user_id, username, timestamp)
                VALUES (?, ?, ?, datetime('now', 'localtime'))
            """, (number, update.message.from_user.id, update.message.from_user.username))
            conn.commit()
        else:
            not_found.append(number)

    conn.close()

    if len(container_numbers) > 1 and found_rows:
        df = pd.DataFrame(found_rows, columns=[
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
            '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        ])

        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
    df.to_excel(tmp.name, index=False)
    message = f"üì¶ –í–æ—Ç —Ç–≤–æ—è –¥–∏—Å–ª–æ–∫–∞—Ü–∏—è! –í —Ñ–∞–π–ª–µ ‚Äî {len(found_rows)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä(–æ–≤)."
    if not_found:
        message += f"\n\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(not_found)}"
    message += "\n\n‚¨áÔ∏è –°–∫–∞—á–∞–π Excel –Ω–∏–∂–µ:"
    await update.message.reply_text(message)
    await update.message.reply_document(document=open(tmp.name, "rb"), filename="–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã.xlsx")

    if found_rows:
        reply_lines = []
        for row in found_rows:
            wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if row[9].startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
            reply_lines.append(
                f"üöõ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row[0]}\n"
                f"üöá –í–∞–≥–æ–Ω: {row[9]} {wagon_type}\n"
                f"üìç–î–∏—Å–ª–æ–∫–∞—Ü–∏—è: {row[3]} {row[10]}\n"
                f"üèó –û–ø–µ—Ä–∞—Ü–∏—è: {row[4]}\nüìÖ {row[5]}\n\n"
                f"–û—Ç–∫—É–¥–∞: {row[1]}\n–ö—É–¥–∞: {row[2]}\n\n"
                f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row[6]}\n–û—Å—Ç–∞–ª–æ—Å—å –∫–º: {row[7]}\n"
                f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è: {row[8]} –¥–Ω."
            )
        await update.message.reply_text("\n" + "‚ïê" * 30 + "\n".join(reply_lines))
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    conn = sqlite3.connect("tracking.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT user_id, COALESCE(username, '‚Äî'), COUNT(*), GROUP_CONCAT(DISTINCT container_number)
        FROM stats
        GROUP BY user_id
        ORDER BY COUNT(*) DESC
    """)
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
        return

    report_lines = ["üìä –û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"]
    for user_id, username, count, containers in rows:
        report_lines.append(
            f"\nüë§ `{user_id}` ({username})\n"
            f"üì¶ –ó–∞–ø—Ä–æ—Å–æ–≤: {count}\n"
            f"üßæ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {containers}"
        )

    await update.message.reply_text("\n".join(report_lines[:30]), parse_mode="Markdown")

async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    conn = sqlite3.connect("tracking.db")
    df = pd.read_sql_query("SELECT * FROM stats", conn)
    conn.close()

    if df.empty:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    file_path = "user_stats.xlsx"
    df.to_excel(file_path, index=False)

    await update.message.reply_document(InputFile(file_path))
    os.remove(file_path)

async def set_bot_commands(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"),
        BotCommand("exportstats", "–í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Excel (–∞–¥–º–∏–Ω)")
    ])

def main():
    ensure_database_exists()
    start_mail_checking()

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("exportstats", exportstats))
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.post_init = set_bot_commands
    logger.info("‚ú® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path=TOKEN,
        webhook_url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )

if __name__ == '__main__':
    main()

