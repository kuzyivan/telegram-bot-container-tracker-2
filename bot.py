# bot.py
import logging
from logger import get_logger
logger = get_logger(__name__)

from telegram import BotCommand, BotCommandScopeDefault, BotCommandScopeChat, Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
)
from telegram.request import HTTPXRequest
from dotenv import load_dotenv
load_dotenv()

from config import TOKEN, ADMIN_CHAT_ID
from scheduler import start_scheduler

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
from handlers.menu_handlers import start, reply_keyboard_handler, handle_sticker 
from handlers.email_management_handler import get_email_conversation_handler, get_email_command_handlers
from handlers.subscription_management_handler import get_subscription_management_handlers
from handlers.tracking_handlers import tracking_conversation_handler
# ‚úÖ –ù–û–í–´–ô –ò–ú–ü–û–†–¢: handle_single_container_excel_callback
from handlers.dislocation_handlers import handle_message, handle_single_container_excel_callback 
from handlers.broadcast import broadcast_conversation_handler
from handlers.train import setup_handlers as setup_train_handlers

# ‚úÖ –ù–û–í–´–ô –ò–ú–ü–û–†–¢ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
from handlers.distance_handlers import distance_conversation_handler

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
from handlers.admin.panel import admin_panel, admin_panel_callback
from handlers.admin.uploads import upload_file_command, handle_admin_document
from handlers.admin.exports import stats, exportstats, tracking
from handlers.admin.notifications import force_notify_handler # <--- –ù–û–í–´–ô –ò–ú–ü–û–†–¢

# --- –ò–ú–ü–û–†–¢ init_db ---
from db import init_db
# ---------------------

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
    logger.error("‚ùóÔ∏è –û—à–∏–±–∫–∞: %s", context.error, exc_info=True)

async def set_bot_commands(application: Application):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞."""
    user_commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("distance", "–†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç 10-01"),
        BotCommand("my_emails", "–ú–æ–∏ Email-–∞–¥—Ä–µ—Å–∞"),
        BotCommand("my_subscriptions", "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    ]
    await application.bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
    
    admin_commands = user_commands + [
        BotCommand("admin", "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏"),
        BotCommand("broadcast", "–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"),
        BotCommand("force_notify", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"),
        BotCommand("train", "–û—Ç—á—ë—Ç –ø–æ –ø–æ–µ–∑–¥—É"),
        BotCommand("upload_file", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤")
    ]
    await application.bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=ADMIN_CHAT_ID))
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

def main():
    logger.info("üö¶ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞!")
    if not TOKEN:
        logger.critical("üî• TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
        return

    logging.getLogger("httpx").setLevel(logging.WARNING) 
    
    application = Application.builder().token(TOKEN).build()
    
    # 1. –î–∏–∞–ª–æ–≥–∏
    application.add_handler(broadcast_conversation_handler)
    application.add_handler(tracking_conversation_handler())
    application.add_handler(get_email_conversation_handler())
    setup_train_handlers(application)
    application.add_handler(distance_conversation_handler())
    
    # 2. –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("exportstats", exportstats))
    application.add_handler(CommandHandler("tracking", tracking))
    application.add_handler(CommandHandler("upload_file", upload_file_command))
    application.add_handler(CommandHandler("force_notify", force_notify_handler)) # <--- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ô –ö–û–ú–ê–ù–î–´
    
    # 3. –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application.add_handler(CommandHandler("start", start))
    application.add_handlers(get_email_command_handlers())
    application.add_handlers(get_subscription_management_handlers())
    
    # 4. –ö–æ–ª–±—ç–∫–∏
    application.add_handler(CallbackQueryHandler(admin_panel_callback, pattern="^admin_"))
    # ‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê: –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel
    application.add_handler(CallbackQueryHandler(handle_single_container_excel_callback, pattern="^get_excel_single_")) 
    
    # 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï REGEX: –£–ø—Ä–æ—â–∞–µ–º –¥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r'(–î–∏—Å–ª–æ–∫–∞—Ü–∏—è|–ø–æ–¥–ø–∏—Å–∫–∏|–ø–æ–µ–∑–¥–∞|–ù–∞—Å—Ç—Ä–æ–π–∫–∏)'), 
        reply_keyboard_handler
    ))
    
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
    application.add_handler(MessageHandler(
        filters.Chat(ADMIN_CHAT_ID) & filters.Document.FileExtension("xlsx"), 
        handle_admin_document
    ))
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∏–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.add_error_handler(error_handler)

    async def post_init(app: Application):
        # --- –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ---
        await init_db() # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        # -----------------------------
        
        await set_bot_commands(app)
        
        dislocation_check_on_start_func = start_scheduler(app.bot)
        
        if dislocation_check_on_start_func:
            logger.info("‚ö°Ô∏è –ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞...")
            await dislocation_check_on_start_func()
            
        logger.info("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω.")

    application.post_init = post_init
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
