import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import sqlite3
from mail_reader import start_mail_checking
from backup_db import start_backup_scheduler

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DB_FILE = 'tracking.db'
PORT = int(os.environ.get('PORT', 10000))

# –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
async def track_container(update: Update, context: ContextTypes.DEFAULT_TYPE):
    container_number = update.message.text.strip().upper()
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT departure_station, arrival_station, operation_station, operation_type, operation_datetime, waybill_number, distance_left
        FROM tracking
        WHERE container_number = ?
        ORDER BY operation_datetime DESC
        LIMIT 1
    ''', (container_number,))
    row = cursor.fetchone()
    conn.close()

    if row:
        departure, arrival, op_station, op_type, op_datetime, waybill, distance = row
        reply = (
            f"üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {container_number}\n"
            f"üöâ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {departure}\n"
            f"üöä –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {arrival}\n"
            f"üöÑ –°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {op_station}\n"
            f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è: {op_type}\n"
            f"üïí –í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {op_datetime}\n"
            f"üí≥ –ù–∞–∫–ª–∞–¥–Ω–∞—è: {waybill}\n"
            f"üåç –û—Å—Ç–∞—Ç–æ–∫ –∫–º: {distance}"
        )
    else:
        reply = "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

    await update.message.reply_text(reply)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üöÄ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

if __name__ == '__main__':
    start_mail_checking()
    start_backup_scheduler()

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, track_container))

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=TELEGRAM_TOKEN,
        webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TELEGRAM_TOKEN}"
    )
