import os
import sqlite3
import logging
import re
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from mail_reader import start_mail_checking
from backup_db import start_backup_scheduler

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv("TELEGRAM_TOKEN")
DB_FILE = "tracking.db"
PORT = int(os.getenv("PORT", 10000))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üì¶")

# –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞(–æ–≤)
async def find_container(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    raw_ids = re.split(r"[,\.\s\n]+", text)
    container_ids = [c.strip().upper() for c in raw_ids if c.strip()]
    if not container_ids:
        await update.message.reply_text("‚ùó –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")
        return

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    found = []
    not_found = []

    for cid in container_ids:
        cursor.execute("SELECT * FROM tracking WHERE container_number = ?", (cid,))
        rows = cursor.fetchall()
        if rows:
            found.extend(rows)
        else:
            not_found.append(cid)
    conn.close()

    if not found:
        await update.message.reply_text("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –¥–∞—Ç–µ
    grouped = {}
    for row in found:
        key = (row[4], row[6])  # current_station, operation_date
        grouped.setdefault(key, []).append(row)

    reply_lines = []
    for (station, date), group in grouped.items():
        header = f"üèóÔ∏è {station}\nüìÖ {date}"
        containers = []
        for row in group:
            forecast = f"{round(row[8] / 600, 1)} –¥–Ω." if row[8] else "-"
            containers.append(
                f"üöõ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row[1]}\n"
                f"–û—Ç–∫—É–¥–∞: {row[2]}\n"
                f"–ö—É–¥–∞: {row[3]}\n"
                f"–û–ø–µ—Ä–∞—Ü–∏—è: {row[5]}\n"
                f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row[7]}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –∫–º: {row[8]}\n"
                f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è: {forecast}"
            )
        reply_lines.append(f"{header}\n\n" + "\n\n".join(containers))

    if not_found:
        reply_lines.append(
            "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ:\n" + ", ".join(not_found)
        )

    await update.message.reply_text("\n\n".join(reply_lines[:30]))  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
if __name__ == "__main__":
    start_mail_checking()
    start_backup_scheduler()

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, find_container))
    logger.info("‚ú® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=f"{WEBHOOK_URL}/"
    )
