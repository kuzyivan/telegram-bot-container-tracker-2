# bot.py
from logger import get_logger
logger = get_logger(__name__)

from telegram import BotCommand, BotCommandScopeDefault, BotCommandScopeChat, Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
)
from telegram.request import HTTPXRequest
from dotenv import load_dotenv
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Å–µ—Ä–≤–∏—Å—ã ---
from config import TOKEN, ADMIN_CHAT_ID
from scheduler import start_scheduler

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
from handlers.menu_handlers import start, reply_keyboard_handler, handle_sticker
from handlers.email_management_handler import get_email_conversation_handler, get_email_command_handlers
from handlers.subscription_management_handler import get_subscription_management_handlers
from handlers.tracking_handlers import tracking_conversation_handler
from handlers.dislocation_handlers import handle_message
from handlers.admin_handlers import (
    stats, exportstats, tracking, test_notify, force_notify_conversation_handler,
    admin_panel, admin_panel_callback,
    upload_file_command, handle_admin_document # ‚úÖ –¢–æ–ª—å–∫–æ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
)
from handlers.broadcast import broadcast_conversation_handler
from handlers.train import setup_handlers as setup_train_handlers

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", context.error, exc_info=True)

async def set_bot_commands(application: Application):
    user_commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("my_emails", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Email-–∞–¥—Ä–µ—Å–∞–º–∏"),
        BotCommand("my_subscriptions", "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    ]
    await application.bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    
    admin_commands = user_commands + [
        BotCommand("admin", "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏"),
        BotCommand("broadcast", "–†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º"),
        BotCommand("force_notify", "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"),
        BotCommand("train", "–û—Ç—á—ë—Ç –ø–æ –ø–æ–µ–∑–¥—É"),
        BotCommand("upload_file", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤")
    ]
    await application.bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=ADMIN_CHAT_ID))
    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ (ID: {ADMIN_CHAT_ID}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

def main():
    logger.info("üö¶ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞!")
    if not TOKEN:
        logger.critical("üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
        return

    request = HTTPXRequest(connect_timeout=10.0, read_timeout=60.0, write_timeout=60.0, pool_timeout=60.0)
    
    application = Application.builder().token(TOKEN).request(request).build()
    
    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    
    # 1. –î–∏–∞–ª–æ–≥–∏ (ConversationHandlers)
    application.add_handler(broadcast_conversation_handler)
    application.add_handler(tracking_conversation_handler())
    application.add_handler(get_email_conversation_handler())
    application.add_handler(force_notify_conversation_handler)
    setup_train_handlers(application)
    
    # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CallbackQueryHandler(admin_panel_callback, pattern="^admin_"))
    application.add_handlers(get_email_command_handlers())
    application.add_handlers(get_subscription_management_handlers())
    application.add_handler(CommandHandler("start", start))
    
    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("exportstats", exportstats))
    application.add_handler(CommandHandler("tracking", tracking))
    application.add_handler(CommandHandler("testnotify", test_notify))
    application.add_handler(CommandHandler("upload_file", upload_file_command)) # ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    
    # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.Regex("^(üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è|üìÇ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏)$"), reply_keyboard_handler))
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
    
    # ‚úÖ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∞
    application.add_handler(MessageHandler(
        filters.Chat(ADMIN_CHAT_ID) & filters.Document.FileExtension("xlsx"), 
        handle_admin_document
    ))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.add_error_handler(error_handler)

    async def post_init(app: Application):
        await set_bot_commands(app)
        start_scheduler(app.bot)
        logger.info("‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω.")

    application.post_init = post_init
    
    logger.info("ü§ñ –ù–∞—á–∏–Ω–∞—é polling...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()