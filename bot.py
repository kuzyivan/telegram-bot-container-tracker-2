import os
import logging
import sqlite3
import re
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from mail_reader import start_mail_checking
from backup_db import start_backup_scheduler

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–Ω–Ω–æ–π mail_reader.py
DB_FILE = 'tracking.db'
PORT = int(os.getenv('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(BOT_TOKEN).build()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø AtermTrackBot. –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –∏ —è –ø–æ–∫–∞–∂—É –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å."  
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùì –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª/–∑–∞–ø—è—Ç—É—é, –∏ —è –æ—Ç–≤–µ—á—É –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
async def track(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().upper()
    containers = [c for c in re.split(r'[\s,;:\n\r\.]+', text) if c]
    if not containers:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        placeholders = ','.join('?' for _ in containers)
        query = f"""
            SELECT container_number, departure_station, arrival_station,
                   operation_station, operation_type, operation_datetime,
                   waybill_number, distance_left
            FROM tracking
            WHERE container_number IN ({placeholders})
            ORDER BY operation_datetime DESC
        """
        rows = cursor.execute(query, containers).fetchall()
        conn.close()

        if not rows:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.")
            return

        latest = {}
        for row in rows:
            cn = row[0]
            if cn not in latest:
                latest[cn] = row

        routes = {}
        for row in latest.values():
            cn, dep, arr, op_station, op_type, op_dt, waybill, dist = row
            route_key = (dep, arr)
            routes.setdefault(route_key, []).append((cn, op_station, op_type, op_dt, waybill, dist))

        reply = "üì¶ –û—Ç—á—ë—Ç –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º:\n"
        for (dep, arr), ops in routes.items():
            reply += f"\nüöÜ –ú–∞—Ä—à—Ä—É—Ç: {dep} ‚Üí {arr}\n"
            for cn, op_station, op_type, op_dt, waybill, dist in ops:
                station = (op_station or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').split('(')[0].strip().upper()
                dt_str = op_dt if isinstance(op_dt, str) else str(op_dt)
                reply += (
                    f"üì¶ {cn}\n"
                    f"üìç –°—Ç–∞–Ω—Ü–∏—è: {station}\n"
                    f"‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è: {op_type}\n"
                    f"üïì –í—Ä–µ–º—è: {dt_str}\n"
                    f"üì¶ –ù–∞–∫–ª–∞–¥–Ω–∞—è: {waybill}\n"
                    f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å –∫–º: {dist}\n"
                )
        await update.message.reply_text(reply)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('help', help_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, track))

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    start_mail_checking()
    start_backup_scheduler()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook
    app.run_webhook(
        listen='0.0.0.0',
        port=PORT,
        url_path='webhook',
        webhook_url=f"{WEBHOOK_URL}/webhook"
    )
