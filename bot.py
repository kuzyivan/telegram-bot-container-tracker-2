import os
import sqlite3
import logging
import pandas as pd
from datetime import datetime
from telegram import Update, BotCommand, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

from mail_reader import start_mail_checking, ensure_database_exists

TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker_id = "CAACAgIAAxkBAAIC6mgUWmOtztmC0dnqI3C2l4wcikA-AAJvbAACa_OZSGYOhHaiIb7mNgQ"
    await update.message.reply_sticker(sticker_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    container_numbers = [
        c.strip().upper()
        for c in re.split(r'[\s,\n.]+', user_input.strip())
        if c
    ]

    conn = sqlite3.connect("tracking.db")
    cursor = conn.cursor()

    found = []
    not_found = []

    for number in container_numbers:
        cursor.execute("""
            SELECT container_number, from_station, to_station, current_station,
                   operation, operation_date, waybill, km_left, forecast_days,
                   wagon_number, operation_road
              FROM tracking WHERE container_number = ?
        """, (number,))
        row = cursor.fetchone()
        if row:
            found.append(row)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    container_number TEXT,
                    user_id INTEGER,
                    username TEXT,
                    timestamp TEXT
                )
            """)
            cursor.execute("""
                INSERT INTO stats (container_number, user_id, username, timestamp)
                     VALUES (?, ?, ?, datetime('now', 'localtime'))
            """, (number, update.effective_user.id, update.effective_user.username))
            conn.commit()
        else:
            not_found.append(number)

    conn.close()

    if not found:
        return await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.")

    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel
    if len(found) > 1:
        df = pd.DataFrame(found, columns=[
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–û—Å—Ç–∞–ª–æ—Å—å –∫–º', '–ü—Ä–æ–≥–Ω–æ–∑ (–¥–Ω.)',
            '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        ])
        tmp_name = f"/tmp/containers_{datetime.now():%H%M}.xlsx"
        df.to_excel(tmp_name, index=False)

        await update.message.reply_document(
            document=open(tmp_name, "rb"),
            filename=os.path.basename(tmp_name)
        )
        if not_found:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
        return

    # –û–¥–∏–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    row = found[0]
    wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if row[9].startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
    text = (
        f"üöõ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row[0]}\n"
        f"üöá –í–∞–≥–æ–Ω: {row[9]} ({wagon_type})\n"
        f"üìç –î–∏—Å–ª–æ–∫–∞—Ü–∏—è: {row[3]} {row[10]}\n"
        f"üèó –û–ø–µ—Ä–∞—Ü–∏—è: {row[4]} ‚Äî {row[5]}\n\n"
        f"–û—Ç–∫—É–¥–∞: {row[1]}\n"
        f"–ö—É–¥–∞: {row[2]}\n\n"
        f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row[6]}\n"
        f"üõ£ –û—Å—Ç–∞–ª–æ—Å—å –∫–º: {row[7]}\n"
        f"‚è≥ –ü—Ä–æ–≥–Ω–æ–∑: {row[8]} –¥–Ω."
    )
    await update.message.reply_text(text)


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_chat.id) != ADMIN_CHAT_ID:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    conn = sqlite3.connect("tracking.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT user_id, COALESCE(username, '‚Äî'), COUNT(*), 
               GROUP_CONCAT(DISTINCT container_number)
          FROM stats
      GROUP BY user_id
      ORDER BY COUNT(*) DESC
    """)
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        return await update.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    reply = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:"]
    for uid, uname, cnt, cnts in rows:
        reply.append(
            f"üë§ {uname} (ID {uid}):\n"
            f"  –ó–∞–ø—Ä–æ—Å–æ–≤: {cnt}\n"
            f"  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {cnts}"
        )
    await update.message.reply_text("\n\n".join(reply))


async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_chat.id) != ADMIN_CHAT_ID:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    conn = sqlite3.connect("tracking.db")
    df = pd.read_sql_query("SELECT * FROM stats", conn)
    conn.close()
    if df.empty:
        return await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
    path = f"/tmp/stats_{datetime.now():%H%M}.xlsx"
    df.to_excel(path, index=False)
    await update.message.reply_document(document=open(path, "rb"), filename=os.path.basename(path))


async def set_bot_commands(application: Application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand("stats", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∞–¥–º–∏–Ω)"),
        BotCommand("exportstats", "–í—ã–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Excel (–∞–¥–º–∏–Ω)"),
    ])


# ‚Äî‚Äî‚Äî‚Äî‚Äî —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ‚Äî‚Äî‚Äî‚Äî‚Äî

async def auto_ping(context: ContextTypes.DEFAULT_TYPE):
    """–ü–∏–Ω–≥ Telegram API, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª —Ç—Ä–∞—Ñ–∏–∫."""
    try:
        await context.bot.get_me()
        logger.info("üì° Auto-ping —É—Å–ø–µ—à–µ–Ω.")
    except Exception as e:
        logger.warning(f"‚ö† Auto-ping –æ—à–∏–±–∫–∞: {e}")


async def keep_alive(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–æ –ª–æ–≥, —á—Ç–æ–±—ã Render —Å—á–∏—Ç–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º."""
    logger.info("üü¢ Keep-alive heartbeat.")


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –ø–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã
    ensure_database_exists()
    start_mail_checking()

    # –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("exportstats", exportstats))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.post_init = set_bot_commands

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    jq = application.job_queue
    # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç ‚Äì –∞–≤—Ç–æ-–ø–∏–Ω–≥
    jq.run_repeating(auto_ping, interval=5 * 60, first=0)
    # –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É ‚Äì heartbeat-–ª–æ–≥
    jq.run_repeating(keep_alive, interval=60, first=0)

    # –ó–∞–ø—É—Å–∫ webhook
    logger.info("‚ú® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path=TOKEN,
        webhook_url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )


if __name__ == "__main__":
    main()
