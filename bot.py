from logger import get_logger
logger = get_logger(__name__)

from telegram import BotCommand, BotCommandScopeDefault, BotCommandScopeChat, Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ConversationHandler
)
from dotenv import load_dotenv
load_dotenv()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ; –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ systemd –±–µ—Ä—ë—Ç—Å—è EnvironmentFile

from config import TOKEN, ADMIN_CHAT_ID
from mail_reader import start_mail_checking
from scheduler import start_scheduler

# --- —Ä–∞–∑–Ω–µ—Å—ë–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---
# email
from handlers.email_handlers import set_email_command, process_email, cancel_email, SET_EMAIL
# –º–µ–Ω—é, –∫–Ω–æ–ø–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã
from handlers.menu_handlers import (
    start, show_menu, reply_keyboard_handler,
    menu_button_handler, dislocation_inline_callback_handler, handle_sticker
)
# –ø–æ–∏—Å–∫/–≤—ã–≤–æ–¥ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏
from handlers.dislocation_handlers import handle_message
# –∞–¥–º–∏–Ω–∫–∞
from handlers.admin_handlers import stats, exportstats, tracking, test_notify
# —Ç—Ä–µ–∫–∏–Ω–≥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
from handlers.tracking_handlers import (
    tracking_conversation_handler,
    cancel,
    cancel_tracking_confirm
)
# —Ä–∞—Å—Å—ã–ª–∫–∞
from handlers.broadcast import broadcast_conversation_handler
# –ü–û–ï–ó–î–ê: –∑–∞–≥—Ä—É–∑–∫–∞ Excel —Å –Ω–æ–º–µ—Ä–æ–º –ø–æ–µ–∑–¥–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
from handlers.train_handlers import upload_train_help, handle_train_excel


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ===
async def error_handler(update, context):
    logger.error("‚ùóÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", context.error, exc_info=True)


# === –õ–û–í–ï–¶ –õ–Æ–ë–´–• –ê–ü–î–ï–ô–¢–û–í –î–õ–Ø –î–ï–ë–ê–ì–ê ===
async def debug_all_updates(update: Update, context):
    try:
        uid = update.effective_user.id if update.effective_user else "‚Äî"
        uname = update.effective_user.username if update.effective_user else "‚Äî"
        txt = getattr(getattr(update, "message", None), "text", None)
        logger.info(f"[DEBUG UPDATE] from {uid} (@{uname}) type={type(update).__name__} text={txt}")
    except Exception:
        logger.exception("[DEBUG UPDATE] failed to log update")


# === –£–°–¢–ê–ù–û–í–ö–ê –ö–û–ú–ê–ù–î ===
async def set_bot_commands(application):
    user_commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("canceltracking", "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Å–ª–µ–∂–µ–Ω–∏—è"),
        BotCommand("set_email", "–£–∫–∞–∑–∞—Ç—å e-mail –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤"),
        BotCommand("email_off", "–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ e-mail"),
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–µ–∑–¥–æ–≤ (–¥–ª—è –≤—Å–µ—Ö, –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
        BotCommand("upload_train", "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Å –ø–æ–µ–∑–¥–∞–º–∏"),
    ]
    await application.bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    admin_commands = user_commands + [
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand("exportstats", "–í—ã–≥—Ä—É–∑–∫–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand("testnotify", "–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand("tracking", "–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–∞–¥–º–∏–Ω)"),
        BotCommand("broadcast", "–†–∞—Å—Å—ã–ª–∫–∞ (–∞–¥–º–∏–Ω)"),
    ]
    await application.bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=ADMIN_CHAT_ID))
    logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ (ID: {ADMIN_CHAT_ID}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


# === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
def main():
    logger.info("üö¶ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞!")
    try:
        application = Application.builder().token(TOKEN).build()

        # === ConversationHandler –¥–ª—è /set_email ===
        set_email_conv_handler = ConversationHandler(
            entry_points=[CommandHandler("set_email", set_email_command)],
            states={SET_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_email)]},
            fallbacks=[CommandHandler("cancel", cancel_email)],
        )
        application.add_handler(set_email_conv_handler)

        # === –•–µ–Ω–¥–ª–µ—Ä—ã ===
        application.add_handler(broadcast_conversation_handler)
        application.add_handler(tracking_conversation_handler())

        # Callback-–∫–Ω–æ–ø–∫–∏
        application.add_handler(CallbackQueryHandler(menu_button_handler, pattern="^(start|dislocation|track_request)$"))
        application.add_handler(CallbackQueryHandler(dislocation_inline_callback_handler, pattern="^dislocation_inline$"))
        application.add_handler(CallbackQueryHandler(cancel_tracking_confirm, pattern="^cancel_tracking_"))

        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("menu", show_menu))
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("canceltracking", cancel))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CommandHandler("exportstats", exportstats))
        application.add_handler(CommandHandler("tracking", tracking))
        application.add_handler(CommandHandler("testnotify", test_notify))

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–µ–∑–¥–æ–≤ (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π)
        application.add_handler(CommandHandler("upload_train", upload_train_help))

        # –ü—Ä–∏—ë–º Excel-—Ñ–∞–π–ª–æ–≤ —Å –ø–æ–µ–∑–¥–∞–º–∏ –æ—Ç –∞–¥–º–∏–Ω–∞.
        # –ë–µ—Ä—ë–º –ª—é–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç, —Ç–∏–ø/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–∏ handle_train_excel.
        application.add_handler(
            MessageHandler(
                filters.Document.ALL,
                handle_train_excel
            )
        )

        # Reply-–∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        application.add_handler(MessageHandler(
            filters.Regex("^(üì¶ –î–∏—Å–ª–æ–∫–∞—Ü–∏—è|üîî –ó–∞–¥–∞—Ç—å —Å–ª–µ–∂–µ–Ω–∏–µ|‚ùå –û—Ç–º–µ–Ω–∞ —Å–ª–µ–∂–µ–Ω–∏—è)$"),
            reply_keyboard_handler
        ))

        # –°—Ç–∏–∫–µ—Ä—ã
        application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))

        # –õ—é–±–æ–π –ø—Ä–æ—á–∏–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–∏—Å–∫ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # –°–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≤–µ—Ü –ª—é–±—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
        application.add_handler(MessageHandler(filters.ALL, debug_all_updates))

        # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ===
        application.add_error_handler(error_handler)

        # === post_init —Å –∑–∞–¥–∞—á–∞–º–∏ ===
        async def post_init(app):
            logger.info("‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...")

            # –ü–∏–Ω–≥ –∞–¥–º–∏–Ω—É + getMe –¥–ª—è —è–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞/–¥–æ—Å—Ç–∞–≤–∫–∏
            try:
                await app.bot.send_message(ADMIN_CHAT_ID, "ü§ñ –ë–æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –∏ —Å–ª—É—à–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã (polling).")
                me = await app.bot.get_me()
                logger.info(f"getMe: @{me.username} (id={me.id})")
            except Exception as e:
                logger.error(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}", exc_info=True)

            await start_mail_checking()
            start_scheduler(app.bot)
            await set_bot_commands(app)
            logger.info("‚úÖ post_init –∑–∞–≤–µ—Ä—à—ë–Ω.")

        application.post_init = post_init

        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É. –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        application.run_polling(
            allowed_updates=None,       # –±—Ä–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤
            drop_pending_updates=False, # –Ω–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –Ω–æ–≤—ã–µ –∞–ø–¥–µ–π—Ç—ã
            stop_signals=None,          # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø–æ SIGTERM –æ—Ç systemd
            close_loop=False
        )
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

    except Exception as e:
        logger.critical("üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", e, exc_info=True)


if __name__ == "__main__":
    main()