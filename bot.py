import os
import re
import sqlite3
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from mail_reader import start_mail_checking
from backup_db import start_backup_scheduler

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_FILE = 'tracking.db'
PORT = int(os.getenv('PORT', 10000))
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª üöõ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞/–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
async def find_container(update: Update, context: ContextTypes.DEFAULT_TYPE):
    queries = update.message.text.strip().upper().split()

    if len(queries) > 10:
        await update.message.reply_text("‚ùó –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 10 –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑.")
        return

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    messages = []

    for query in queries:
        if not re.match(r'^[A-Z]{4}\d{7}$', query):
            messages.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {query}")
            continue

        cursor.execute("SELECT * FROM tracking WHERE container_number = ?", (query,))
        rows = cursor.fetchall()

        if not rows:
            messages.append(f"‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {query} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            for row in rows:
                message = (f"üöö –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row[1]}\n"
                           f"–û—Ç–∫—É–¥–∞: {row[2]}\n"
                           f"–ö—É–¥–∞: {row[3]}\n"
                           f"–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {row[4]}\n"
                           f"–û–ø–µ—Ä–∞—Ü–∏—è: {row[5]}\n"
                           f"–î–∞—Ç–∞/–≤—Ä–µ–º—è: {row[6]}\n"
                           f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row[7]}\n"
                           f"–û—Å—Ç–∞–ª–æ—Å—å –∫–º: {row[8]}\n"
                           f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è: {row[9]} –¥–Ω–µ–π")
                messages.append(message)

    conn.close()

    await update.message.reply_text('\n\n'.join(messages))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
def check_database():
    if not os.path.exists(DB_FILE):
        logger.warning("‚ö†Ô∏è –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö tracking.db –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    check_database()

    start_mail_checking()
    start_backup_scheduler()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, find_container))

    if WEBHOOK_URL:
        logger.info(f"‚ú® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\nüåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
        app.run_webhook(listen="0.0.0.0", port=PORT, webhook_url=f"{WEBHOOK_URL}/")
    else:
        logger.info("‚ú® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        app.run_polling()
