import os
import threading
import time
import requests
import logging
import pandas as pd
import re
import psycopg2
import tempfile
from telegram import Update, ReplyKeyboardMarkup, BotCommand, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from mail_reader import start_mail_checking, ensure_database_exists
from collections import defaultdict
from datetime import datetime, timedelta

TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_pg_connection():
    return psycopg2.connect(
        host=os.getenv("POSTGRES_HOST"),
        port=os.getenv("POSTGRES_PORT", 5432),
        dbname=os.getenv("POSTGRES_DB"),
        user=os.getenv("POSTGRES_USER"),
        password=os.getenv("POSTGRES_PASSWORD")
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker_id = "CAACAgIAAxkBAAIC6mgUWmOtztmC0dnqI3C2l4wcikA-AAJvbAACa_OZSGYOhHaiIb7mNgQ"
    await update.message.reply_sticker(sticker_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sticker = update.message.sticker
    await update.message.reply_text(f"üÜî ID —ç—Ç–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞:\n`{sticker.file_id}`", parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    container_numbers = [c.strip().upper() for c in re.split(r'[\s,\n.]+' , user_input.strip()) if c]

    conn = get_pg_connection()
    cursor = conn.cursor()

    found_rows = []
    not_found = []

    for number in container_numbers:
        cursor.execute("""
            SELECT container_number, from_station, to_station, current_station,
                   operation, operation_date, waybill, km_left, forecast_days,
                   wagon_number, operation_road
            FROM tracking WHERE container_number = %s
        """, (number,))
        row = cursor.fetchone()
        if row:
            found_rows.append(row)

            cursor.execute("""
                CREATE TABLE IF NOT EXISTS stats (
                    id SERIAL PRIMARY KEY,
                    container_number TEXT,
                    user_id BIGINT,
                    username TEXT,
                    timestamp TIMESTAMP DEFAULT NOW()
                )
            """)
            cursor.execute("""
                INSERT INTO stats (container_number, user_id, username)
                VALUES (%s, %s, %s)
            """, (number, update.message.from_user.id, update.message.from_user.username))
            conn.commit()
        else:
            not_found.append(number)

    conn.close()

    if len(container_numbers) > 1 and found_rows:
        df = pd.DataFrame(found_rows, columns=[
            '–ù–æ–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', '–°—Ç–∞–Ω—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
            '–°—Ç–∞–Ω—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏', '–û–ø–µ—Ä–∞—Ü–∏—è', '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏',
            '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è', '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è (–¥–Ω–µ–π)',
            '–ù–æ–º–µ—Ä –≤–∞–≥–æ–Ω–∞', '–î–æ—Ä–æ–≥–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        ])

        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            with pd.ExcelWriter(tmp.name, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name='–î–∏—Å–ª–æ–∫–∞—Ü–∏—è')
                workbook = writer.book
                worksheet = writer.sheets['–î–∏—Å–ª–æ–∫–∞—Ü–∏—è']
            
                # –ó–∞–ª–∏–≤–∫–∞ –¥–ª—è —à–∞–ø–∫–∏
                from openpyxl.styles import PatternFill
                fill = PatternFill(start_color='87CEEB', end_color='87CEEB', fill_type='solid')
                for cell in worksheet[1]:
                    cell.fill = fill
            
                # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
                for col in worksheet.columns:
                    max_length = max(len(str(cell.value)) if cell.value is not None else 0 for cell in col)
                    adjusted_width = max_length + 2
                    worksheet.column_dimensions[col[0].column_letter].width = adjusted_width

            from datetime import datetime, timedelta

            vladivostok_time = datetime.utcnow() + timedelta(hours=10)
            filename = f"–î–∏—Å–ª–æ–∫–∞—Ü–∏—è {vladivostok_time.strftime('%H-%M')}.xlsx"
            await update.message.reply_document(document=open(tmp.name, "rb"), filename=filename)

        if not_found:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: " + ", ".join(not_found))
        return

    if found_rows:
        reply_lines = []
        for row in found_rows:
            wagon_type = "–ø–æ–ª—É–≤–∞–≥–æ–Ω" if row[9].startswith("6") else "–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
            reply_lines.append(
                f"üöõ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: {row[0]}\n"
                f"üöá –í–∞–≥–æ–Ω: {row[9]} {wagon_type}\n"
                f"üìç–î–∏—Å–ª–æ–∫–∞—Ü–∏—è: {row[3]} {row[10]}\n"
                f"üèó –û–ø–µ—Ä–∞—Ü–∏—è: {row[4]}\nüìÖ {row[5]}\n\n"
                f"–û—Ç–∫—É–¥–∞: {row[1]}\n–ö—É–¥–∞: {row[2]}\n\n"
                f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {row[6]}\n–û—Å—Ç–∞–ª–æ—Å—å –∫–º: {row[7]}\n"
                f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–∏–±—ã—Ç–∏—è: {row[8]} –¥–Ω."
            )
        await update.message.reply_text("\n" + "‚ïê" * 30 + "\n".join(reply_lines))
    else:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    conn = get_pg_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT user_id, COALESCE(username, '‚Äî') AS username, COUNT(*) AS –∑–∞–ø—Ä–æ—Å–æ–≤,
               STRING_AGG(DISTINCT container_number, ', ') AS –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        FROM stats
        WHERE timestamp >= NOW() - INTERVAL '1 day'
          AND user_id != 114419850
        GROUP BY user_id, username
        ORDER BY –∑–∞–ø—Ä–æ—Å–æ–≤ DESC
    """)
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.")
        return

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n\n"
    messages = []
    for row in rows:
        entry = (
            f"üë§ {row[1]} (ID: {row[0]})\n"
            f"–ó–∞–ø—Ä–æ—Å–æ–≤: {row[2]}\n"
            f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: {row[3]}\n\n"
        )
        if len(text) + len(entry) > 4000:
            messages.append(text)
            text = ""
        text += entry
    messages.append(text)

    for msg in messages:
        await update.message.reply_text(msg)

async def exportstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != ADMIN_CHAT_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    conn = get_pg_connection()
    df = pd.read_sql_query("SELECT * FROM stats", conn)
    conn.close()

    if df.empty:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    from openpyxl.styles import PatternFill
    from datetime import datetime, timedelta
    import tempfile

    with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
        with pd.ExcelWriter(tmp.name, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            workbook = writer.book
            worksheet = writer.sheets['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']

            # –ó–∞–ª–∏–≤–∫–∞ —à–∞–ø–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            header_fill = PatternFill(start_color='FFD673', end_color='FFD673', fill_type='solid')
            for cell in worksheet[1]:
                cell.fill = header_fill

            # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in worksheet.columns:
                max_length = max(len(str(cell.value)) if cell.value else 0 for cell in col)
                worksheet.column_dimensions[col[0].column_letter].width = max_length + 2

        # –ò–º—è —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        vladivostok_time = datetime.utcnow() + timedelta(hours=10)
        filename = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {vladivostok_time.strftime('%H-%M')}.xlsx"
        await update.message.reply_document(document=open(tmp.name, "rb"), filename=filename)
async def set_bot_commands(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"),
        BotCommand("exportstats", "–í—ã–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Excel (–∞–¥–º–∏–Ω)")
    ])

def ensure_database_exists():
    conn = get_pg_connection()
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã tracking
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS tracking (
            container_number TEXT,
            from_station TEXT,
            to_station TEXT,
            current_station TEXT,
            operation TEXT,
            operation_date TEXT,
            waybill TEXT,
            km_left TEXT,
            forecast_days TEXT,
            wagon_number TEXT,
            operation_road TEXT
        );
    """)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã stats
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS stats (
            id SERIAL PRIMARY KEY,
            container_number TEXT,
            user_id BIGINT,
            username TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)

    conn.commit()
    conn.close()

def keep_alive():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–∏–Ω–≥—É–µ—Ç Render, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞–ª."""
    url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/"
    def ping():
        while True:
            try:
                response = requests.get(url)
                logger.info(f"[AUTOPING] {url} ‚Äî {response.status_code}")
            except Exception as e:
                logger.warning(f"[AUTOPING] Error: {e}")
            time.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    threading.Thread(target=ping, daemon=True).start()

def main():
    ensure_database_exists()
    start_mail_checking()

    keep_alive()
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("exportstats", exportstats))
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.post_init = set_bot_commands
    logger.info("‚ú® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path=TOKEN,
        webhook_url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )

if __name__ == '__main__':
    main()

