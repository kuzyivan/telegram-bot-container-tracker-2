# utils/railway_utils.py
from typing import Optional
import re

# Словарь сокращений, где ключ — это код дороги (строка)
RAILWAY_ABBREVIATIONS = {
    "94": "ЗАБ",      # ЗАБАЙКАЛЬСКАЯ
    "98": "ДВОСТ",     # ДАЛЬНЕВОСТОЧНАЯ
    "77": "СВЕРД",    # СВЕРДЛОВСКАЯ
    "60": "КРАСН",    # КРАСНОЯРСКАЯ
    "78": "Ю-УР",      # ЮЖНО-УРАЛЬСКАЯ
    "76": "ГОРЬК",    # ГОРЬКОВСКАЯ
    "85": "З-СИБ",     # ЗАПАДНО-СИБИРСКАЯ
    "83": "Ю-ВОСТ",    # ЮГО-ВОСТОЧНАЯ
    "88": "С-КАВ",    # СЕВЕРО-КАВКАЗСКАЯ
    "64": "МОСК",     # МОСКОВСКАЯ
    "51": "ОКТ",      # ОКТЯБРЬСКАЯ
    "65": "КУЙБ",     # КУЙБЫШЕВСКАЯ
    "63": "ПРИВ",     # ПРИВОЛЖСКАЯ
    "56": "СЕВ",      # СЕВЕРНАЯ
    "87": "ВОСТ-СИБ", # ВОСТОЧНО-СИБИРСКАЯ
    "81": "КАЛИН",    # КАЛИНИНГРАДСКАЯ
    # Добавьте другие сокращения по полному имени, если нужно
}

def get_railway_abbreviation(railway_str: Optional[str]) -> str:
    """
    Извлекает код дороги из строки (например, 'ЗАБАЙКАЛЬСКАЯ (94)') 
    и возвращает ее общепринятое сокращение.
    """
    if not railway_str:
        return 'н/д'
    
    # 1. Ищем код дороги в скобках (самый надежный способ)
    match = re.search(r'\((\d+)\)', railway_str)
    if match:
        code = match.group(1).strip()
        # 2. Ищем сокращение по коду
        # Если код не найден в словаре, возвращаем оригинальную строку
        return RAILWAY_ABBREVIATIONS.get(code, railway_str)
        
    # 3. Если код не найден, возвращаем оригинальную строку
    return railway_str